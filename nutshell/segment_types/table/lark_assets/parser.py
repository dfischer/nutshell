# The file was automatically generated by Lark v0.8.5
#
#
#   Lark Stand-alone Generator Tool
# ----------------------------------
# Generates a stand-alone LALR(1) parser with a standard lexer
#
# Git:    https://github.com/erezsh/lark
# Author: Erez Shinan (erezshin@gmail.com)
#
###
# Modified: github/supposedly
###
#
#    >>> LICENSE
#
#    This tool and its generated code use a separate license from Lark,
#    and are subject to the terms of the Mozilla Public License, v. 2.0.
#    If a copy of the MPL was not distributed with this
#    file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
#    If you wish to purchase a commercial license for this tool and its
#    generated code, you may contact me via email or otherwise.
#
#    If MPL2 is incompatible with your free or open-source project,
#    contact me and we'll work it out.
#
#

import os
from io import open

class LarkError(Exception):
    pass

class GrammarError(LarkError):
    pass

class ParseError(LarkError):
    pass

class LexError(LarkError):
    pass

class UnexpectedEOF(ParseError):
    def __init__(self, expected):
        self.expected = expected

        message = ("Unexpected end-of-input. Expected one of: \n\t* %s\n" % '\n\t* '.join(x.name for x in self.expected))
        super(UnexpectedEOF, self).__init__(message)


class UnexpectedInput(LarkError):
    pos_in_stream = None

    def get_context(self, text, span=40):
        pos = self.pos_in_stream
        start = max(pos - span, 0)
        end = pos + span
        before = text[start:pos].rsplit('\n', 1)[-1]
        after = text[pos:end].split('\n', 1)[0]
        return before + after + '\n' + ' ' * len(before) + '^\n'

    def match_examples(self, parse_fn, examples):
        """ Given a parser instance and a dictionary mapping some label with
            some malformed syntax examples, it'll return the label for the
            example that bests matches the current error.
        """
        assert self.state is not None, "Not supported for this exception"

        candidate = None
        for label, example in examples.items():
            assert not isinstance(example, STRING_TYPE)

            for malformed in example:
                try:
                    parse_fn(malformed)
                except UnexpectedInput as ut:
                    if ut.state == self.state:
                        try:
                            if ut.token == self.token:  # Try exact match first
                                return label
                        except AttributeError:
                            pass
                        if not candidate:
                            candidate = label

        return candidate


class UnexpectedCharacters(LexError, UnexpectedInput):
    def __init__(self, seq, lex_pos, line, column, allowed=None, considered_tokens=None, state=None, token_history=None):
        message = "No terminal defined for '%s' at line %d col %d" % (seq[lex_pos], line, column)

        self.line = line
        self.column = column
        self.allowed = allowed
        self.considered_tokens = considered_tokens
        self.pos_in_stream = lex_pos
        self.state = state

        message += '\n\n' + self.get_context(seq)
        if allowed:
            message += '\nExpecting: %s\n' % allowed
        if token_history:
            message += '\nPrevious tokens: %s\n' % ', '.join(repr(t) for t in token_history)

        super(UnexpectedCharacters, self).__init__(message)



class UnexpectedToken(ParseError, UnexpectedInput):
    def __init__(self, token, expected, considered_rules=None, state=None):
        self.token = token
        self.expected = expected     # XXX str shouldn't necessary
        self.line = getattr(token, 'line', '?')
        self.column = getattr(token, 'column', '?')
        self.considered_rules = considered_rules
        self.state = state
        self.pos_in_stream = getattr(token, 'pos_in_stream', None)

        message = ("Unexpected token %r at line %s, column %s.\n"
                   "Expected one of: \n\t* %s\n"
                   % (token, self.line, self.column, '\n\t* '.join(self.expected)))

        super(UnexpectedToken, self).__init__(message)

class VisitError(LarkError):
    """VisitError is raised when visitors are interrupted by an exception

    It provides the following attributes for inspection:
    - obj: the tree node or token it was processing when the exception was raised
    - orig_exc: the exception that cause it to fail
    """
    def __init__(self, rule, obj, orig_exc):
        self.obj = obj
        self.orig_exc = orig_exc

        message = 'Error trying to process rule "%s":\n\n%s' % (rule, orig_exc)
        super(VisitError, self).__init__(message)

def classify(seq, key=None, value=None):
    d = {}
    for item in seq:
        k = key(item) if (key is not None) else item
        v = value(item) if (value is not None) else item
        if k in d:
            d[k].append(v)
        else:
            d[k] = [v]
    return d


def _deserialize(data, namespace, memo):
    if isinstance(data, dict):
        if '__type__' in data: # Object
            class_ = namespace[data['__type__']]
            return class_.deserialize(data, memo)
        elif '@' in data:
            return memo[data['@']]
        return {key:_deserialize(value, namespace, memo) for key, value in data.items()}
    elif isinstance(data, list):
        return [_deserialize(value, namespace, memo) for value in data]
    return data


class Serialize(object):
    def memo_serialize(self, types_to_memoize):
        memo = SerializeMemoizer(types_to_memoize)
        return self.serialize(memo), memo.serialize()

    def serialize(self, memo=None):
        if memo and memo.in_types(self):
            return {'@': memo.memoized.get(self)}

        fields = getattr(self, '__serialize_fields__')
        res = {f: _serialize(getattr(self, f), memo) for f in fields}
        res['__type__'] = type(self).__name__
        postprocess = getattr(self, '_serialize', None)
        if postprocess:
            postprocess(res, memo)
        return res

    @classmethod
    def deserialize(cls, data, memo):
        namespace = getattr(cls, '__serialize_namespace__', {})
        namespace = {c.__name__:c for c in namespace}

        fields = getattr(cls, '__serialize_fields__')

        if '@' in data:
            return memo[data['@']]

        inst = cls.__new__(cls)
        for f in fields:
            try:
                setattr(inst, f, _deserialize(data[f], namespace, memo))
            except KeyError as e:
                raise KeyError("Cannot find key for class", cls, e)
        postprocess = getattr(inst, '_deserialize', None)
        if postprocess:
            postprocess()
        return inst


class SerializeMemoizer(Serialize):
    __serialize_fields__ = 'memoized',

    def __init__(self, types_to_memoize):
        self.types_to_memoize = tuple(types_to_memoize)
        self.memoized = Enumerator()

    def in_types(self, value):
        return isinstance(value, self.types_to_memoize)

    def serialize(self):
        return _serialize(self.memoized.reversed(), None)

    @classmethod
    def deserialize(cls, data, namespace, memo):
        return _deserialize(data, namespace, memo)



try:
    STRING_TYPE = basestring
except NameError:   # Python 3
    STRING_TYPE = str


import types
from functools import wraps, partial
from contextlib import contextmanager

Str = type(u'')
try:
    classtype = types.ClassType # Python2
except AttributeError:
    classtype = type    # Python3

def smart_decorator(f, create_decorator):
    if isinstance(f, types.FunctionType):
        return wraps(f)(create_decorator(f, True))

    elif isinstance(f, (classtype, type, types.BuiltinFunctionType)):
        return wraps(f)(create_decorator(f, False))

    elif isinstance(f, types.MethodType):
        return wraps(f)(create_decorator(f.__func__, True))

    elif isinstance(f, partial):
        # wraps does not work for partials in 2.7: https://bugs.python.org/issue3445
        return wraps(f.func)(create_decorator(lambda *args, **kw: f(*args[1:], **kw), True))

    else:
        return create_decorator(f.__func__.__call__, True)

import sys, re
Py36 = (sys.version_info[:2] >= (3, 6))

import sre_parse
import sre_constants
def get_regexp_width(regexp):
    try:
        return [int(x) for x in sre_parse.parse(regexp).getwidth()]
    except sre_constants.error:
        raise ValueError(regexp)


class Meta:
    def __init__(self):
        self.empty = True

class Tree(object):
    def __init__(self, data, children, meta=None):
        self.data = data
        self.children = children
        self._meta = meta

    @property
    def meta(self):
        if self._meta is None:
            self._meta = Meta()
        return self._meta

    def __repr__(self):
        return 'Tree(%s, %s)' % (self.data, self.children)

    def _pretty_label(self):
        return self.data

    def _pretty(self, level, indent_str):
        if len(self.children) == 1 and not isinstance(self.children[0], Tree):
            return [ indent_str*level, self._pretty_label(), '\t', '%s' % (self.children[0],), '\n']

        l = [ indent_str*level, self._pretty_label(), '\n' ]
        for n in self.children:
            if isinstance(n, Tree):
                l += n._pretty(level+1, indent_str)
            else:
                l += [ indent_str*(level+1), '%s' % (n,), '\n' ]

        return l

    def pretty(self, indent_str='  '):
        return ''.join(self._pretty(0, indent_str))

    def __eq__(self, other):
        try:
            return self.data == other.data and self.children == other.children
        except AttributeError:
            return False

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self):
        return hash((self.data, tuple(self.children)))

    def iter_subtrees(self):
        queue = [self]
        subtrees = OrderedDict()
        for subtree in queue:
            subtrees[id(subtree)] = subtree
            queue += [c for c in reversed(subtree.children)
                      if isinstance(c, Tree) and id(c) not in subtrees]

        del queue
        return reversed(list(subtrees.values()))

    def find_pred(self, pred):
        "Find all nodes where pred(tree) == True"
        return filter(pred, self.iter_subtrees())

    def find_data(self, data):
        "Find all nodes where tree.data == data"
        return self.find_pred(lambda t: t.data == data)


from inspect import getmembers, getmro

class Discard(Exception):
    pass

# Transformers

class _Decoratable:
    @classmethod
    def _apply_decorator(cls, decorator, **kwargs):
        mro = getmro(cls)
        assert mro[0] is cls
        libmembers = {name for _cls in mro[1:] for name, _ in getmembers(_cls)}
        for name, value in getmembers(cls):

            # Make sure the function isn't inherited (unless it's overwritten)
            if name.startswith('_') or (name in libmembers and name not in cls.__dict__):
                continue
            if not callable(value):
                continue

            # Skip if v_args already applied (at the function level)
            if hasattr(cls.__dict__[name], 'vargs_applied') or hasattr(value, 'vargs_applied'):
                continue

            static = isinstance(cls.__dict__[name], (staticmethod, classmethod))
            setattr(cls, name, decorator(value, static=static, **kwargs))
        return cls

    def __class_getitem__(cls, _):
        return cls


class Transformer(_Decoratable):
    """Visits the tree recursively, starting with the leaves and finally the root (bottom-up)

    Calls its methods (provided by user via inheritance) according to tree.data
    The returned value replaces the old one in the structure.

    Can be used to implement map or reduce.
    """
    __visit_tokens__ = True   # For backwards compatibility

    def __init__(self,  visit_tokens=True):
        self.__visit_tokens__ = visit_tokens

    def _call_userfunc(self, tree, new_children=None):
        # Assumes tree is already transformed
        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            try:
                wrapper = getattr(f, 'visit_wrapper', None)
                if wrapper is not None:
                    return f.visit_wrapper(f, tree.data, children, tree.meta)
                else:
                    return f(children)
            except (GrammarError, Discard):
                raise
            except Exception as e:
                raise# VisitError(tree.data, tree, e)

    def _call_userfunc_token(self, token):
        try:
            f = getattr(self, token.type)
        except AttributeError:
            return self.__default_token__(token)
        else:
            try:
                return f(token)
            except (GrammarError, Discard):
                raise
            except Exception as e:
                raise VisitError(token.type, token, e)


    def _transform_children(self, children):
        for c in children:
            try:
                if isinstance(c, Tree):
                    yield self._transform_tree(c)
                elif self.__visit_tokens__ and isinstance(c, Token):
                    yield self._call_userfunc_token(c)
                else:
                    yield c
            except Discard:
                pass

    def _transform_tree(self, tree):
        children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree, children)

    def transform(self, tree):
        return self._transform_tree(tree)

    def __mul__(self, other):
        return TransformerChain(self, other)

    def __default__(self, data, children, meta):
        "Default operation on tree (for override)"
        return Tree(data, children, meta)

    def __default_token__(self, token):
        "Default operation on token (for override)"
        return token



class InlineTransformer(Transformer):   # XXX Deprecated
    def _call_userfunc(self, tree, new_children=None):
        # Assumes tree is already transformed
        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            return f(*children)


class TransformerChain(object):
    def __init__(self, *transformers):
        self.transformers = transformers

    def transform(self, tree):
        for t in self.transformers:
            tree = t.transform(tree)
        return tree

    def __mul__(self, other):
        return TransformerChain(*self.transformers + (other,))


class Transformer_InPlace(Transformer):
    "Non-recursive. Changes the tree in-place instead of returning new instances"
    def _transform_tree(self, tree):           # Cancel recursion
        return self._call_userfunc(tree)

    def transform(self, tree):
        for subtree in tree.iter_subtrees():
            subtree.children = list(self._transform_children(subtree.children))

        return self._transform_tree(tree)


class Transformer_NonRecursive(Transformer):
    "Non-recursive. Doesn't change the original tree."

    def transform(self, tree):
        # Tree to postfix
        rev_postfix = []
        q = [tree]
        while q:
            t = q.pop()
            rev_postfix.append( t )
            if isinstance(t, Tree):
                q += t.children

        # Postfix to tree
        stack = []
        for x in reversed(rev_postfix):
            if isinstance(x, Tree):
                size = len(x.children)
                if size:
                    args = stack[-size:]
                    del stack[-size:]
                else:
                    args = []
                stack.append(self._call_userfunc(x, args))
            else:
                stack.append(x)

        t ,= stack  # We should have only one tree remaining
        return t



class Transformer_InPlaceRecursive(Transformer):
    "Recursive. Changes the tree in-place instead of returning new instances"
    def _transform_tree(self, tree):
        tree.children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree)



# Visitors

class VisitorBase:
    def _call_userfunc(self, tree):
        return getattr(self, tree.data, self.__default__)(tree)

    def __default__(self, tree):
        "Default operation on tree (for override)"
        return tree

    def __class_getitem__(cls, _):
        return cls


class Visitor(VisitorBase):
    """Bottom-up visitor, non-recursive

    Visits the tree, starting with the leaves and finally the root (bottom-up)
    Calls its methods (provided by user via inheritance) according to tree.data
    """

    def visit(self, tree):
        for subtree in tree.iter_subtrees():
            self._call_userfunc(subtree)
        return tree

    def visit_topdown(self,tree):
        for subtree in tree.iter_subtrees_topdown():
            self._call_userfunc(subtree)
        return tree

class Visitor_Recursive(VisitorBase):
    """Bottom-up visitor, recursive

    Visits the tree, starting with the leaves and finally the root (bottom-up)
    Calls its methods (provided by user via inheritance) according to tree.data
    """

    def visit(self, tree):
        for child in tree.children:
            if isinstance(child, Tree):
                self.visit(child)

        self._call_userfunc(tree)
        return tree

    def visit_topdown(self,tree):
        self._call_userfunc(tree)

        for child in tree.children:
            if isinstance(child, Tree):
                self.visit_topdown(child)

        return tree



def visit_children_decor(func):
    "See Interpreter"
    @wraps(func)
    def inner(cls, tree):
        values = cls.visit_children(tree)
        return func(cls, values)
    return inner


class Interpreter(_Decoratable):
    """Top-down visitor, recursive

    Visits the tree, starting with the root and finally the leaves (top-down)
    Calls its methods (provided by user via inheritance) according to tree.data

    Unlike Transformer and Visitor, the Interpreter doesn't automatically visit its sub-branches.
    The user has to explicitly call visit_children, or use the @visit_children_decor
    """

    def visit(self, tree):
        f = getattr(self, tree.data)
        wrapper = getattr(f, 'visit_wrapper', None)
        if wrapper is not None:
            return f.visit_wrapper(f, tree.data, tree.children, tree.meta)
        else:
            return f(tree)

    def visit_children(self, tree):
        return [self.visit(child) if isinstance(child, Tree) else child
                for child in tree.children]

    def __getattr__(self, name):
        return self.__default__

    def __default__(self, tree):
        return self.visit_children(tree)




# Decorators

def _apply_decorator(obj, decorator, **kwargs):
    try:
        _apply = obj._apply_decorator
    except AttributeError:
        return decorator(obj, **kwargs)
    else:
        return _apply(decorator, **kwargs)



def _inline_args__func(func):
    @wraps(func)
    def create_decorator(_f, with_self):
        if with_self:
            def f(self, children):
                return _f(self, *children)
        else:
            def f(self, children):
                return _f(*children)
        return f

    return smart_decorator(func, create_decorator)


def inline_args(obj):   # XXX Deprecated
    return _apply_decorator(obj, _inline_args__func)



def _visitor_args_func_dec(func, visit_wrapper=None, static=False):
    def create_decorator(_f, with_self):
        if with_self:
            def f(self, *args, **kwargs):
                return _f(self, *args, **kwargs)
        else:
            def f(self, *args, **kwargs):
                return _f(*args, **kwargs)
        return f

    if static:
        f = wraps(func)(create_decorator(func, False))
    else:
        f = smart_decorator(func, create_decorator)
    f.vargs_applied = True
    f.visit_wrapper = visit_wrapper
    return f


def _vargs_inline(f, data, children, meta):
    return f(*children)
def _vargs_meta_inline(f, data, children, meta):
    return f(meta, *children)
def _vargs_meta(f, data, children, meta):
    return f(children, meta)   # TODO swap these for consistency? Backwards incompatible!
def _vargs_tree(f, data, children, meta):
    return f(Tree(data, children, meta))

def v_args(inline=False, meta=False, tree=False, wrapper=None):
    "A convenience decorator factory, for modifying the behavior of user-supplied visitor methods"
    if tree and (meta or inline):
        raise ValueError("Visitor functions cannot combine 'tree' with 'meta' or 'inline'.")

    func = None
    if meta:
        if inline:
            func = _vargs_meta_inline
        else:
            func = _vargs_meta
    elif inline:
        func = _vargs_inline
    elif tree:
        func = _vargs_tree

    if wrapper is not None:
        if func is not None:
            raise ValueError("Cannot use 'wrapper' along with 'tree', 'meta' or 'inline'.")
        func = wrapper

    def _visitor_args_dec(obj):
        return _apply_decorator(obj, _visitor_args_func_dec, visit_wrapper=func)
    return _visitor_args_dec



class Indenter:
    def __init__(self):
        self.paren_level = None
        self.indent_level = None
        assert self.tab_len > 0

    def handle_NL(self, token):
        if self.paren_level > 0:
            return

        yield token

        indent_str = token.rsplit('\n', 1)[1] # Tabs and spaces
        indent = indent_str.count(' ') + indent_str.count('\t') * self.tab_len

        if indent > self.indent_level[-1]:
            self.indent_level.append(indent)
            yield Token.new_borrow_pos(self.INDENT_type, indent_str, token)
        else:
            while indent < self.indent_level[-1]:
                self.indent_level.pop()
                yield Token.new_borrow_pos(self.DEDENT_type, indent_str, token)

            assert indent == self.indent_level[-1], '%s != %s' % (indent, self.indent_level[-1])

    def _process(self, stream):
        for token in stream:
            if token.type == self.NL_type:
                for t in self.handle_NL(token):
                    yield t
            else:
                yield token

            if token.type in self.OPEN_PAREN_types:
                self.paren_level += 1
            elif token.type in self.CLOSE_PAREN_types:
                self.paren_level -= 1
                assert self.paren_level >= 0

        while len(self.indent_level) > 1:
            self.indent_level.pop()
            yield Token(self.DEDENT_type, '')

        assert self.indent_level == [0], self.indent_level

    def process(self, stream):
        self.paren_level = 0
        self.indent_level = [0]
        return self._process(stream)

    # XXX Hack for ContextualLexer. Maybe there's a more elegant solution?
    @property
    def always_accept(self):
        return (self.NL_type,)



class Symbol(Serialize):
    __slots__ = ('name',)

    is_term = NotImplemented

    def __init__(self, name):
        self.name = name

    def __eq__(self, other):
        assert isinstance(other, Symbol), other
        return self.is_term == other.is_term and self.name == other.name

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self):
        return hash(self.name)

    def __repr__(self):
        return '%s(%r)' % (type(self).__name__, self.name)

    fullrepr = property(__repr__)


class Terminal(Symbol):
    __serialize_fields__ = 'name', 'filter_out'

    is_term = True

    def __init__(self, name, filter_out=False):
        self.name = name
        self.filter_out = filter_out

    @property
    def fullrepr(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.filter_out)



class NonTerminal(Symbol):
    __serialize_fields__ = 'name',

    is_term = False



class RuleOptions(Serialize):
    __serialize_fields__ = 'keep_all_tokens', 'expand1', 'priority', 'template_source', 'empty_indices'

    def __init__(self, keep_all_tokens=False, expand1=False, priority=None, template_source=None, empty_indices=()):
        self.keep_all_tokens = keep_all_tokens
        self.expand1 = expand1
        self.priority = priority
        self.template_source = template_source
        self.empty_indices = empty_indices

    def __repr__(self):
        return 'RuleOptions(%r, %r, %r, %r)' % (
            self.keep_all_tokens,
            self.expand1,
            self.priority,
            self.template_source
        )


class Rule(Serialize):
    """
        origin : a symbol
        expansion : a list of symbols
        order : index of this expansion amongst all rules of the same name
    """
    __slots__ = ('origin', 'expansion', 'alias', 'options', 'order', '_hash')

    __serialize_fields__ = 'origin', 'expansion', 'order', 'alias', 'options'
    __serialize_namespace__ = Terminal, NonTerminal, RuleOptions

    def __init__(self, origin, expansion, order=0, alias=None, options=None):
        self.origin = origin
        self.expansion = expansion
        self.alias = alias
        self.order = order
        self.options = options or RuleOptions()
        self._hash = hash((self.origin, tuple(self.expansion)))

    def _deserialize(self):
        self._hash = hash((self.origin, tuple(self.expansion)))

    def __str__(self):
        return '<%s : %s>' % (self.origin.name, ' '.join(x.name for x in self.expansion))

    def __repr__(self):
        return 'Rule(%r, %r, %r, %r)' % (self.origin, self.expansion, self.alias, self.options)

    def __hash__(self):
        return self._hash

    def __eq__(self, other):
        if not isinstance(other, Rule):
            return False
        return self.origin == other.origin and self.expansion == other.expansion





class Pattern(Serialize):

    def __init__(self, value, flags=()):
        self.value = value
        self.flags = frozenset(flags)

    def __repr__(self):
        return repr(self.to_regexp())

    # Pattern Hashing assumes all subclasses have a different priority!
    def __hash__(self):
        return hash((type(self), self.value, self.flags))
    def __eq__(self, other):
        return type(self) == type(other) and self.value == other.value and self.flags == other.flags

    def to_regexp(self):
        raise NotImplementedError()

    if Py36:
        # Python 3.6 changed syntax for flags in regular expression
        def _get_flags(self, value):
            for f in self.flags:
                value = ('(?%s:%s)' % (f, value))
            return value

    else:
        def _get_flags(self, value):
            for f in self.flags:
                value = ('(?%s)' % f) + value
            return value


class PatternStr(Pattern):
    __serialize_fields__ = 'value', 'flags'

    type = "str"

    def to_regexp(self):
        return self._get_flags(re.escape(self.value))

    @property
    def min_width(self):
        return len(self.value)
    max_width = min_width

class PatternRE(Pattern):
    __serialize_fields__ = 'value', 'flags', '_width'

    type = "re"

    def to_regexp(self):
        return self._get_flags(self.value)

    _width = None
    def _get_width(self):
        if self._width is None:
            self._width = get_regexp_width(self.to_regexp())
        return self._width

    @property
    def min_width(self):
        return self._get_width()[0]
    @property
    def max_width(self):
        return self._get_width()[1]


class TerminalDef(Serialize):
    __serialize_fields__ = 'name', 'pattern', 'priority'
    __serialize_namespace__ = PatternStr, PatternRE

    def __init__(self, name, pattern, priority=1):
        assert isinstance(pattern, Pattern), pattern
        self.name = name
        self.pattern = pattern
        self.priority = priority

    def __repr__(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.pattern)



class Token(Str):
    __slots__ = ('type', 'pos_in_stream', 'value', 'line', 'column', 'end_line', 'end_column', 'end_pos')

    def __new__(cls, type_, value, pos_in_stream=None, line=None, column=None, end_line=None, end_column=None, end_pos=None, tbl=None):
        try:
            self = super(Token, cls).__new__(cls, value)
        except UnicodeDecodeError:
            value = value.decode('latin1')
            self = super(Token, cls).__new__(cls, value)
        
        if tbl is None:
            raise Exception()
        if tbl is not None and type_ == 'STATE' and int(value) >= tbl.n_states:
            tbl.n_states = 1 + int(value)
        
        self.type = type_
        self.pos_in_stream = pos_in_stream
        self.value = value
        self.line = line
        self.column = column
        self.end_line = end_line
        self.end_column = end_column
        self.end_pos = end_pos
        return self

    def update(self, type_=None, value=None):
        return Token.new_borrow_pos(
            type_ if type_ is not None else self.type,
            value if value is not None else self.value,
            self
        )

    @classmethod
    def new_borrow_pos(cls, type_, value, borrow_t, tbl=None):
        return cls(type_, value, borrow_t.pos_in_stream, borrow_t.line, borrow_t.column, borrow_t.end_line, borrow_t.end_column, borrow_t.end_pos, tbl=tbl)

    def __reduce__(self):
        return (self.__class__, (self.type, self.value, self.pos_in_stream, self.line, self.column, ))

    def __repr__(self):
        return 'Token(%s, %r)' % (self.type, self.value)

    def __deepcopy__(self, memo):
        return Token(self.type, self.value, self.pos_in_stream, self.line, self.column)

    def __eq__(self, other):
        if isinstance(other, Token) and self.type != other.type:
            return False

        return Str.__eq__(self, other)

    __hash__ = Str.__hash__


class LineCounter:
    def __init__(self):
        self.newline_char = '\n'
        self.char_pos = 0
        self.line = 1
        self.column = 1
        self.line_start_pos = 0

    def feed(self, token, test_newline=True):
        """Consume a token and calculate the new line & column.

        As an optional optimization, set test_newline=False is token doesn't contain a newline.
        """
        if test_newline:
            newlines = token.count(self.newline_char)
            if newlines:
                self.line += newlines
                self.line_start_pos = self.char_pos + token.rindex(self.newline_char) + 1

        self.char_pos += len(token)
        self.column = self.char_pos - self.line_start_pos + 1

class _Lex:
    "Built to serve both Lexer and ContextualLexer"
    def __init__(self, lexer, state=None):
        self.lexer = lexer
        self.state = state

    def lex(self, stream, newline_types, ignore_types, *, tbl):
        newline_types = frozenset(newline_types)
        ignore_types = frozenset(ignore_types)
        line_ctr = LineCounter()
        last_token = None

        while line_ctr.char_pos < len(stream):
            lexer = self.lexer
            res = lexer.match(stream, line_ctr.char_pos)
            if not res:
                allowed = {v for m, tfi in lexer.mres for v in tfi.values()} - ignore_types
                if not allowed:
                    allowed = {"<END-OF-FILE>"}
                raise UnexpectedCharacters(stream, line_ctr.char_pos, line_ctr.line, line_ctr.column, allowed=allowed, state=self.state, token_history=last_token and [last_token])

            value, type_ = res

            if type_ not in ignore_types:
                t = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column, tbl=tbl)
                line_ctr.feed(value, type_ in newline_types)
                t.end_line = line_ctr.line
                t.end_column = line_ctr.column
                t.end_pos = line_ctr.char_pos
                if t.type in lexer.callback:
                    t = lexer.callback[t.type](t)
                    if not isinstance(t, Token):
                        raise ValueError("Callbacks must return a token (returned %r)" % t)
                yield t
                last_token = t
            else:
                if type_ in lexer.callback:
                    t2 = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column)
                    lexer.callback[type_](t2)
                line_ctr.feed(value, type_ in newline_types)




class UnlessCallback:
    def __init__(self, mres):
        self.mres = mres

    def __call__(self, t):
        for mre, type_from_index in self.mres:
            m = mre.match(t.value)
            if m:
                t.type = type_from_index[m.lastindex]
                break
        return t

class CallChain:
    def __init__(self, callback1, callback2, cond):
        self.callback1 = callback1
        self.callback2 = callback2
        self.cond = cond

    def __call__(self, t):
        t2 = self.callback1(t)
        return self.callback2(t) if self.cond(t2) else t2





def _create_unless(terminals, g_regex_flags):
    tokens_by_type = classify(terminals, lambda t: type(t.pattern))
    assert len(tokens_by_type) <= 2, tokens_by_type.keys()
    embedded_strs = set()
    callback = {}
    for retok in tokens_by_type.get(PatternRE, []):
        unless = [] # {}
        for strtok in tokens_by_type.get(PatternStr, []):
            if strtok.priority > retok.priority:
                continue
            s = strtok.pattern.value
            m = re.match(retok.pattern.to_regexp(), s, g_regex_flags)
            if m and m.group(0) == s:
                unless.append(strtok)
                if strtok.pattern.flags <= retok.pattern.flags:
                    embedded_strs.add(strtok)
        if unless:
            callback[retok.name] = UnlessCallback(build_mres(unless, g_regex_flags, match_whole=True))

    terminals = [t for t in terminals if t not in embedded_strs]
    return terminals, callback


def _build_mres(terminals, max_size, g_regex_flags, match_whole):
    # Python sets an unreasonable group limit (currently 100) in its re module
    # Worse, the only way to know we reached it is by catching an AssertionError!
    # This function recursively tries less and less groups until it's successful.
    postfix = '$' if match_whole else ''
    mres = []
    while terminals:
        try:
            mre = re.compile(u'|'.join(u'(?P<%s>%s)'%(t.name, t.pattern.to_regexp()+postfix) for t in terminals[:max_size]), g_regex_flags)
        except AssertionError:  # Yes, this is what Python provides us.. :/
            return _build_mres(terminals, max_size//2, g_regex_flags, match_whole)

        # terms_from_name = {t.name: t for t in terminals[:max_size]}
        mres.append((mre, {i:n for n,i in mre.groupindex.items()} ))
        terminals = terminals[max_size:]
    return mres

def build_mres(terminals, g_regex_flags, match_whole=False):
    return _build_mres(terminals, len(terminals), g_regex_flags, match_whole)

def _regexp_has_newline(r):
    r"""Expressions that may indicate newlines in a regexp:
        - newlines (\n)
        - escaped newline (\\n)
        - anything but ([^...])
        - any-char (.) when the flag (?s) exists
        - spaces (\s)
    """
    return '\n' in r or '\\n' in r or '\\s' in r or '[^' in r or ('(?s' in r and '.' in r)

class Lexer(object):
    """Lexer interface

    Method Signatures:
        lex(self, stream) -> Iterator[Token]
    """
    lex = NotImplemented


class TraditionalLexer(Lexer):

    def __init__(self, terminals, ignore=(), user_callbacks={}, g_regex_flags=0):
        assert all(isinstance(t, TerminalDef) for t in terminals), terminals

        terminals = list(terminals)

        # Sanitization
        for t in terminals:
            try:
                re.compile(t.pattern.to_regexp(), g_regex_flags)
            except re.error:
                raise LexError("Cannot compile token %s: %s" % (t.name, t.pattern))

            if t.pattern.min_width == 0:
                raise LexError("Lexer does not allow zero-width terminals. (%s: %s)" % (t.name, t.pattern))

        assert set(ignore) <= {t.name for t in terminals}

        # Init
        self.newline_types = [t.name for t in terminals if _regexp_has_newline(t.pattern.to_regexp())]
        self.ignore_types = list(ignore)

        terminals.sort(key=lambda x:(-x.priority, -x.pattern.max_width, -len(x.pattern.value), x.name))
        self.terminals = terminals
        self.user_callbacks = user_callbacks
        self.build(g_regex_flags)

    def build(self, g_regex_flags=0):
        terminals, self.callback = _create_unless(self.terminals, g_regex_flags)
        assert all(self.callback.values())

        for type_, f in self.user_callbacks.items():
            if type_ in self.callback:
                # Already a callback there, probably UnlessCallback
                self.callback[type_] = CallChain(self.callback[type_], f, lambda t: t.type == type_)
            else:
                self.callback[type_] = f

        self.mres = build_mres(terminals, g_regex_flags)

    def match(self, stream, pos):
        for mre, type_from_index in self.mres:
            m = mre.match(stream, pos)
            if m:
                return m.group(0), type_from_index[m.lastindex]

    def lex(self, stream):
        return _Lex(self).lex(stream, self.newline_types, self.ignore_types)




class ContextualLexer(Lexer):

    def __init__(self, terminals, states, ignore=(), always_accept=(), user_callbacks={}, g_regex_flags=0):
        tokens_by_name = {}
        for t in terminals:
            assert t.name not in tokens_by_name, t
            tokens_by_name[t.name] = t

        lexer_by_tokens = {}
        self.lexers = {}
        for state, accepts in states.items():
            key = frozenset(accepts)
            try:
                lexer = lexer_by_tokens[key]
            except KeyError:
                accepts = set(accepts) | set(ignore) | set(always_accept)
                state_tokens = [tokens_by_name[n] for n in accepts if n and n in tokens_by_name]
                lexer = TraditionalLexer(state_tokens, ignore=ignore, user_callbacks=user_callbacks, g_regex_flags=g_regex_flags)
                lexer_by_tokens[key] = lexer

            self.lexers[state] = lexer

        self.root_lexer = TraditionalLexer(terminals, ignore=ignore, user_callbacks=user_callbacks, g_regex_flags=g_regex_flags)

    def lex(self, stream, get_parser_state, *, tbl):
        parser_state = get_parser_state()
        l = _Lex(self.lexers[parser_state], parser_state)
        try:
            for x in l.lex(stream, self.root_lexer.newline_types, self.root_lexer.ignore_types, tbl=tbl):
                yield x
                parser_state = get_parser_state()
                l.lexer = self.lexers[parser_state]
                l.state = parser_state # For debug only, no need to worry about multithreading
        except UnexpectedCharacters as e:
            # In the contextual lexer, UnexpectedCharacters can mean that the terminal is defined,
            # but not in the current context.
            # This tests the input against the global context, to provide a nicer error.
            root_match = self.root_lexer.match(stream, e.pos_in_stream)
            if not root_match:
                raise

            value, type_ = root_match
            t = Token(type_, value, e.pos_in_stream, e.line, e.column, tbl=tbl)
            raise UnexpectedToken(t, e.allowed, state=e.state)



class LexerConf(Serialize):
    __serialize_fields__ = 'tokens', 'ignore', 'g_regex_flags'
    __serialize_namespace__ = TerminalDef,

    def __init__(self, tokens, ignore=(), postlex=None, callbacks=None, g_regex_flags=0):
        self.tokens = tokens
        self.ignore = ignore
        self.postlex = postlex
        self.callbacks = callbacks or {}
        self.g_regex_flags = g_regex_flags

    def _deserialize(self):
        self.callbacks = {} # TODO


from functools import partial, wraps
from itertools import repeat, product


class ExpandSingleChild:
    def __init__(self, node_builder):
        self.node_builder = node_builder

    def __call__(self, children):
        if len(children) == 1:
            return children[0]
        else:
            return self.node_builder(children)

class PropagatePositions:
    def __init__(self, node_builder):
        self.node_builder = node_builder

    def __call__(self, children):
        res = self.node_builder(children)

        # local reference to Tree.meta reduces number of presence checks
        if isinstance(res, Tree):
            res_meta = res.meta
            for c in children:
                if isinstance(c, Tree):
                    child_meta = c.meta
                    if not child_meta.empty:
                        res_meta.line = child_meta.line
                        res_meta.column = child_meta.column
                        res_meta.start_pos = child_meta.start_pos
                        res_meta.empty = False
                        break
                elif isinstance(c, Token):
                    res_meta.line = c.line
                    res_meta.column = c.column
                    res_meta.start_pos = c.pos_in_stream
                    res_meta.empty = False
                    break

            for c in reversed(children):
                if isinstance(c, Tree):
                    child_meta = c.meta
                    if not child_meta.empty:
                        res_meta.end_line = child_meta.end_line
                        res_meta.end_column = child_meta.end_column
                        res_meta.end_pos = child_meta.end_pos
                        res_meta.empty = False
                        break
                elif isinstance(c, Token):
                    res_meta.end_line = c.end_line
                    res_meta.end_column = c.end_column
                    res_meta.end_pos = c.end_pos
                    res_meta.empty = False
                    break

        return res


class ChildFilter:
    def __init__(self, to_include, append_none, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include
        self.append_none = append_none

    def __call__(self, children):
        filtered = []

        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                filtered += children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)

class ChildFilterLALR(ChildFilter):
    "Optimized childfilter for LALR (assumes no duplication in parse tree, so it's safe to change it)"

    def __call__(self, children):
        filtered = []
        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   # Optimize for left-recursion
                    filtered = children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)

class ChildFilterLALR_NoPlaceholders(ChildFilter):
    "Optimized childfilter for LALR (assumes no duplication in parse tree, so it's safe to change it)"
    def __init__(self, to_include, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include

    def __call__(self, children):
        filtered = []
        for i, to_expand in self.to_include:
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   # Optimize for left-recursion
                    filtered = children[i].children
            else:
                filtered.append(children[i])
        return self.node_builder(filtered)

def _should_expand(sym):
    return not sym.is_term and sym.name.startswith('_')

def maybe_create_child_filter(expansion, keep_all_tokens, ambiguous, _empty_indices):
    # Prepare empty_indices as: How many Nones to insert at each index?
    if _empty_indices:
        assert _empty_indices.count(False) == len(expansion)
        s = ''.join(str(int(b)) for b in _empty_indices)
        empty_indices = [len(ones) for ones in s.split('0')]
        assert len(empty_indices) == len(expansion)+1, (empty_indices, len(expansion))
    else:
        empty_indices = [0] * (len(expansion)+1)

    to_include = []
    nones_to_add = 0
    for i, sym in enumerate(expansion):
        nones_to_add += empty_indices[i]
        if keep_all_tokens or not (sym.is_term and sym.filter_out):
            to_include.append((i, _should_expand(sym), nones_to_add))
            nones_to_add = 0

    nones_to_add += empty_indices[len(expansion)]

    if _empty_indices or len(to_include) < len(expansion) or any(to_expand for i, to_expand,_ in to_include):
        if _empty_indices or ambiguous:
            return partial(ChildFilter if ambiguous else ChildFilterLALR, to_include, nones_to_add)
        else:
            # LALR without placeholders
            return partial(ChildFilterLALR_NoPlaceholders, [(i, x) for i,x,_ in to_include])

class AmbiguousExpander:
    """Deal with the case where we're expanding children ('_rule') into a parent but the children
       are ambiguous. i.e. (parent->_ambig->_expand_this_rule). In this case, make the parent itself
       ambiguous with as many copies as their are ambiguous children, and then copy the ambiguous children
       into the right parents in the right places, essentially shifting the ambiguiuty up the tree."""
    def __init__(self, to_expand, tree_class, node_builder):
        self.node_builder = node_builder
        self.tree_class = tree_class
        self.to_expand = to_expand

    def __call__(self, children):
        def _is_ambig_tree(child):
            return hasattr(child, 'data') and child.data == '_ambig'

        #### When we're repeatedly expanding ambiguities we can end up with nested ambiguities.
        #    All children of an _ambig node should be a derivation of that ambig node, hence
        #    it is safe to assume that if we see an _ambig node nested within an ambig node
        #    it is safe to simply expand it into the parent _ambig node as an alternative derivation.
        ambiguous = []
        for i, child in enumerate(children):
            if _is_ambig_tree(child):
                if i in self.to_expand:
                    ambiguous.append(i)

                to_expand = [j for j, grandchild in enumerate(child.children) if _is_ambig_tree(grandchild)]
                child.expand_kids_by_index(*to_expand)

        if not ambiguous:
            return self.node_builder(children)

        expand = [ iter(child.children) if i in ambiguous else repeat(child) for i, child in enumerate(children) ]
        return self.tree_class('_ambig', [self.node_builder(list(f[0])) for f in product(zip(*expand))])

def maybe_create_ambiguous_expander(tree_class, expansion, keep_all_tokens):
    to_expand = [i for i, sym in enumerate(expansion)
                 if keep_all_tokens or ((not (sym.is_term and sym.filter_out)) and _should_expand(sym))]
    if to_expand:
        return partial(AmbiguousExpander, to_expand, tree_class)

def ptb_inline_args(func):
    @wraps(func)
    def f(children):
        return func(*children)
    return f

def inplace_transformer(func):
    @wraps(func)
    def f(children):
        # function name in a Transformer is a rule name.
        tree = Tree(func.__name__, children)
        return func(tree)
    return f

def apply_visit_wrapper(func, name, wrapper):
    if wrapper is _vargs_meta or wrapper is _vargs_meta_inline:
        raise NotImplementedError("Meta args not supported for internal transformer")
    @wraps(func)
    def f(children):
        return wrapper(func, name, children, None)
    return f


class ParseTreeBuilder:
    def __init__(self, rules, tree_class, propagate_positions=False, keep_all_tokens=False, ambiguous=False, maybe_placeholders=False):
        self.tree_class = tree_class
        self.propagate_positions = propagate_positions
        self.always_keep_all_tokens = keep_all_tokens
        self.ambiguous = ambiguous
        self.maybe_placeholders = maybe_placeholders

        self.rule_builders = list(self._init_builders(rules))

    def _init_builders(self, rules):
        for rule in rules:
            options = rule.options
            keep_all_tokens = self.always_keep_all_tokens or options.keep_all_tokens
            expand_single_child = options.expand1

            wrapper_chain = list(filter(None, [
                (expand_single_child and not rule.alias) and ExpandSingleChild,
                maybe_create_child_filter(rule.expansion, keep_all_tokens, self.ambiguous, options.empty_indices if self.maybe_placeholders else None),
                self.propagate_positions and PropagatePositions,
                self.ambiguous and maybe_create_ambiguous_expander(self.tree_class, rule.expansion, keep_all_tokens),
            ]))

            yield rule, wrapper_chain


    def create_callback(self, transformer=None):
        callbacks = {}

        for rule, wrapper_chain in self.rule_builders:

            user_callback_name = rule.alias or rule.options.template_source or rule.origin.name
            try:
                f = getattr(transformer, user_callback_name)
                # XXX InlineTransformer is deprecated!
                wrapper = getattr(f, 'visit_wrapper', None)
                if wrapper is not None:
                    f = apply_visit_wrapper(f, user_callback_name, wrapper)
                else:
                    if isinstance(transformer, InlineTransformer):
                        f = ptb_inline_args(f)
                    elif isinstance(transformer, Transformer_InPlace):
                        f = inplace_transformer(f)
            except AttributeError:
                f = partial(self.tree_class, user_callback_name)

            for w in wrapper_chain:
                f = w(f)

            if rule in callbacks:
                raise GrammarError("Rule '%s' already exists" % (rule,))

            callbacks[rule] = f

        return callbacks


class LALR_Parser(object):
    def __init__(self, parser_conf, debug=False):
        assert all(r.options.priority is None for r in parser_conf.rules), "LALR doesn't yet support prioritization"
        analysis = LALR_Analyzer(parser_conf, debug=debug)
        analysis.compute_lalr()
        callbacks = parser_conf.callbacks

        self._parse_table = analysis.parse_table
        self.parser_conf = parser_conf
        self.parser = _Parser(analysis.parse_table, callbacks, debug)

    @classmethod
    def deserialize(cls, data, memo, callbacks, *, tbl):
        inst = cls.__new__(cls)
        inst._parse_table = IntParseTable.deserialize(data, memo)
        inst.parser = _Parser(inst._parse_table, callbacks, tbl=tbl)
        return inst

    def serialize(self, memo):
        return self._parse_table.serialize(memo)

    def parse(self, *args):
        return self.parser.parse(*args)


class _Parser:
    def __init__(self, parse_table, callbacks, debug=False, *, tbl):
        self.states = parse_table.states
        self.start_states = parse_table.start_states
        self.end_states = parse_table.end_states
        self.callbacks = callbacks
        self.debug = debug
        self._tbl = tbl

    def parse(self, seq, start, set_state=None):
        token = None
        stream = iter(seq)
        states = self.states

        start_state = self.start_states[start]
        end_state = self.end_states[start]

        state_stack = [start_state]
        value_stack = []

        if set_state: set_state(start_state)

        def get_action(token):
            state = state_stack[-1]
            try:
                return states[state][token.type]
            except KeyError:
                expected = [s for s in states[state].keys() if s.isupper()]
                raise UnexpectedToken(token, expected, state=state)

        def reduce(rule):
            size = len(rule.expansion)
            if size:
                s = value_stack[-size:]
                del state_stack[-size:]
                del value_stack[-size:]
            else:
                s = []

            value = self.callbacks[rule](s)

            _action, new_state = states[state_stack[-1]][rule.origin.name]
            assert _action is Shift
            state_stack.append(new_state)
            value_stack.append(value)

        # Main LALR-parser loop
        try:
            for token in stream:
                while True:
                    action, arg = get_action(token)
                    assert arg != end_state

                    if action is Shift:
                        state_stack.append(arg)
                        value_stack.append(token)
                        if set_state: set_state(arg)
                        break # next token
                    else:
                        reduce(arg)
        except Exception as e:
            if self.debug:
                print("")
                print("STATE STACK DUMP")
                print("----------------")
                for i, s in enumerate(state_stack):
                    print('%d)' % i , s)
                print("")

            raise

        token = Token.new_borrow_pos('$END', '', token, tbl=self._tbl) if token else Token('$END', '', 0, 1, 1, tbl=self._tbl)
        while True:
            _action, arg = get_action(token)
            assert(_action is Reduce)
            reduce(arg)
            if state_stack[-1] == end_state:
                return value_stack[-1]



class Action:
    def __init__(self, name):
        self.name = name
    def __str__(self):
        return self.name
    def __repr__(self):
        return str(self)

Shift = Action('Shift')
Reduce = Action('Reduce')


class ParseTable:
    def __init__(self, states, start_states, end_states):
        self.states = states
        self.start_states = start_states
        self.end_states = end_states

    def serialize(self, memo):
        tokens = Enumerator()
        rules = Enumerator()

        states = {
            state: {tokens.get(token): ((1, arg.serialize(memo)) if action is Reduce else (0, arg))
                    for token, (action, arg) in actions.items()}
            for state, actions in self.states.items()
        }

        return {
            'tokens': tokens.reversed(),
            'states': states,
            'start_states': self.start_states,
            'end_states': self.end_states,
        }

    @classmethod
    def deserialize(cls, data, memo):
        tokens = data['tokens']
        states = {
            state: {tokens[token]: ((Reduce, Rule.deserialize(arg, memo)) if action==1 else (Shift, arg))
                    for token, (action, arg) in actions.items()}
            for state, actions in data['states'].items()
        }
        return cls(states, data['start_states'], data['end_states'])


class IntParseTable(ParseTable):

    @classmethod
    def from_ParseTable(cls, parse_table):
        enum = list(parse_table.states)
        state_to_idx = {s:i for i,s in enumerate(enum)}
        int_states = {}

        for s, la in parse_table.states.items():
            la = {k:(v[0], state_to_idx[v[1]]) if v[0] is Shift else v
                  for k,v in la.items()}
            int_states[ state_to_idx[s] ] = la


        start_states = {start:state_to_idx[s] for start, s in parse_table.start_states.items()}
        end_states = {start:state_to_idx[s] for start, s in parse_table.end_states.items()}
        return cls(int_states, start_states, end_states)



def get_frontend(parser, lexer):
    if parser=='lalr':
        if lexer is None:
            raise ValueError('The LALR parser requires use of a lexer')
        elif lexer == 'standard':
            return LALR_TraditionalLexer
        elif lexer == 'contextual':
            return LALR_ContextualLexer
        elif issubclass(lexer, Lexer):
            return partial(LALR_CustomLexer, lexer)
        else:
            raise ValueError('Unknown lexer: %s' % lexer)
    elif parser=='earley':
        if lexer=='standard':
            return Earley
        elif lexer=='dynamic':
            return XEarley
        elif lexer=='dynamic_complete':
            return XEarley_CompleteLex
        elif lexer=='contextual':
            raise ValueError('The Earley parser does not support the contextual parser')
        else:
            raise ValueError('Unknown lexer: %s' % lexer)
    elif parser == 'cyk':
        if lexer == 'standard':
            return CYK
        else:
            raise ValueError('CYK parser requires using standard parser.')
    else:
        raise ValueError('Unknown parser: %s' % parser)


class _ParserFrontend(Serialize):
    def _parse(self, input, start, *args):
        if start is None:
            start = self.start
            if len(start) > 1:
                raise ValueError("Lark initialized with more than 1 possible start rule. Must specify which start rule to parse", start)
            start ,= start
        return self.parser.parse(input, start, *args)


class WithLexer(_ParserFrontend):
    lexer = None
    parser = None
    lexer_conf = None
    start = None

    __serialize_fields__ = 'parser', 'lexer_conf', 'start'
    __serialize_namespace__ = LexerConf,

    def __init__(self, lexer_conf, parser_conf, options=None):
        self.lexer_conf = lexer_conf
        self.start = parser_conf.start
        self.postlex = lexer_conf.postlex

    @classmethod
    def deserialize(cls, data, memo, callbacks, postlex, *, tbl):
        inst = super(WithLexer, cls).deserialize(data, memo)
        inst.postlex = postlex
        inst.parser = LALR_Parser.deserialize(inst.parser, memo, callbacks, tbl=tbl)
        inst.init_lexer()
        return inst

    def _serialize(self, data, memo):
        data['parser'] = data['parser'].serialize(memo)

    def lex(self, *args, tbl):
        stream = self.lexer.lex(*args, tbl=tbl)
        return self.postlex.process(stream) if self.postlex else stream

    def parse(self, text, start=None):
        token_stream = self.lex(text)
        return self._parse(token_stream, start)

    def init_traditional_lexer(self):
        self.lexer = TraditionalLexer(self.lexer_conf.tokens, ignore=self.lexer_conf.ignore, user_callbacks=self.lexer_conf.callbacks, g_regex_flags=self.lexer_conf.g_regex_flags)

class LALR_WithLexer(WithLexer):
    def __init__(self, lexer_conf, parser_conf, options=None):
        debug = options.debug if options else False
        self.parser = LALR_Parser(parser_conf, debug=debug)
        WithLexer.__init__(self, lexer_conf, parser_conf, options)

        self.init_lexer()

    def init_lexer(self):
        raise NotImplementedError()

class LALR_TraditionalLexer(LALR_WithLexer):
    def init_lexer(self):
        self.init_traditional_lexer()

class LALR_ContextualLexer(LALR_WithLexer):
    def init_lexer(self):
        states = {idx:list(t.keys()) for idx, t in self.parser._parse_table.states.items()}
        always_accept = self.postlex.always_accept if self.postlex else ()
        self.lexer = ContextualLexer(self.lexer_conf.tokens, states,
                                     ignore=self.lexer_conf.ignore,
                                     always_accept=always_accept,
                                     user_callbacks=self.lexer_conf.callbacks,
                                     g_regex_flags=self.lexer_conf.g_regex_flags)


    def parse(self, text, start=None, *, tbl):
        parser_state = [None]
        def set_parser_state(s):
            parser_state[0] = s

        token_stream = self.lex(text, lambda: parser_state[0], tbl=tbl)
        return self._parse(token_stream, start, set_parser_state)


class LarkOptions(Serialize):
    """Specifies the options for Lark

    """
    OPTIONS_DOC = """
# General

    start - The start symbol. Either a string, or a list of strings for
            multiple possible starts (Default: "start")
    debug - Display debug information, such as warnings (default: False)
    transformer - Applies the transformer to every parse tree (equivlent to
                  applying it after the parse, but faster)
    propagate_positions - Propagates (line, column, end_line, end_column)
                          attributes into all tree branches.
    maybe_placeholders - When True, the `[]` operator returns `None` when not matched.
                         When `False`,  `[]` behaves like the `?` operator,
                             and returns no value at all.
                         (default=`False`. Recommended to set to `True`)
    cache - Cache the results of the Lark grammar analysis, for x2 to x3 faster loading.
            LALR only for now.
        When `False`, does nothing (default)
        When `True`, caches to a temporary file in the local directory
        When given a string, caches to the path pointed by the string

    g_regex_flags - Flags that are applied to all terminals
                    (both regex and strings)
    keep_all_tokens - Prevent the tree builder from automagically
                      removing "punctuation" tokens (default: False)

# Algorithm

    parser - Decides which parser engine to use
             Accepts "earley" or "lalr". (Default: "earley")
             (there is also a "cyk" option for legacy)

    lexer - Decides whether or not to use a lexer stage
        "auto" (default): Choose for me based on the parser
        "standard": Use a standard lexer
        "contextual": Stronger lexer (only works with parser="lalr")
        "dynamic": Flexible and powerful (only with parser="earley")
        "dynamic_complete": Same as dynamic, but tries *every* variation
                            of tokenizing possible.

    ambiguity - Decides how to handle ambiguity in the parse.
                Only relevant if parser="earley"
        "resolve": The parser will automatically choose the simplest
                    derivation (it chooses consistently: greedy for
                    tokens, non-greedy for rules)
        "explicit": The parser will return all derivations wrapped
                    in "_ambig" tree nodes (i.e. a forest).

# Domain Specific

    postlex - Lexer post-processing (Default: None) Only works with the
                standard and contextual lexers.
    priority - How priorities should be evaluated - auto, none, normal,
                invert (Default: auto)
    lexer_callbacks - Dictionary of callbacks for the lexer. May alter
                        tokens during lexing. Use with caution.
    edit_terminals - A callback
    """
    if __doc__:
        __doc__ += OPTIONS_DOC

    _defaults = {
        'debug': False,
        'keep_all_tokens': False,
        'tree_class': None,
        'cache': False,
        'postlex': None,
        'parser': 'earley',
        'lexer': 'auto',
        'transformer': None,
        'start': 'start',
        'priority': 'auto',
        'ambiguity': 'auto',
        'propagate_positions': False,
        'lexer_callbacks': {},
        'maybe_placeholders': False,
        'edit_terminals': None,
        'g_regex_flags': 0,
    }

    def __init__(self, options_dict):
        o = dict(options_dict)

        options = {}
        for name, default in self._defaults.items():
            if name in o:
                value = o.pop(name)
                if isinstance(default, bool) and name != 'cache':
                    value = bool(value)
            else:
                value = default

            options[name] = value

        if isinstance(options['start'], STRING_TYPE):
            options['start'] = [options['start']]

        self.__dict__['options'] = options

        assert self.parser in ('earley', 'lalr', 'cyk', None)

        if self.parser == 'earley' and self.transformer:
            raise ValueError('Cannot specify an embedded transformer when using the Earley algorithm.'
                             'Please use your transformer on the resulting parse tree, or use a different algorithm (i.e. LALR)')

        if o:
            raise ValueError("Unknown options: %s" % o.keys())

    def __getattr__(self, name):
        try:
            return self.options[name]
        except KeyError as e:
            raise AttributeError(e)

    def __setattr__(self, name, value):
        assert name in self.options
        self.options[name] = value

    def serialize(self, memo):
        return self.options

    @classmethod
    def deserialize(cls, data, memo):
        return cls(data)


class Lark(Serialize):
    def __init__(self, grammar, **options):
        """
            grammar : a string or file-object containing the grammar spec (using Lark's ebnf syntax)
            options : a dictionary controlling various aspects of Lark.
        """

        self.options = LarkOptions(options)

        # Some, but not all file-like objects have a 'name' attribute
        try:
            self.source = grammar.name
        except AttributeError:
            self.source = '<string>'

        # Drain file-like objects to get their contents
        try:
            read = grammar.read
        except AttributeError:
            pass
        else:
            grammar = read()

        assert isinstance(grammar, STRING_TYPE)

        cache_fn = None
        if self.options.cache:
            if self.options.parser != 'lalr':
                raise NotImplementedError("cache only works with parser='lalr' for now")
            if isinstance(self.options.cache, STRING_TYPE):
                cache_fn = self.options.cache
            else:
                if self.options.cache is not True:
                    raise ValueError("cache must be bool or str")
                unhashable = ('transformer', 'postlex', 'lexer_callbacks', 'edit_terminals')
                options_str = ''.join(k+str(v) for k, v in options.items() if k not in unhashable)
                s = grammar + options_str
                md5 = hashlib.md5(s.encode()).hexdigest()
                cache_fn = '.lark_cache_%s.tmp' % md5

            if FS.exists(cache_fn):
                logging.debug('Loading grammar from cache: %s', cache_fn)
                with FS.open(cache_fn, 'rb') as f:
                    self._load(f, self.options.transformer, self.options.postlex)
                return

        if self.options.lexer == 'auto':
            if self.options.parser == 'lalr':
                self.options.lexer = 'contextual'
            elif self.options.parser == 'earley':
                self.options.lexer = 'dynamic'
            elif self.options.parser == 'cyk':
                self.options.lexer = 'standard'
            else:
                assert False, self.options.parser
        lexer = self.options.lexer
        assert lexer in ('standard', 'contextual', 'dynamic', 'dynamic_complete') or issubclass(lexer, Lexer)

        if self.options.ambiguity == 'auto':
            if self.options.parser == 'earley':
                self.options.ambiguity = 'resolve'
        else:
            disambig_parsers = ['earley', 'cyk']
            assert self.options.parser in disambig_parsers, (
                'Only %s supports disambiguation right now') % ', '.join(disambig_parsers)

        if self.options.priority == 'auto':
            if self.options.parser in ('earley', 'cyk', ):
                self.options.priority = 'normal'
            elif self.options.parser in ('lalr', ):
                self.options.priority = None
        elif self.options.priority in ('invert', 'normal'):
            assert self.options.parser in ('earley', 'cyk'), "priorities are not supported for LALR at this time"

        assert self.options.priority in ('auto', None, 'normal', 'invert'), 'invalid priority option specified: {}. options are auto, none, normal, invert.'.format(self.options.priority)
        assert self.options.ambiguity not in ('resolve__antiscore_sum', ), 'resolve__antiscore_sum has been replaced with the option priority="invert"'
        assert self.options.ambiguity in ('resolve', 'explicit', 'auto', )

        # Parse the grammar file and compose the grammars (TODO)
        self.grammar = load_grammar(grammar, self.source)

        # Compile the EBNF grammar into BNF
        self.terminals, self.rules, self.ignore_tokens = self.grammar.compile(self.options.start)

        if self.options.edit_terminals:
            for t in self.terminals:
                self.options.edit_terminals(t)

        self._terminals_dict = {t.name:t for t in self.terminals}

        # If the user asked to invert the priorities, negate them all here.
        # This replaces the old 'resolve__antiscore_sum' option.
        if self.options.priority == 'invert':
            for rule in self.rules:
                if rule.options.priority is not None:
                    rule.options.priority = -rule.options.priority
        # Else, if the user asked to disable priorities, strip them from the
        # rules. This allows the Earley parsers to skip an extra forest walk
        # for improved performance, if you don't need them (or didn't specify any).
        elif self.options.priority == None:
            for rule in self.rules:
                if rule.options.priority is not None:
                    rule.options.priority = None

        # TODO Deprecate lexer_callbacks?
        lexer_callbacks = dict(self.options.lexer_callbacks)
        if self.options.transformer:
            t = self.options.transformer
            for term in self.terminals:
                if hasattr(t, term.name):
                    lexer_callbacks[term.name] = getattr(t, term.name)

        self.lexer_conf = LexerConf(self.terminals, self.ignore_tokens, self.options.postlex, lexer_callbacks, self.options.g_regex_flags)

        if self.options.parser:
            self.parser = self._build_parser()
        elif lexer:
            self.lexer = self._build_lexer()

        if cache_fn:
            logging.debug('Saving grammar to cache: %s', cache_fn)
            with FS.open(cache_fn, 'wb') as f:
                self.save(f)

    if __init__.__doc__:
        __init__.__doc__ += "\nOptions:\n" + LarkOptions.OPTIONS_DOC

    __serialize_fields__ = 'parser', 'rules', 'options'

    def _build_lexer(self):
        return TraditionalLexer(self.lexer_conf.tokens, ignore=self.lexer_conf.ignore, user_callbacks=self.lexer_conf.callbacks, g_regex_flags=self.lexer_conf.g_regex_flags)

    def _prepare_callbacks(self):
        self.parser_class = get_frontend(self.options.parser, self.options.lexer)
        self._parse_tree_builder = ParseTreeBuilder(self.rules, self.options.tree_class or Tree, self.options.propagate_positions, self.options.keep_all_tokens, self.options.parser!='lalr' and self.options.ambiguity=='explicit', self.options.maybe_placeholders)
        self._callbacks = self._parse_tree_builder.create_callback(self.options.transformer)

    def _build_parser(self):
        self._prepare_callbacks()
        parser_conf = ParserConf(self.rules, self._callbacks, self.options.start)
        return self.parser_class(self.lexer_conf, parser_conf, options=self.options)

    def save(self, f):
        data, m = self.memo_serialize([TerminalDef, Rule])
        pickle.dump({'data': data, 'memo': m}, f)

    @classmethod
    def load(cls, f):
        inst = cls.__new__(cls)
        return inst._load(f)

    def _load(self, f, transformer=None, postlex=None, *, tbl):
        if isinstance(f, dict):
            d = f
        else:
            d = pickle.load(f)
        memo = d['memo']
        data = d['data']

        assert memo
        memo = SerializeMemoizer.deserialize(memo, {'Rule': Rule, 'TerminalDef': TerminalDef}, {})
        options = dict(data['options'])
        if transformer is not None:
            options['transformer'] = transformer
        if postlex is not None:
            options['postlex'] = postlex
        self.options = LarkOptions.deserialize(options, memo)
        self.rules = [Rule.deserialize(r, memo) for r in data['rules']]
        self.source = '<deserialized>'
        self._prepare_callbacks()
        self.parser = self.parser_class.deserialize(data['parser'], memo, self._callbacks, self.options.postlex, tbl=tbl)
        self._tbl = tbl
        return self

    @classmethod
    def _load_from_dict(cls, data, memo, transformer=None, postlex=None, *, tbl):
        inst = cls.__new__(cls)
        return inst._load({'data': data, 'memo': memo}, transformer, postlex, tbl=tbl)

    @classmethod
    def open(cls, grammar_filename, rel_to=None, **options):
        """Create an instance of Lark with the grammar given by its filename

        If rel_to is provided, the function will find the grammar filename in relation to it.

        Example:

            >>> Lark.open("grammar_file.lark", rel_to=__file__, parser="lalr")
            Lark(...)

        """
        if rel_to:
            basepath = os.path.dirname(rel_to)
            grammar_filename = os.path.join(basepath, grammar_filename)
        with open(grammar_filename, encoding='utf8') as f:
            return cls(f, **options)

    def __repr__(self):
        return 'Lark(open(%r), parser=%r, lexer=%r, ...)' % (self.source, self.options.parser, self.options.lexer)


    def lex(self, text):
        "Only lex (and postlex) the text, without parsing it. Only relevant when lexer='standard'"
        if not hasattr(self, 'lexer'):
            self.lexer = self._build_lexer()
        stream = self.lexer.lex(text)
        if self.options.postlex:
            return self.options.postlex.process(stream)
        return stream

    def get_terminal(self, name):
        "Get information about a terminal"
        return self._terminals_dict[name]

    def parse(self, text, start=None):
        """Parse the given text, according to the options provided.

        The 'start' parameter is required if Lark was given multiple possible start symbols (using the start option).

        Returns a tree, unless specified otherwise.
        """
        return self.parser.parse(text, start=start, tbl=self._tbl)

DATA = (
{'parser': {'parser': {'tokens': {0: '_LROT', 1: 'STATE', 2: 'DOLLAR', 3: 'BANG', 4: '_SUBT', 5: '$END', 6: '__ANON_4', 7: '__ANON_5', 8: '_NEGATE_ALL', 9: '_MULT', 10: '_WS', 11: '_NEGATE_LIVE', 12: 'NAME', 13: '_VAR_OPEN', 14: 'LBRACE', 15: '_NL', 16: '_RROT', 17: 'LSQB', 18: 'COMMA', 19: '_VAR_CLOSE', 20: 'math', 21: '_ref_expr_no_int', 22: 'range', 23: 'reference', 24: 'ref_operation', 25: 'ref_var', 26: '_HENSEL_CLOSE', 27: 'SEMICOLON', 28: 'RSQB', 29: '_HENSEL_SEP', 30: '_NORMAL_ARROW', 31: '_HOIST_ARROW', 32: '_PERMUTE', 33: 'PLUS', 34: '__ANON_3', 35: '_expr_no_int', 36: 'var', 37: 'operation', 38: 'EQUAL', 39: 'INT', 40: '_tr_expr_no_rec', 41: 'tr_var', 42: '_subt', 43: '__ANON_0', 44: '_expr', 45: '__var_star_4', 46: '__ANON_2', 47: 'COLON', 48: 'leave_alone_mult', 49: 'LEAVE_ALONE', 50: 'aux_var', 51: '_aux_expr_no_rec', 52: 'COMPASS_DIR', 53: '_aux_expr_no_int', 54: 'aux_operation', 55: 'aux_reference', 56: '_expr_norec_int', 57: '_expr_no_rec', 58: '_math_expr', 59: '_ref_expr', 60: 'RPAR', 61: 'cdir_delay', 62: 'auxiliary', 63: 'EXTEND_LAST', 64: '_tr_expr_no_int', 65: '_rs_expr', 66: '_tr_expr', 67: 'inline_binding', 68: 'tr_operation', 69: 'RBRACE', 70: 'LPAR', 71: '_aux_group', 72: '_ref_expr_no_rec', 73: '___aux_group_star_3', 74: '_tr_expr_norec_int', 75: 'end_bs', 76: 'symmetried_aux', 77: 'SYMMETRY_NAME', 78: 'rulestring_tr', 79: 'comment', 80: 'transition', 81: 'line', 82: '_aux_expr_norec_int', 83: '__ANON_1', 84: '__table_plus_0', 85: 'table', 86: '_sep', 87: '_HENSEL_OPEN', 88: 'SLASH', 89: 'STAR', 90: '__aux_var_star_7', 91: '_aux_expr', 92: '__ref_var_star_6', 93: '_ref_expr_norec_int', 94: 'normal_aux', 95: '_aux', 96: 'hoist_aux', 97: '__transition_plus_1', 98: 'math_operation', 99: '__tr_var_star_5', 100: '_auxlist', 101: 'prefix', 102: 'crange', 103: 'tr_state', 104: 'rulestring_napkin', 105: '___auxlist_star_2'}, 'states': {0: {0: (1, {'@': 44}), 1: (1, {'@': 44}), 2: (1, {'@': 44}), 3: (1, {'@': 44}), 4: (1, {'@': 44}), 5: (1, {'@': 44}), 6: (1, {'@': 44}), 7: (1, {'@': 44}), 8: (1, {'@': 44}), 9: (1, {'@': 44}), 10: (1, {'@': 44}), 11: (1, {'@': 44}), 12: (1, {'@': 44}), 13: (1, {'@': 44}), 14: (1, {'@': 44}), 15: (1, {'@': 44}), 16: (1, {'@': 44}), 17: (1, {'@': 44}), 18: (1, {'@': 44}), 19: (1, {'@': 44})}, 1: {1: (0, 4), 20: (0, 500), 13: (0, 51), 21: (0, 371), 11: (0, 115), 12: (0, 123), 22: (0, 126), 17: (0, 409), 23: (0, 131), 8: (0, 135), 24: (0, 142), 14: (0, 415), 25: (0, 147)}, 2: {19: (1, {'@': 45}), 18: (1, {'@': 45})}, 3: {0: (1, {'@': 46}), 26: (1, {'@': 46}), 4: (1, {'@': 46}), 9: (1, {'@': 46}), 16: (1, {'@': 46}), 11: (1, {'@': 46}), 27: (1, {'@': 46}), 18: (1, {'@': 46}), 19: (1, {'@': 46}), 28: (1, {'@': 46}), 29: (1, {'@': 46}), 1: (1, {'@': 46}), 5: (1, {'@': 46}), 3: (1, {'@': 46}), 2: (1, {'@': 46}), 6: (1, {'@': 46}), 7: (1, {'@': 46}), 8: (1, {'@': 46}), 10: (1, {'@': 46}), 30: (1, {'@': 46}), 31: (1, {'@': 46}), 12: (1, {'@': 46}), 13: (1, {'@': 46}), 14: (1, {'@': 46}), 32: (1, {'@': 46}), 15: (1, {'@': 46}), 17: (1, {'@': 46})}, 4: {10: (0, 41), 33: (0, 44), 34: (0, 49), 9: (0, 90)}, 5: {0: (1, {'@': 47}), 1: (1, {'@': 47}), 5: (1, {'@': 47}), 3: (1, {'@': 47}), 2: (1, {'@': 47}), 6: (1, {'@': 47}), 4: (1, {'@': 47}), 7: (1, {'@': 47}), 8: (1, {'@': 47}), 9: (1, {'@': 47}), 10: (1, {'@': 47}), 11: (1, {'@': 47}), 12: (1, {'@': 47}), 18: (1, {'@': 47}), 13: (1, {'@': 47}), 19: (1, {'@': 47}), 14: (1, {'@': 47}), 15: (1, {'@': 47}), 16: (1, {'@': 47}), 17: (1, {'@': 47})}, 6: {19: (0, 73), 18: (0, 140)}, 7: {19: (0, 116), 0: (1, {'@': 48}), 4: (1, {'@': 48}), 18: (1, {'@': 48}), 9: (1, {'@': 48}), 16: (1, {'@': 48}), 11: (1, {'@': 48})}, 8: {1: (0, 495), 20: (0, 500), 8: (0, 505), 12: (0, 513), 11: (0, 517), 22: (0, 524), 13: (0, 528), 35: (0, 542), 36: (0, 549), 37: (0, 553), 14: (0, 415)}, 9: {34: (0, 124)}, 10: {10: (0, 336), 34: (0, 391)}, 11: {0: (1, {'@': 49}), 1: (1, {'@': 49}), 5: (1, {'@': 49}), 3: (1, {'@': 49}), 2: (1, {'@': 49}), 6: (1, {'@': 49}), 4: (1, {'@': 49}), 7: (1, {'@': 49}), 8: (1, {'@': 49}), 9: (1, {'@': 49}), 10: (1, {'@': 49}), 30: (1, {'@': 49}), 11: (1, {'@': 49}), 31: (1, {'@': 49}), 12: (1, {'@': 49}), 26: (1, {'@': 49}), 18: (1, {'@': 49}), 27: (1, {'@': 49}), 13: (1, {'@': 49}), 19: (1, {'@': 49}), 29: (1, {'@': 49}), 14: (1, {'@': 49}), 32: (1, {'@': 49}), 15: (1, {'@': 49}), 28: (1, {'@': 49}), 16: (1, {'@': 49}), 17: (1, {'@': 49})}, 12: {1: (0, 435), 20: (0, 188), 14: (0, 415)}, 13: {0: (1, {'@': 50}), 9: (1, {'@': 50}), 4: (1, {'@': 50}), 28: (1, {'@': 50}), 16: (1, {'@': 50}), 11: (1, {'@': 50}), 1: (1, {'@': 50}), 2: (1, {'@': 50}), 3: (1, {'@': 50}), 5: (1, {'@': 50}), 6: (1, {'@': 50}), 7: (1, {'@': 50}), 8: (1, {'@': 50}), 10: (1, {'@': 50}), 12: (1, {'@': 50}), 13: (1, {'@': 50}), 14: (1, {'@': 50}), 15: (1, {'@': 50}), 17: (1, {'@': 50}), 30: (1, {'@': 50}), 31: (1, {'@': 50}), 26: (1, {'@': 50}), 18: (1, {'@': 50}), 27: (1, {'@': 50}), 19: (1, {'@': 50}), 29: (1, {'@': 50}), 32: (1, {'@': 50})}, 14: {38: (0, 204)}, 15: {10: (0, 41), 33: (0, 44), 34: (0, 49), 9: (0, 58)}, 16: {39: (0, 449)}, 17: {1: (0, 219), 20: (0, 500), 13: (0, 419), 40: (0, 588), 39: (0, 591), 41: (0, 597), 14: (0, 415), 22: (0, 602), 12: (0, 608)}, 18: {12: (1, {'@': 51}), 1: (1, {'@': 51}), 2: (1, {'@': 51}), 3: (1, {'@': 51}), 5: (1, {'@': 51}), 13: (1, {'@': 51}), 7: (1, {'@': 51}), 8: (1, {'@': 51}), 14: (1, {'@': 51}), 10: (1, {'@': 51}), 17: (1, {'@': 51}), 11: (1, {'@': 51})}, 19: {0: (1, {'@': 52}), 1: (1, {'@': 52}), 2: (1, {'@': 52}), 3: (1, {'@': 52}), 4: (1, {'@': 52}), 5: (1, {'@': 52}), 6: (1, {'@': 52}), 7: (1, {'@': 52}), 8: (1, {'@': 52}), 9: (1, {'@': 52}), 10: (1, {'@': 52}), 11: (1, {'@': 52}), 12: (1, {'@': 52}), 13: (1, {'@': 52}), 14: (1, {'@': 52}), 15: (1, {'@': 52}), 16: (1, {'@': 52}), 17: (1, {'@': 52}), 18: (1, {'@': 52}), 19: (1, {'@': 52})}, 20: {28: (0, 388), 11: (0, 82), 0: (0, 91), 4: (0, 97), 9: (0, 101), 42: (0, 107), 16: (0, 114)}, 21: {39: (0, 451)}, 22: {10: (0, 53), 43: (0, 514)}, 23: {12: (1, {'@': 53}), 1: (1, {'@': 53}), 2: (1, {'@': 53}), 3: (1, {'@': 53}), 5: (1, {'@': 53}), 13: (1, {'@': 53}), 7: (1, {'@': 53}), 8: (1, {'@': 53}), 14: (1, {'@': 53}), 10: (1, {'@': 53}), 17: (1, {'@': 53}), 11: (1, {'@': 53})}, 24: {19: (0, 428), 0: (1, {'@': 54}), 4: (1, {'@': 54}), 18: (1, {'@': 54}), 9: (1, {'@': 54}), 16: (1, {'@': 54}), 11: (1, {'@': 54})}, 25: {39: (0, 453)}, 26: {1: (0, 558), 20: (0, 563), 8: (0, 505), 12: (0, 513), 11: (0, 517), 22: (0, 524), 13: (0, 528), 35: (0, 569), 36: (0, 549), 37: (0, 553), 44: (0, 576), 14: (0, 415), 10: (0, 581)}, 27: {15: (0, 474), 12: (1, {'@': 55}), 1: (1, {'@': 55}), 2: (1, {'@': 55}), 3: (1, {'@': 55}), 5: (1, {'@': 55}), 13: (1, {'@': 55}), 7: (1, {'@': 55}), 8: (1, {'@': 55}), 14: (1, {'@': 55}), 10: (1, {'@': 55}), 17: (1, {'@': 55}), 11: (1, {'@': 55})}, 28: {45: (0, 430), 18: (0, 433), 19: (0, 437)}, 29: {46: (0, 36)}, 30: {12: (1, {'@': 56}), 1: (1, {'@': 56}), 2: (1, {'@': 56}), 3: (1, {'@': 56}), 5: (1, {'@': 56}), 6: (1, {'@': 56}), 13: (1, {'@': 56}), 7: (1, {'@': 56}), 8: (1, {'@': 56}), 14: (1, {'@': 56}), 15: (1, {'@': 56}), 10: (1, {'@': 56}), 17: (1, {'@': 56}), 11: (1, {'@': 56})}, 31: {12: (1, {'@': 57}), 1: (1, {'@': 57}), 2: (1, {'@': 57}), 3: (1, {'@': 57}), 5: (1, {'@': 57}), 13: (1, {'@': 57}), 7: (1, {'@': 57}), 8: (1, {'@': 57}), 14: (1, {'@': 57}), 10: (1, {'@': 57}), 17: (1, {'@': 57}), 11: (1, {'@': 57})}, 32: {28: (0, 380), 47: (0, 461)}, 33: {17: (0, 409), 1: (0, 395), 23: (0, 398)}, 34: {17: (0, 269), 1: (0, 275)}, 35: {12: (1, {'@': 58}), 1: (1, {'@': 58}), 2: (1, {'@': 58}), 3: (1, {'@': 58}), 5: (1, {'@': 58}), 13: (1, {'@': 58}), 7: (1, {'@': 58}), 8: (1, {'@': 58}), 14: (1, {'@': 58}), 10: (1, {'@': 58}), 17: (1, {'@': 58}), 11: (1, {'@': 58})}, 36: {27: (1, {'@': 59}), 18: (1, {'@': 59})}, 37: {39: (0, 465), 1: (0, 219), 20: (0, 500), 13: (0, 283), 48: (0, 596), 22: (0, 324), 12: (0, 327), 49: (0, 329), 14: (0, 415), 50: (0, 341), 51: (0, 466)}, 38: {39: (0, 438)}, 39: {1: (0, 253), 20: (0, 500), 52: (0, 278), 39: (0, 281), 13: (0, 283), 53: (0, 296), 17: (0, 300), 48: (0, 302), 54: (0, 306), 22: (0, 310), 50: (0, 312), 49: (0, 315), 55: (0, 317), 14: (0, 415), 8: (0, 320), 12: (0, 325), 11: (0, 328)}, 40: {0: (1, {'@': 60}), 9: (1, {'@': 60}), 4: (1, {'@': 60}), 28: (1, {'@': 60}), 16: (1, {'@': 60}), 11: (1, {'@': 60}), 1: (1, {'@': 60}), 2: (1, {'@': 60}), 3: (1, {'@': 60}), 5: (1, {'@': 60}), 6: (1, {'@': 60}), 7: (1, {'@': 60}), 8: (1, {'@': 60}), 10: (1, {'@': 60}), 12: (1, {'@': 60}), 13: (1, {'@': 60}), 14: (1, {'@': 60}), 15: (1, {'@': 60}), 17: (1, {'@': 60}), 30: (1, {'@': 60}), 31: (1, {'@': 60}), 26: (1, {'@': 60}), 18: (1, {'@': 60}), 27: (1, {'@': 60}), 19: (1, {'@': 60}), 29: (1, {'@': 60}), 32: (1, {'@': 60})}, 41: {33: (0, 613), 34: (0, 617)}, 42: {32: (0, 29), 1: (1, {'@': 61}), 2: (1, {'@': 61}), 3: (1, {'@': 61}), 5: (1, {'@': 61}), 6: (1, {'@': 61}), 7: (1, {'@': 61}), 8: (1, {'@': 61}), 10: (1, {'@': 61}), 30: (1, {'@': 61}), 11: (1, {'@': 61}), 31: (1, {'@': 61}), 12: (1, {'@': 61}), 13: (1, {'@': 61}), 14: (1, {'@': 61}), 15: (1, {'@': 61}), 17: (1, {'@': 61}), 27: (1, {'@': 62}), 18: (1, {'@': 62})}, 43: {1: (0, 440), 20: (0, 442), 22: (0, 5), 13: (0, 528), 12: (0, 425), 56: (0, 444), 36: (0, 427), 57: (0, 446), 14: (0, 415)}, 44: {39: (0, 566), 10: (0, 626)}, 45: {52: (0, 379)}, 46: {14: (0, 415), 20: (0, 396), 10: (0, 401)}, 47: {0: (1, {'@': 63}), 9: (1, {'@': 63}), 4: (1, {'@': 63}), 28: (1, {'@': 63}), 16: (1, {'@': 63}), 11: (1, {'@': 63}), 18: (1, {'@': 63}), 19: (1, {'@': 63})}, 48: {14: (0, 415), 58: (0, 353), 39: (0, 605), 20: (0, 615)}, 49: {20: (0, 633), 10: (0, 637), 14: (0, 415), 1: (0, 492)}, 50: {39: (0, 448)}, 51: {1: (0, 143), 20: (0, 344), 13: (0, 51), 21: (0, 345), 11: (0, 115), 12: (0, 123), 59: (0, 349), 22: (0, 355), 17: (0, 409), 23: (0, 358), 8: (0, 135), 24: (0, 142), 14: (0, 415), 25: (0, 147)}, 52: {1: (1, {'@': 64}), 2: (1, {'@': 64}), 3: (1, {'@': 64}), 5: (1, {'@': 64}), 6: (1, {'@': 64}), 7: (1, {'@': 64}), 8: (1, {'@': 64}), 10: (1, {'@': 64}), 11: (1, {'@': 64}), 30: (1, {'@': 64}), 31: (1, {'@': 64}), 12: (1, {'@': 64}), 13: (1, {'@': 64}), 14: (1, {'@': 64}), 15: (1, {'@': 64}), 17: (1, {'@': 64})}, 53: {43: (0, 30)}, 54: {1: (0, 558), 20: (0, 563), 8: (0, 505), 12: (0, 513), 11: (0, 517), 22: (0, 524), 13: (0, 528), 35: (0, 569), 36: (0, 549), 44: (0, 450), 37: (0, 553), 14: (0, 415)}, 55: {10: (0, 137), 1: (1, {'@': 65}), 2: (1, {'@': 65}), 3: (1, {'@': 65}), 5: (1, {'@': 65}), 6: (1, {'@': 65}), 7: (1, {'@': 65}), 8: (1, {'@': 65}), 11: (1, {'@': 65}), 31: (1, {'@': 65}), 12: (1, {'@': 65}), 13: (1, {'@': 65}), 14: (1, {'@': 65}), 15: (1, {'@': 65}), 17: (1, {'@': 65}), 30: (1, {'@': 65})}, 56: {20: (0, 335), 14: (0, 415)}, 57: {1: (1, {'@': 66}), 2: (1, {'@': 66}), 3: (1, {'@': 66}), 5: (1, {'@': 66}), 6: (1, {'@': 66}), 7: (1, {'@': 66}), 8: (1, {'@': 66}), 10: (1, {'@': 66}), 11: (1, {'@': 66}), 30: (1, {'@': 66}), 31: (1, {'@': 66}), 12: (1, {'@': 66}), 13: (1, {'@': 66}), 14: (1, {'@': 66}), 15: (1, {'@': 66}), 17: (1, {'@': 66})}, 58: {39: (0, 207), 1: (0, 219), 20: (0, 500), 13: (0, 419), 41: (0, 597), 40: (0, 497), 14: (0, 415), 22: (0, 602), 12: (0, 608)}, 59: {0: (1, {'@': 67}), 9: (1, {'@': 67}), 4: (1, {'@': 67}), 28: (1, {'@': 67}), 16: (1, {'@': 67}), 11: (1, {'@': 67}), 1: (1, {'@': 67}), 2: (1, {'@': 67}), 3: (1, {'@': 67}), 5: (1, {'@': 67}), 6: (1, {'@': 67}), 7: (1, {'@': 67}), 8: (1, {'@': 67}), 10: (1, {'@': 67}), 12: (1, {'@': 67}), 13: (1, {'@': 67}), 14: (1, {'@': 67}), 15: (1, {'@': 67}), 17: (1, {'@': 67}), 30: (1, {'@': 67}), 31: (1, {'@': 67}), 26: (1, {'@': 67}), 18: (1, {'@': 67}), 27: (1, {'@': 67}), 19: (1, {'@': 67}), 29: (1, {'@': 67}), 32: (1, {'@': 67})}, 60: {60: (0, 468), 10: (0, 471)}, 61: {61: (0, 611), 62: (0, 106), 10: (0, 332), 52: (0, 150)}, 62: {1: (0, 143), 20: (0, 344), 13: (0, 51), 10: (0, 195), 21: (0, 345), 11: (0, 115), 12: (0, 123), 22: (0, 126), 17: (0, 409), 23: (0, 358), 63: (0, 199), 8: (0, 135), 24: (0, 142), 14: (0, 415), 25: (0, 147), 59: (0, 201)}, 63: {34: (0, 504), 33: (0, 511)}, 64: {14: (0, 415), 58: (0, 342), 39: (0, 605), 20: (0, 615)}, 65: {12: (1, {'@': 68}), 1: (1, {'@': 68}), 2: (1, {'@': 68}), 3: (1, {'@': 68}), 5: (1, {'@': 68}), 6: (1, {'@': 68}), 13: (1, {'@': 68}), 7: (1, {'@': 68}), 8: (1, {'@': 68}), 14: (1, {'@': 68}), 15: (1, {'@': 68}), 10: (1, {'@': 68}), 17: (1, {'@': 68}), 11: (1, {'@': 68})}, 66: {19: (1, {'@': 69}), 18: (1, {'@': 69})}, 67: {61: (0, 611), 60: (0, 277), 52: (0, 150), 62: (0, 475)}, 68: {19: (1, {'@': 70}), 18: (1, {'@': 70})}, 69: {10: (0, 537), 39: (0, 518)}, 70: {34: (0, 452), 10: (0, 458)}, 71: {58: (0, 365), 39: (0, 605), 20: (0, 615), 14: (0, 415)}, 72: {1: (0, 533), 14: (0, 415), 20: (0, 540), 10: (0, 546)}, 73: {0: (1, {'@': 71}), 1: (1, {'@': 71}), 5: (1, {'@': 71}), 3: (1, {'@': 71}), 2: (1, {'@': 71}), 6: (1, {'@': 71}), 4: (1, {'@': 71}), 7: (1, {'@': 71}), 8: (1, {'@': 71}), 9: (1, {'@': 71}), 10: (1, {'@': 71}), 30: (1, {'@': 71}), 11: (1, {'@': 71}), 31: (1, {'@': 71}), 12: (1, {'@': 71}), 26: (1, {'@': 71}), 18: (1, {'@': 71}), 27: (1, {'@': 71}), 13: (1, {'@': 71}), 19: (1, {'@': 71}), 29: (1, {'@': 71}), 14: (1, {'@': 71}), 32: (1, {'@': 71}), 15: (1, {'@': 71}), 28: (1, {'@': 71}), 16: (1, {'@': 71}), 17: (1, {'@': 71})}, 74: {23: (0, 229), 1: (0, 210), 20: (0, 249), 64: (0, 405), 8: (0, 418), 65: (0, 218), 13: (0, 419), 11: (0, 420), 12: (0, 620), 17: (0, 182), 66: (0, 525), 41: (0, 421), 67: (0, 530), 68: (0, 422), 22: (0, 3), 14: (0, 415)}, 75: {1: (0, 522), 10: (0, 529), 20: (0, 538), 14: (0, 415)}, 76: {39: (0, 10)}, 77: {69: (1, {'@': 72})}, 78: {1: (1, {'@': 73}), 2: (1, {'@': 73}), 3: (1, {'@': 73}), 5: (1, {'@': 73}), 6: (1, {'@': 73}), 7: (1, {'@': 73}), 8: (1, {'@': 73}), 10: (1, {'@': 73}), 11: (1, {'@': 73}), 30: (1, {'@': 73}), 31: (1, {'@': 73}), 12: (1, {'@': 73}), 13: (1, {'@': 73}), 14: (1, {'@': 73}), 15: (1, {'@': 73}), 17: (1, {'@': 73})}, 79: {70: (0, 61), 71: (0, 119)}, 80: {0: (1, {'@': 74}), 9: (1, {'@': 74}), 4: (1, {'@': 74}), 28: (1, {'@': 74}), 16: (1, {'@': 74}), 11: (1, {'@': 74}), 1: (1, {'@': 74}), 2: (1, {'@': 74}), 3: (1, {'@': 74}), 5: (1, {'@': 74}), 6: (1, {'@': 74}), 7: (1, {'@': 74}), 8: (1, {'@': 74}), 10: (1, {'@': 74}), 12: (1, {'@': 74}), 13: (1, {'@': 74}), 14: (1, {'@': 74}), 15: (1, {'@': 74}), 17: (1, {'@': 74}), 30: (1, {'@': 74}), 31: (1, {'@': 74}), 26: (1, {'@': 74}), 18: (1, {'@': 74}), 27: (1, {'@': 74}), 19: (1, {'@': 74}), 29: (1, {'@': 74}), 32: (1, {'@': 74})}, 81: {1: (0, 253), 20: (0, 500), 13: (0, 283), 53: (0, 157), 17: (0, 300), 48: (0, 302), 54: (0, 306), 22: (0, 310), 50: (0, 312), 49: (0, 315), 55: (0, 317), 14: (0, 415), 8: (0, 320), 12: (0, 325), 11: (0, 328)}, 82: {10: (0, 544), 12: (1, {'@': 75}), 1: (1, {'@': 75}), 13: (1, {'@': 75}), 14: (1, {'@': 75}), 17: (1, {'@': 75}), 49: (1, {'@': 75})}, 83: {0: (1, {'@': 76}), 9: (1, {'@': 76}), 4: (1, {'@': 76}), 28: (1, {'@': 76}), 16: (1, {'@': 76}), 11: (1, {'@': 76}), 1: (1, {'@': 76}), 2: (1, {'@': 76}), 3: (1, {'@': 76}), 5: (1, {'@': 76}), 6: (1, {'@': 76}), 7: (1, {'@': 76}), 8: (1, {'@': 76}), 10: (1, {'@': 76}), 12: (1, {'@': 76}), 13: (1, {'@': 76}), 14: (1, {'@': 76}), 15: (1, {'@': 76}), 17: (1, {'@': 76}), 30: (1, {'@': 76}), 31: (1, {'@': 76}), 26: (1, {'@': 76}), 18: (1, {'@': 76}), 27: (1, {'@': 76}), 19: (1, {'@': 76}), 29: (1, {'@': 76}), 32: (1, {'@': 76})}, 84: {15: (0, 582), 12: (1, {'@': 77}), 1: (1, {'@': 77}), 2: (1, {'@': 77}), 3: (1, {'@': 77}), 5: (1, {'@': 77}), 13: (1, {'@': 77}), 7: (1, {'@': 77}), 8: (1, {'@': 77}), 14: (1, {'@': 77}), 10: (1, {'@': 77}), 17: (1, {'@': 77}), 11: (1, {'@': 77})}, 85: {58: (0, 470), 39: (0, 605), 10: (0, 351), 20: (0, 615), 14: (0, 415)}, 86: {1: (1, {'@': 78}), 2: (1, {'@': 78}), 3: (1, {'@': 78}), 5: (1, {'@': 78}), 6: (1, {'@': 78}), 7: (1, {'@': 78}), 8: (1, {'@': 78}), 10: (1, {'@': 78}), 11: (1, {'@': 78}), 30: (1, {'@': 78}), 31: (1, {'@': 78}), 12: (1, {'@': 78}), 13: (1, {'@': 78}), 14: (1, {'@': 78}), 15: (1, {'@': 78}), 17: (1, {'@': 78})}, 87: {0: (1, {'@': 79}), 4: (1, {'@': 79}), 18: (1, {'@': 79}), 19: (1, {'@': 79}), 9: (1, {'@': 79}), 28: (1, {'@': 79}), 16: (1, {'@': 79}), 11: (1, {'@': 79})}, 88: {0: (1, {'@': 80}), 9: (1, {'@': 80}), 4: (1, {'@': 80}), 28: (1, {'@': 80}), 16: (1, {'@': 80}), 11: (1, {'@': 80}), 1: (1, {'@': 80}), 2: (1, {'@': 80}), 3: (1, {'@': 80}), 5: (1, {'@': 80}), 6: (1, {'@': 80}), 7: (1, {'@': 80}), 8: (1, {'@': 80}), 10: (1, {'@': 80}), 12: (1, {'@': 80}), 13: (1, {'@': 80}), 14: (1, {'@': 80}), 15: (1, {'@': 80}), 17: (1, {'@': 80}), 30: (1, {'@': 80}), 31: (1, {'@': 80}), 26: (1, {'@': 80}), 18: (1, {'@': 80}), 27: (1, {'@': 80}), 19: (1, {'@': 80}), 29: (1, {'@': 80}), 32: (1, {'@': 80})}, 89: {23: (0, 229), 1: (0, 210), 20: (0, 249), 64: (0, 405), 8: (0, 418), 13: (0, 419), 11: (0, 420), 66: (0, 381), 12: (0, 620), 17: (0, 409), 41: (0, 421), 68: (0, 422), 22: (0, 3), 14: (0, 415)}, 90: {1: (0, 219), 20: (0, 500), 13: (0, 51), 14: (0, 415), 39: (0, 403), 12: (0, 87), 72: (0, 93), 25: (0, 99), 22: (0, 104)}, 91: {39: (0, 543)}, 92: {69: (1, {'@': 81})}, 93: {0: (1, {'@': 82}), 9: (1, {'@': 82}), 4: (1, {'@': 82}), 28: (1, {'@': 82}), 16: (1, {'@': 82}), 11: (1, {'@': 82}), 18: (1, {'@': 82}), 19: (1, {'@': 82})}, 94: {14: (0, 415), 1: (0, 454), 20: (0, 460)}, 95: {58: (0, 343), 14: (0, 415), 39: (0, 605), 20: (0, 615), 10: (0, 346)}, 96: {58: (0, 92), 10: (0, 356), 14: (0, 415), 39: (0, 605), 20: (0, 615)}, 97: {12: (1, {'@': 83}), 1: (1, {'@': 83}), 13: (1, {'@': 83}), 14: (1, {'@': 83}), 17: (1, {'@': 83}), 49: (1, {'@': 83})}, 98: {27: (1, {'@': 84}), 18: (1, {'@': 84})}, 99: {0: (1, {'@': 85}), 4: (1, {'@': 85}), 18: (1, {'@': 85}), 19: (1, {'@': 85}), 9: (1, {'@': 85}), 28: (1, {'@': 85}), 16: (1, {'@': 85}), 11: (1, {'@': 85})}, 100: {23: (0, 229), 1: (0, 210), 20: (0, 249), 64: (0, 405), 8: (0, 418), 13: (0, 419), 11: (0, 420), 12: (0, 620), 66: (0, 383), 17: (0, 182), 67: (0, 386), 41: (0, 421), 68: (0, 422), 22: (0, 3), 14: (0, 415)}, 101: {39: (0, 548)}, 102: {9: (0, 17)}, 103: {39: (0, 605), 10: (0, 347), 14: (0, 415), 58: (0, 361), 20: (0, 615)}, 104: {0: (1, {'@': 86}), 4: (1, {'@': 86}), 18: (1, {'@': 86}), 19: (1, {'@': 86}), 9: (1, {'@': 86}), 28: (1, {'@': 86}), 16: (1, {'@': 86}), 11: (1, {'@': 86})}, 105: {1: (0, 59), 20: (0, 467), 10: (0, 469), 14: (0, 415)}, 106: {73: (0, 60), 10: (0, 67), 60: (0, 78)}, 107: {1: (0, 551), 20: (0, 555), 13: (0, 419), 17: (0, 409), 23: (0, 561), 40: (0, 567), 74: (0, 572), 41: (0, 597), 14: (0, 415), 22: (0, 602), 12: (0, 608)}, 108: {1: (1, {'@': 87}), 2: (1, {'@': 87}), 3: (1, {'@': 87}), 5: (1, {'@': 87}), 6: (1, {'@': 87}), 7: (1, {'@': 87}), 8: (1, {'@': 87}), 10: (1, {'@': 87}), 11: (1, {'@': 87}), 30: (1, {'@': 87}), 31: (1, {'@': 87}), 12: (1, {'@': 87}), 13: (1, {'@': 87}), 14: (1, {'@': 87}), 15: (1, {'@': 87}), 17: (1, {'@': 87})}, 109: {0: (0, 291), 9: (0, 297), 11: (0, 82), 42: (0, 360), 4: (0, 97), 16: (0, 364), 28: (0, 366)}, 110: {0: (1, {'@': 88}), 1: (1, {'@': 88}), 2: (1, {'@': 88}), 3: (1, {'@': 88}), 4: (1, {'@': 88}), 5: (1, {'@': 88}), 6: (1, {'@': 88}), 7: (1, {'@': 88}), 8: (1, {'@': 88}), 9: (1, {'@': 88}), 10: (1, {'@': 88}), 11: (1, {'@': 88}), 12: (1, {'@': 88}), 13: (1, {'@': 88}), 14: (1, {'@': 88}), 15: (1, {'@': 88}), 16: (1, {'@': 88}), 17: (1, {'@': 88}), 18: (1, {'@': 88}), 19: (1, {'@': 88})}, 111: {18: (0, 62), 19: (0, 493)}, 112: {34: (0, 402)}, 113: {1: (0, 143), 20: (0, 344), 13: (0, 51), 21: (0, 345), 11: (0, 115), 12: (0, 123), 22: (0, 126), 17: (0, 409), 23: (0, 358), 8: (0, 135), 63: (0, 472), 24: (0, 142), 10: (0, 498), 14: (0, 415), 59: (0, 509), 25: (0, 147)}, 114: {39: (0, 577)}, 115: {1: (0, 143), 20: (0, 344), 13: (0, 51), 21: (0, 345), 11: (0, 115), 12: (0, 123), 22: (0, 126), 17: (0, 409), 23: (0, 358), 8: (0, 135), 59: (0, 339), 24: (0, 142), 14: (0, 415), 25: (0, 147)}, 116: {0: (1, {'@': 89}), 4: (1, {'@': 89}), 18: (1, {'@': 89}), 19: (1, {'@': 89}), 9: (1, {'@': 89}), 28: (1, {'@': 89}), 16: (1, {'@': 89}), 11: (1, {'@': 89})}, 117: {0: (1, {'@': 90}), 9: (1, {'@': 90}), 4: (1, {'@': 90}), 28: (1, {'@': 90}), 16: (1, {'@': 90}), 11: (1, {'@': 90}), 1: (1, {'@': 90}), 2: (1, {'@': 90}), 3: (1, {'@': 90}), 5: (1, {'@': 90}), 6: (1, {'@': 90}), 7: (1, {'@': 90}), 8: (1, {'@': 90}), 10: (1, {'@': 90}), 12: (1, {'@': 90}), 13: (1, {'@': 90}), 14: (1, {'@': 90}), 15: (1, {'@': 90}), 17: (1, {'@': 90}), 30: (1, {'@': 90}), 31: (1, {'@': 90}), 26: (1, {'@': 90}), 18: (1, {'@': 90}), 27: (1, {'@': 90}), 19: (1, {'@': 90}), 29: (1, {'@': 90}), 32: (1, {'@': 90})}, 118: {69: (1, {'@': 91})}, 119: {1: (1, {'@': 92}), 2: (1, {'@': 92}), 3: (1, {'@': 92}), 5: (1, {'@': 92}), 6: (1, {'@': 92}), 7: (1, {'@': 92}), 8: (1, {'@': 92}), 10: (1, {'@': 92}), 11: (1, {'@': 92}), 30: (1, {'@': 92}), 31: (1, {'@': 92}), 12: (1, {'@': 92}), 13: (1, {'@': 92}), 14: (1, {'@': 92}), 15: (1, {'@': 92}), 17: (1, {'@': 92})}, 120: {0: (1, {'@': 93}), 9: (1, {'@': 93}), 4: (1, {'@': 93}), 28: (1, {'@': 93}), 16: (1, {'@': 93}), 11: (1, {'@': 93}), 18: (1, {'@': 93}), 19: (1, {'@': 93})}, 121: {12: (1, {'@': 94}), 1: (1, {'@': 94}), 2: (1, {'@': 94}), 3: (1, {'@': 94}), 5: (1, {'@': 94}), 13: (1, {'@': 94}), 7: (1, {'@': 94}), 8: (1, {'@': 94}), 14: (1, {'@': 94}), 15: (1, {'@': 94}), 10: (1, {'@': 94}), 17: (1, {'@': 94}), 11: (1, {'@': 94})}, 122: {14: (0, 415), 20: (0, 455), 1: (0, 477)}, 123: {0: (1, {'@': 95}), 4: (1, {'@': 95}), 9: (1, {'@': 95}), 28: (1, {'@': 95}), 16: (1, {'@': 95}), 11: (1, {'@': 95}), 18: (1, {'@': 95}), 19: (1, {'@': 95})}, 124: {10: (0, 192), 1: (0, 197), 20: (0, 200), 14: (0, 415)}, 125: {12: (1, {'@': 96}), 1: (1, {'@': 96}), 2: (1, {'@': 96}), 3: (1, {'@': 96}), 5: (1, {'@': 96}), 13: (1, {'@': 96}), 7: (1, {'@': 96}), 8: (1, {'@': 96}), 14: (1, {'@': 96}), 10: (1, {'@': 96}), 17: (1, {'@': 96}), 11: (1, {'@': 96})}, 126: {0: (1, {'@': 97}), 4: (1, {'@': 97}), 9: (1, {'@': 97}), 28: (1, {'@': 97}), 16: (1, {'@': 97}), 11: (1, {'@': 97}), 18: (1, {'@': 97}), 19: (1, {'@': 97})}, 127: {69: (1, {'@': 98})}, 128: {0: (1, {'@': 99}), 9: (1, {'@': 99}), 4: (1, {'@': 99}), 28: (1, {'@': 99}), 16: (1, {'@': 99}), 11: (1, {'@': 99}), 18: (1, {'@': 99}), 19: (1, {'@': 99})}, 129: {75: (0, 586), 6: (0, 121), 15: (0, 590), 12: (1, {'@': 100}), 1: (1, {'@': 100}), 2: (1, {'@': 100}), 3: (1, {'@': 100}), 5: (1, {'@': 100}), 13: (1, {'@': 100}), 7: (1, {'@': 100}), 8: (1, {'@': 100}), 14: (1, {'@': 100}), 10: (1, {'@': 100}), 17: (1, {'@': 100}), 11: (1, {'@': 100})}, 130: {0: (1, {'@': 101}), 9: (1, {'@': 101}), 4: (1, {'@': 101}), 28: (1, {'@': 101}), 16: (1, {'@': 101}), 11: (1, {'@': 101}), 1: (1, {'@': 101}), 2: (1, {'@': 101}), 3: (1, {'@': 101}), 5: (1, {'@': 101}), 6: (1, {'@': 101}), 7: (1, {'@': 101}), 8: (1, {'@': 101}), 10: (1, {'@': 101}), 12: (1, {'@': 101}), 13: (1, {'@': 101}), 14: (1, {'@': 101}), 15: (1, {'@': 101}), 17: (1, {'@': 101}), 30: (1, {'@': 101}), 31: (1, {'@': 101}), 26: (1, {'@': 101}), 18: (1, {'@': 101}), 27: (1, {'@': 101}), 19: (1, {'@': 101}), 29: (1, {'@': 101}), 32: (1, {'@': 101})}, 131: {9: (0, 368)}, 132: {23: (0, 229), 1: (0, 210), 20: (0, 249), 64: (0, 405), 8: (0, 418), 13: (0, 419), 11: (0, 420), 12: (0, 620), 66: (0, 367), 17: (0, 409), 41: (0, 421), 68: (0, 422), 22: (0, 3), 14: (0, 415)}, 133: {0: (1, {'@': 102}), 9: (1, {'@': 102}), 4: (1, {'@': 102}), 28: (1, {'@': 102}), 16: (1, {'@': 102}), 11: (1, {'@': 102}), 18: (1, {'@': 102}), 19: (1, {'@': 102})}, 134: {0: (1, {'@': 103}), 9: (1, {'@': 103}), 4: (1, {'@': 103}), 28: (1, {'@': 103}), 16: (1, {'@': 103}), 11: (1, {'@': 103}), 1: (1, {'@': 103}), 2: (1, {'@': 103}), 3: (1, {'@': 103}), 5: (1, {'@': 103}), 6: (1, {'@': 103}), 7: (1, {'@': 103}), 8: (1, {'@': 103}), 10: (1, {'@': 103}), 12: (1, {'@': 103}), 13: (1, {'@': 103}), 14: (1, {'@': 103}), 15: (1, {'@': 103}), 17: (1, {'@': 103}), 30: (1, {'@': 103}), 31: (1, {'@': 103}), 26: (1, {'@': 103}), 18: (1, {'@': 103}), 27: (1, {'@': 103}), 19: (1, {'@': 103}), 29: (1, {'@': 103}), 32: (1, {'@': 103})}, 135: {1: (0, 143), 20: (0, 344), 13: (0, 51), 21: (0, 345), 11: (0, 115), 12: (0, 123), 22: (0, 126), 59: (0, 354), 17: (0, 409), 23: (0, 358), 8: (0, 135), 24: (0, 142), 14: (0, 415), 25: (0, 147)}, 136: {10: (0, 41), 33: (0, 44), 34: (0, 49), 0: (1, {'@': 104}), 4: (1, {'@': 104}), 18: (1, {'@': 104}), 19: (1, {'@': 104}), 9: (1, {'@': 104}), 28: (1, {'@': 104}), 16: (1, {'@': 104}), 11: (1, {'@': 104})}, 137: {61: (0, 611), 62: (0, 52), 76: (0, 57), 77: (0, 635), 52: (0, 150)}, 138: {12: (0, 214), 23: (0, 229), 1: (0, 210), 20: (0, 249), 64: (0, 405), 78: (0, 408), 79: (0, 595), 17: (0, 409), 80: (0, 410), 66: (0, 411), 81: (0, 600), 2: (0, 412), 14: (0, 415), 7: (0, 417), 8: (0, 418), 13: (0, 419), 11: (0, 420), 41: (0, 421), 68: (0, 422), 22: (0, 3), 3: (0, 8)}, 139: {39: (0, 464)}, 140: {23: (0, 229), 1: (0, 210), 20: (0, 249), 64: (0, 405), 8: (0, 418), 66: (0, 369), 13: (0, 419), 11: (0, 420), 12: (0, 620), 10: (0, 370), 17: (0, 409), 41: (0, 421), 68: (0, 422), 22: (0, 3), 14: (0, 415)}, 141: {10: (0, 63), 33: (0, 69), 34: (0, 75), 0: (1, {'@': 105}), 4: (1, {'@': 105}), 18: (1, {'@': 105}), 19: (1, {'@': 105}), 9: (1, {'@': 105}), 28: (1, {'@': 105}), 16: (1, {'@': 105}), 11: (1, {'@': 105})}, 142: {0: (1, {'@': 106}), 4: (1, {'@': 106}), 9: (1, {'@': 106}), 28: (1, {'@': 106}), 16: (1, {'@': 106}), 11: (1, {'@': 106}), 18: (1, {'@': 106}), 19: (1, {'@': 106})}, 143: {10: (0, 41), 33: (0, 44), 34: (0, 49), 9: (0, 90), 19: (1, {'@': 107}), 18: (1, {'@': 107}), 0: (1, {'@': 107}), 4: (1, {'@': 107}), 28: (1, {'@': 107}), 16: (1, {'@': 107}), 11: (1, {'@': 107})}, 144: {34: (0, 480), 10: (0, 258)}, 145: {0: (1, {'@': 108}), 9: (1, {'@': 108}), 4: (1, {'@': 108}), 28: (1, {'@': 108}), 16: (1, {'@': 108}), 11: (1, {'@': 108}), 18: (1, {'@': 108}), 19: (1, {'@': 108})}, 146: {10: (0, 12), 14: (0, 415), 1: (0, 262), 20: (0, 265)}, 147: {0: (1, {'@': 109}), 4: (1, {'@': 109}), 9: (1, {'@': 109}), 28: (1, {'@': 109}), 16: (1, {'@': 109}), 11: (1, {'@': 109}), 18: (1, {'@': 109}), 19: (1, {'@': 109})}, 148: {0: (1, {'@': 110}), 1: (1, {'@': 110}), 2: (1, {'@': 110}), 3: (1, {'@': 110}), 4: (1, {'@': 110}), 5: (1, {'@': 110}), 6: (1, {'@': 110}), 7: (1, {'@': 110}), 8: (1, {'@': 110}), 9: (1, {'@': 110}), 10: (1, {'@': 110}), 11: (1, {'@': 110}), 12: (1, {'@': 110}), 13: (1, {'@': 110}), 14: (1, {'@': 110}), 15: (1, {'@': 110}), 16: (1, {'@': 110}), 17: (1, {'@': 110}), 18: (1, {'@': 110}), 19: (1, {'@': 110})}, 149: {0: (1, {'@': 111}), 4: (1, {'@': 111}), 18: (1, {'@': 111}), 19: (1, {'@': 111}), 9: (1, {'@': 111}), 28: (1, {'@': 111}), 16: (1, {'@': 111}), 11: (1, {'@': 111})}, 150: {33: (0, 507), 17: (1, {'@': 112}), 47: (1, {'@': 112})}, 151: {11: (0, 82), 42: (0, 160), 4: (0, 97), 9: (0, 16), 16: (0, 21), 0: (0, 25), 28: (0, 254)}, 152: {0: (1, {'@': 113}), 9: (1, {'@': 113}), 4: (1, {'@': 113}), 28: (1, {'@': 113}), 16: (1, {'@': 113}), 11: (1, {'@': 113}), 1: (1, {'@': 113}), 2: (1, {'@': 113}), 3: (1, {'@': 113}), 5: (1, {'@': 113}), 6: (1, {'@': 113}), 7: (1, {'@': 113}), 8: (1, {'@': 113}), 10: (1, {'@': 113}), 12: (1, {'@': 113}), 13: (1, {'@': 113}), 14: (1, {'@': 113}), 15: (1, {'@': 113}), 17: (1, {'@': 113}), 30: (1, {'@': 113}), 31: (1, {'@': 113}), 26: (1, {'@': 113}), 18: (1, {'@': 113}), 27: (1, {'@': 113}), 19: (1, {'@': 113}), 29: (1, {'@': 113}), 32: (1, {'@': 113})}, 153: {12: (1, {'@': 114}), 1: (1, {'@': 114}), 2: (1, {'@': 114}), 3: (1, {'@': 114}), 5: (1, {'@': 114}), 6: (1, {'@': 114}), 17: (1, {'@': 114}), 13: (1, {'@': 114}), 7: (1, {'@': 114}), 8: (1, {'@': 114}), 14: (1, {'@': 114}), 10: (1, {'@': 114}), 15: (1, {'@': 114}), 11: (1, {'@': 114}), 30: (1, {'@': 114})}, 154: {14: (0, 415), 1: (0, 604), 20: (0, 260)}, 155: {1: (0, 4), 20: (0, 500), 13: (0, 51), 21: (0, 109), 11: (0, 115), 12: (0, 123), 22: (0, 126), 17: (0, 409), 23: (0, 131), 8: (0, 135), 24: (0, 142), 14: (0, 415), 25: (0, 147), 10: (0, 1)}, 156: {10: (0, 292), 20: (0, 298), 14: (0, 415), 1: (0, 301)}, 157: {11: (0, 82), 42: (0, 160), 4: (0, 97), 9: (0, 16), 16: (0, 21), 0: (0, 25), 28: (0, 305)}, 158: {0: (1, {'@': 115}), 4: (1, {'@': 115}), 18: (1, {'@': 115}), 19: (1, {'@': 115}), 9: (1, {'@': 115}), 28: (1, {'@': 115}), 16: (1, {'@': 115}), 11: (1, {'@': 115})}, 159: {9: (1, {'@': 116}), 1: (1, {'@': 116}), 2: (1, {'@': 116}), 3: (1, {'@': 116}), 5: (1, {'@': 116}), 6: (1, {'@': 116}), 7: (1, {'@': 116}), 8: (1, {'@': 116}), 10: (1, {'@': 116}), 30: (1, {'@': 116}), 11: (1, {'@': 116}), 31: (1, {'@': 116}), 12: (1, {'@': 116}), 13: (1, {'@': 116}), 14: (1, {'@': 116}), 15: (1, {'@': 116}), 17: (1, {'@': 116}), 19: (1, {'@': 116}), 18: (1, {'@': 116}), 26: (1, {'@': 116}), 27: (1, {'@': 116}), 0: (1, {'@': 116}), 4: (1, {'@': 116}), 29: (1, {'@': 116}), 32: (1, {'@': 116}), 28: (1, {'@': 116}), 16: (1, {'@': 116})}, 160: {1: (0, 439), 20: (0, 441), 13: (0, 283), 48: (0, 596), 22: (0, 324), 12: (0, 327), 49: (0, 329), 55: (0, 443), 51: (0, 445), 17: (0, 300), 82: (0, 447), 14: (0, 415), 50: (0, 341)}, 161: {10: (0, 389), 29: (0, 390)}, 162: {20: (0, 628), 14: (0, 415), 1: (0, 272)}, 163: {19: (0, 271)}, 164: {39: (0, 110)}, 165: {28: (0, 307), 11: (0, 82), 42: (0, 160), 4: (0, 97), 9: (0, 16), 16: (0, 21), 0: (0, 25)}, 166: {9: (1, {'@': 117}), 1: (1, {'@': 117}), 2: (1, {'@': 117}), 3: (1, {'@': 117}), 5: (1, {'@': 117}), 6: (1, {'@': 117}), 7: (1, {'@': 117}), 8: (1, {'@': 117}), 10: (1, {'@': 117}), 30: (1, {'@': 117}), 11: (1, {'@': 117}), 31: (1, {'@': 117}), 12: (1, {'@': 117}), 13: (1, {'@': 117}), 14: (1, {'@': 117}), 15: (1, {'@': 117}), 17: (1, {'@': 117}), 19: (1, {'@': 117}), 18: (1, {'@': 117}), 26: (1, {'@': 117}), 27: (1, {'@': 117}), 0: (1, {'@': 117}), 4: (1, {'@': 117}), 29: (1, {'@': 117}), 32: (1, {'@': 117}), 28: (1, {'@': 117}), 16: (1, {'@': 117})}, 167: {46: (0, 352)}, 168: {19: (1, {'@': 118}), 18: (1, {'@': 118})}, 169: {0: (1, {'@': 119}), 9: (1, {'@': 119}), 4: (1, {'@': 119}), 28: (1, {'@': 119}), 16: (1, {'@': 119}), 11: (1, {'@': 119}), 1: (1, {'@': 119}), 2: (1, {'@': 119}), 3: (1, {'@': 119}), 5: (1, {'@': 119}), 6: (1, {'@': 119}), 7: (1, {'@': 119}), 8: (1, {'@': 119}), 10: (1, {'@': 119}), 12: (1, {'@': 119}), 13: (1, {'@': 119}), 14: (1, {'@': 119}), 15: (1, {'@': 119}), 17: (1, {'@': 119}), 30: (1, {'@': 119}), 31: (1, {'@': 119}), 26: (1, {'@': 119}), 18: (1, {'@': 119}), 27: (1, {'@': 119}), 19: (1, {'@': 119}), 29: (1, {'@': 119}), 32: (1, {'@': 119})}, 170: {32: (0, 167), 27: (1, {'@': 120}), 18: (1, {'@': 120})}, 171: {34: (0, 45), 10: (1, {'@': 121})}, 172: {39: (0, 294)}, 173: {1: (0, 253), 20: (0, 500), 13: (0, 283), 53: (0, 274), 17: (0, 300), 48: (0, 302), 54: (0, 306), 22: (0, 310), 50: (0, 312), 49: (0, 315), 55: (0, 317), 14: (0, 415), 8: (0, 320), 12: (0, 325), 11: (0, 328)}, 174: {10: (0, 89)}, 175: {34: (0, 252)}, 176: {10: (0, 100)}, 177: {1: (0, 4), 20: (0, 500), 13: (0, 51), 21: (0, 488), 11: (0, 115), 12: (0, 123), 22: (0, 126), 17: (0, 409), 23: (0, 131), 10: (0, 198), 8: (0, 135), 24: (0, 142), 14: (0, 415), 25: (0, 147)}, 178: {14: (0, 415), 20: (0, 40), 1: (0, 289)}, 179: {1: (0, 253), 20: (0, 500), 13: (0, 283), 53: (0, 280), 17: (0, 300), 48: (0, 302), 54: (0, 306), 22: (0, 310), 50: (0, 312), 49: (0, 315), 55: (0, 317), 14: (0, 415), 8: (0, 320), 12: (0, 325), 11: (0, 328)}, 180: {27: (1, {'@': 122}), 18: (1, {'@': 122})}, 181: {0: (1, {'@': 123}), 9: (1, {'@': 123}), 4: (1, {'@': 123}), 28: (1, {'@': 123}), 16: (1, {'@': 123}), 11: (1, {'@': 123}), 18: (1, {'@': 123}), 19: (1, {'@': 123})}, 182: {23: (0, 102), 1: (0, 15), 20: (0, 500), 64: (0, 20), 8: (0, 418), 13: (0, 419), 11: (0, 420), 39: (0, 503), 12: (0, 620), 17: (0, 409), 41: (0, 421), 52: (0, 541), 68: (0, 422), 22: (0, 3), 14: (0, 415)}, 183: {0: (1, {'@': 124}), 9: (1, {'@': 124}), 4: (1, {'@': 124}), 28: (1, {'@': 124}), 16: (1, {'@': 124}), 11: (1, {'@': 124}), 1: (1, {'@': 124}), 2: (1, {'@': 124}), 3: (1, {'@': 124}), 5: (1, {'@': 124}), 6: (1, {'@': 124}), 7: (1, {'@': 124}), 8: (1, {'@': 124}), 10: (1, {'@': 124}), 12: (1, {'@': 124}), 13: (1, {'@': 124}), 14: (1, {'@': 124}), 15: (1, {'@': 124}), 17: (1, {'@': 124}), 30: (1, {'@': 124}), 31: (1, {'@': 124}), 26: (1, {'@': 124}), 18: (1, {'@': 124}), 27: (1, {'@': 124}), 19: (1, {'@': 124}), 29: (1, {'@': 124}), 32: (1, {'@': 124})}, 184: {1: (1, {'@': 125}), 2: (1, {'@': 125}), 3: (1, {'@': 125}), 5: (1, {'@': 125}), 6: (1, {'@': 125}), 7: (1, {'@': 125}), 8: (1, {'@': 125}), 10: (1, {'@': 125}), 11: (1, {'@': 125}), 30: (1, {'@': 125}), 31: (1, {'@': 125}), 12: (1, {'@': 125}), 13: (1, {'@': 125}), 14: (1, {'@': 125}), 15: (1, {'@': 125}), 17: (1, {'@': 125})}, 185: {61: (0, 611), 60: (0, 196), 62: (0, 489), 52: (0, 150)}, 186: {83: (0, 161)}, 187: {27: (1, {'@': 126}), 18: (1, {'@': 126})}, 188: {0: (1, {'@': 127}), 9: (1, {'@': 127}), 4: (1, {'@': 127}), 28: (1, {'@': 127}), 16: (1, {'@': 127}), 11: (1, {'@': 127}), 1: (1, {'@': 127}), 2: (1, {'@': 127}), 3: (1, {'@': 127}), 5: (1, {'@': 127}), 6: (1, {'@': 127}), 7: (1, {'@': 127}), 8: (1, {'@': 127}), 10: (1, {'@': 127}), 12: (1, {'@': 127}), 13: (1, {'@': 127}), 14: (1, {'@': 127}), 15: (1, {'@': 127}), 17: (1, {'@': 127}), 30: (1, {'@': 127}), 31: (1, {'@': 127}), 26: (1, {'@': 127}), 18: (1, {'@': 127}), 27: (1, {'@': 127}), 19: (1, {'@': 127}), 29: (1, {'@': 127}), 32: (1, {'@': 127})}, 189: {12: (0, 214), 23: (0, 229), 79: (0, 212), 1: (0, 210), 20: (0, 249), 64: (0, 405), 81: (0, 406), 84: (0, 407), 78: (0, 408), 17: (0, 409), 80: (0, 410), 66: (0, 411), 2: (0, 412), 10: (0, 413), 14: (0, 415), 85: (0, 416), 7: (0, 417), 8: (0, 418), 13: (0, 419), 11: (0, 420), 41: (0, 421), 68: (0, 422), 22: (0, 3), 3: (0, 8)}, 190: {32: (0, 29), 27: (1, {'@': 62}), 18: (1, {'@': 62})}, 191: {1: (1, {'@': 128}), 2: (1, {'@': 128}), 3: (1, {'@': 128}), 5: (1, {'@': 128}), 6: (1, {'@': 128}), 7: (1, {'@': 128}), 8: (1, {'@': 128}), 10: (1, {'@': 128}), 11: (1, {'@': 128}), 30: (1, {'@': 128}), 31: (1, {'@': 128}), 12: (1, {'@': 128}), 13: (1, {'@': 128}), 14: (1, {'@': 128}), 15: (1, {'@': 128}), 17: (1, {'@': 128})}, 192: {14: (0, 415), 20: (0, 266), 1: (0, 303)}, 193: {86: (0, 33), 18: (0, 575), 27: (0, 571)}, 194: {11: (0, 82), 42: (0, 160), 4: (0, 97), 9: (0, 16), 16: (0, 21), 28: (0, 273), 0: (0, 25)}, 195: {1: (0, 143), 20: (0, 344), 13: (0, 51), 21: (0, 345), 11: (0, 115), 12: (0, 123), 59: (0, 286), 22: (0, 126), 17: (0, 409), 23: (0, 358), 63: (0, 290), 8: (0, 135), 24: (0, 142), 14: (0, 415), 25: (0, 147)}, 196: {1: (1, {'@': 129}), 2: (1, {'@': 129}), 3: (1, {'@': 129}), 5: (1, {'@': 129}), 6: (1, {'@': 129}), 7: (1, {'@': 129}), 8: (1, {'@': 129}), 10: (1, {'@': 129}), 11: (1, {'@': 129}), 30: (1, {'@': 129}), 31: (1, {'@': 129}), 12: (1, {'@': 129}), 13: (1, {'@': 129}), 14: (1, {'@': 129}), 15: (1, {'@': 129}), 17: (1, {'@': 129})}, 197: {0: (1, {'@': 130}), 9: (1, {'@': 130}), 4: (1, {'@': 130}), 28: (1, {'@': 130}), 16: (1, {'@': 130}), 11: (1, {'@': 130}), 1: (1, {'@': 130}), 2: (1, {'@': 130}), 3: (1, {'@': 130}), 5: (1, {'@': 130}), 6: (1, {'@': 130}), 7: (1, {'@': 130}), 8: (1, {'@': 130}), 10: (1, {'@': 130}), 12: (1, {'@': 130}), 13: (1, {'@': 130}), 14: (1, {'@': 130}), 15: (1, {'@': 130}), 17: (1, {'@': 130}), 30: (1, {'@': 130}), 31: (1, {'@': 130}), 26: (1, {'@': 130}), 18: (1, {'@': 130}), 27: (1, {'@': 130}), 19: (1, {'@': 130}), 29: (1, {'@': 130}), 32: (1, {'@': 130})}, 198: {1: (0, 4), 20: (0, 500), 13: (0, 51), 21: (0, 375), 11: (0, 115), 12: (0, 123), 22: (0, 126), 17: (0, 409), 23: (0, 131), 8: (0, 135), 24: (0, 142), 14: (0, 415), 25: (0, 147)}, 199: {19: (0, 293)}, 200: {0: (1, {'@': 131}), 9: (1, {'@': 131}), 4: (1, {'@': 131}), 28: (1, {'@': 131}), 16: (1, {'@': 131}), 11: (1, {'@': 131}), 1: (1, {'@': 131}), 2: (1, {'@': 131}), 3: (1, {'@': 131}), 5: (1, {'@': 131}), 6: (1, {'@': 131}), 7: (1, {'@': 131}), 8: (1, {'@': 131}), 10: (1, {'@': 131}), 12: (1, {'@': 131}), 13: (1, {'@': 131}), 14: (1, {'@': 131}), 15: (1, {'@': 131}), 17: (1, {'@': 131}), 30: (1, {'@': 131}), 31: (1, {'@': 131}), 26: (1, {'@': 131}), 18: (1, {'@': 131}), 27: (1, {'@': 131}), 19: (1, {'@': 131}), 29: (1, {'@': 131}), 32: (1, {'@': 131})}, 201: {19: (1, {'@': 132}), 18: (1, {'@': 132})}, 202: {38: (0, 46)}, 203: {47: (0, 308), 28: (0, 314)}, 204: {1: (0, 558), 20: (0, 563), 8: (0, 505), 12: (0, 513), 11: (0, 517), 22: (0, 524), 13: (0, 528), 35: (0, 569), 36: (0, 549), 44: (0, 234), 37: (0, 553), 10: (0, 54), 14: (0, 415)}, 205: {20: (0, 630), 10: (0, 56), 14: (0, 415)}, 206: {19: (0, 295)}, 207: {0: (1, {'@': 133}), 26: (1, {'@': 133}), 9: (1, {'@': 133}), 4: (1, {'@': 133}), 16: (1, {'@': 133}), 11: (1, {'@': 133}), 27: (1, {'@': 133}), 18: (1, {'@': 133}), 19: (1, {'@': 133}), 28: (1, {'@': 133}), 29: (1, {'@': 133}), 1: (1, {'@': 133}), 5: (1, {'@': 133}), 3: (1, {'@': 133}), 2: (1, {'@': 133}), 6: (1, {'@': 133}), 7: (1, {'@': 133}), 8: (1, {'@': 133}), 10: (1, {'@': 133}), 30: (1, {'@': 133}), 31: (1, {'@': 133}), 12: (1, {'@': 133}), 13: (1, {'@': 133}), 14: (1, {'@': 133}), 32: (1, {'@': 133}), 15: (1, {'@': 133}), 17: (1, {'@': 133})}, 208: {10: (0, 479), 34: (0, 482)}, 209: {28: (0, 279), 47: (0, 318)}, 210: {10: (0, 41), 33: (0, 44), 34: (0, 49), 9: (0, 58), 26: (1, {'@': 134}), 27: (1, {'@': 134}), 18: (1, {'@': 134}), 19: (1, {'@': 134}), 29: (1, {'@': 134}), 0: (1, {'@': 134}), 1: (1, {'@': 134}), 5: (1, {'@': 134}), 3: (1, {'@': 134}), 2: (1, {'@': 134}), 6: (1, {'@': 134}), 4: (1, {'@': 134}), 7: (1, {'@': 134}), 8: (1, {'@': 134}), 30: (1, {'@': 134}), 11: (1, {'@': 134}), 31: (1, {'@': 134}), 12: (1, {'@': 134}), 13: (1, {'@': 134}), 14: (1, {'@': 134}), 32: (1, {'@': 134}), 15: (1, {'@': 134}), 28: (1, {'@': 134}), 16: (1, {'@': 134}), 17: (1, {'@': 134})}, 211: {19: (1, {'@': 135}), 18: (1, {'@': 135})}, 212: {15: (0, 35), 12: (1, {'@': 136}), 1: (1, {'@': 136}), 2: (1, {'@': 136}), 3: (1, {'@': 136}), 5: (1, {'@': 136}), 13: (1, {'@': 136}), 7: (1, {'@': 136}), 8: (1, {'@': 136}), 14: (1, {'@': 136}), 10: (1, {'@': 136}), 17: (1, {'@': 136}), 11: (1, {'@': 136})}, 213: {60: (0, 478), 73: (0, 481), 10: (0, 483)}, 214: {10: (0, 14), 47: (0, 22), 38: (0, 26), 0: (1, {'@': 137}), 4: (1, {'@': 137}), 18: (1, {'@': 137}), 27: (1, {'@': 137}), 9: (1, {'@': 137}), 16: (1, {'@': 137}), 11: (1, {'@': 137})}, 215: {12: (1, {'@': 138}), 1: (1, {'@': 138}), 2: (1, {'@': 138}), 3: (1, {'@': 138}), 5: (1, {'@': 138}), 13: (1, {'@': 138}), 7: (1, {'@': 138}), 8: (1, {'@': 138}), 14: (1, {'@': 138}), 10: (1, {'@': 138}), 17: (1, {'@': 138}), 11: (1, {'@': 138})}, 216: {29: (0, 299)}, 217: {12: (1, {'@': 139}), 1: (1, {'@': 139}), 2: (1, {'@': 139}), 3: (1, {'@': 139}), 5: (1, {'@': 139}), 13: (1, {'@': 139}), 7: (1, {'@': 139}), 8: (1, {'@': 139}), 14: (1, {'@': 139}), 10: (1, {'@': 139}), 17: (1, {'@': 139}), 11: (1, {'@': 139})}, 218: {26: (0, 187)}, 219: {10: (0, 41), 33: (0, 44), 34: (0, 49)}, 220: {10: (1, {'@': 140}), 60: (1, {'@': 140}), 1: (1, {'@': 140}), 2: (1, {'@': 140}), 3: (1, {'@': 140}), 5: (1, {'@': 140}), 6: (1, {'@': 140}), 7: (1, {'@': 140}), 8: (1, {'@': 140}), 11: (1, {'@': 140}), 30: (1, {'@': 140}), 31: (1, {'@': 140}), 12: (1, {'@': 140}), 13: (1, {'@': 140}), 14: (1, {'@': 140}), 15: (1, {'@': 140}), 17: (1, {'@': 140})}, 221: {17: (1, {'@': 141}), 1: (1, {'@': 141}), 12: (1, {'@': 141}), 13: (1, {'@': 141}), 8: (1, {'@': 141}), 14: (1, {'@': 141}), 87: (1, {'@': 141}), 52: (1, {'@': 141}), 11: (1, {'@': 141})}, 222: {10: (0, 64), 58: (0, 77), 14: (0, 415), 39: (0, 605), 20: (0, 615)}, 223: {0: (1, {'@': 142}), 9: (1, {'@': 142}), 4: (1, {'@': 142}), 28: (1, {'@': 142}), 16: (1, {'@': 142}), 11: (1, {'@': 142}), 1: (1, {'@': 142}), 2: (1, {'@': 142}), 3: (1, {'@': 142}), 5: (1, {'@': 142}), 6: (1, {'@': 142}), 7: (1, {'@': 142}), 8: (1, {'@': 142}), 10: (1, {'@': 142}), 12: (1, {'@': 142}), 13: (1, {'@': 142}), 14: (1, {'@': 142}), 15: (1, {'@': 142}), 17: (1, {'@': 142}), 30: (1, {'@': 142}), 31: (1, {'@': 142}), 26: (1, {'@': 142}), 18: (1, {'@': 142}), 27: (1, {'@': 142}), 19: (1, {'@': 142}), 29: (1, {'@': 142}), 32: (1, {'@': 142})}, 224: {10: (0, 137), 1: (1, {'@': 143}), 2: (1, {'@': 143}), 3: (1, {'@': 143}), 5: (1, {'@': 143}), 6: (1, {'@': 143}), 7: (1, {'@': 143}), 8: (1, {'@': 143}), 11: (1, {'@': 143}), 31: (1, {'@': 143}), 12: (1, {'@': 143}), 13: (1, {'@': 143}), 14: (1, {'@': 143}), 15: (1, {'@': 143}), 17: (1, {'@': 143}), 30: (1, {'@': 143})}, 225: {0: (1, {'@': 144}), 9: (1, {'@': 144}), 4: (1, {'@': 144}), 28: (1, {'@': 144}), 16: (1, {'@': 144}), 11: (1, {'@': 144}), 1: (1, {'@': 144}), 2: (1, {'@': 144}), 3: (1, {'@': 144}), 5: (1, {'@': 144}), 6: (1, {'@': 144}), 7: (1, {'@': 144}), 8: (1, {'@': 144}), 10: (1, {'@': 144}), 12: (1, {'@': 144}), 13: (1, {'@': 144}), 14: (1, {'@': 144}), 15: (1, {'@': 144}), 17: (1, {'@': 144}), 30: (1, {'@': 144}), 31: (1, {'@': 144}), 26: (1, {'@': 144}), 18: (1, {'@': 144}), 27: (1, {'@': 144}), 19: (1, {'@': 144}), 29: (1, {'@': 144}), 32: (1, {'@': 144})}, 226: {0: (1, {'@': 145}), 9: (1, {'@': 145}), 4: (1, {'@': 145}), 28: (1, {'@': 145}), 16: (1, {'@': 145}), 11: (1, {'@': 145}), 1: (1, {'@': 145}), 2: (1, {'@': 145}), 3: (1, {'@': 145}), 5: (1, {'@': 145}), 6: (1, {'@': 145}), 7: (1, {'@': 145}), 8: (1, {'@': 145}), 10: (1, {'@': 145}), 12: (1, {'@': 145}), 13: (1, {'@': 145}), 14: (1, {'@': 145}), 15: (1, {'@': 145}), 17: (1, {'@': 145}), 30: (1, {'@': 145}), 31: (1, {'@': 145}), 26: (1, {'@': 145}), 18: (1, {'@': 145}), 27: (1, {'@': 145}), 19: (1, {'@': 145}), 29: (1, {'@': 145}), 32: (1, {'@': 145})}, 227: {88: (0, 95), 89: (0, 85), 33: (0, 96), 11: (0, 103)}, 228: {10: (1, {'@': 146}), 60: (1, {'@': 146}), 1: (1, {'@': 146}), 2: (1, {'@': 146}), 3: (1, {'@': 146}), 5: (1, {'@': 146}), 6: (1, {'@': 146}), 7: (1, {'@': 146}), 8: (1, {'@': 146}), 11: (1, {'@': 146}), 30: (1, {'@': 146}), 31: (1, {'@': 146}), 12: (1, {'@': 146}), 13: (1, {'@': 146}), 14: (1, {'@': 146}), 15: (1, {'@': 146}), 17: (1, {'@': 146})}, 229: {9: (0, 17), 26: (1, {'@': 147}), 27: (1, {'@': 147}), 18: (1, {'@': 147}), 19: (1, {'@': 147}), 29: (1, {'@': 147}), 0: (1, {'@': 147}), 1: (1, {'@': 147}), 5: (1, {'@': 147}), 3: (1, {'@': 147}), 2: (1, {'@': 147}), 6: (1, {'@': 147}), 4: (1, {'@': 147}), 7: (1, {'@': 147}), 8: (1, {'@': 147}), 10: (1, {'@': 147}), 30: (1, {'@': 147}), 11: (1, {'@': 147}), 31: (1, {'@': 147}), 12: (1, {'@': 147}), 13: (1, {'@': 147}), 14: (1, {'@': 147}), 32: (1, {'@': 147}), 15: (1, {'@': 147}), 28: (1, {'@': 147}), 16: (1, {'@': 147}), 17: (1, {'@': 147})}, 230: {0: (1, {'@': 148}), 9: (1, {'@': 148}), 4: (1, {'@': 148}), 28: (1, {'@': 148}), 16: (1, {'@': 148}), 11: (1, {'@': 148}), 1: (1, {'@': 148}), 2: (1, {'@': 148}), 3: (1, {'@': 148}), 5: (1, {'@': 148}), 6: (1, {'@': 148}), 7: (1, {'@': 148}), 8: (1, {'@': 148}), 10: (1, {'@': 148}), 12: (1, {'@': 148}), 13: (1, {'@': 148}), 14: (1, {'@': 148}), 15: (1, {'@': 148}), 17: (1, {'@': 148}), 30: (1, {'@': 148}), 31: (1, {'@': 148}), 26: (1, {'@': 148}), 18: (1, {'@': 148}), 27: (1, {'@': 148}), 19: (1, {'@': 148}), 29: (1, {'@': 148}), 32: (1, {'@': 148})}, 231: {17: (1, {'@': 149}), 1: (1, {'@': 149}), 12: (1, {'@': 149}), 13: (1, {'@': 149}), 8: (1, {'@': 149}), 14: (1, {'@': 149}), 87: (1, {'@': 149}), 52: (1, {'@': 149}), 11: (1, {'@': 149})}, 232: {58: (0, 603), 10: (0, 48), 14: (0, 415), 39: (0, 605), 20: (0, 615)}, 233: {12: (1, {'@': 150}), 1: (1, {'@': 150}), 2: (1, {'@': 150}), 3: (1, {'@': 150}), 5: (1, {'@': 150}), 13: (1, {'@': 150}), 7: (1, {'@': 150}), 8: (1, {'@': 150}), 14: (1, {'@': 150}), 10: (1, {'@': 150}), 17: (1, {'@': 150}), 11: (1, {'@': 150})}, 234: {12: (1, {'@': 151}), 1: (1, {'@': 151}), 2: (1, {'@': 151}), 3: (1, {'@': 151}), 5: (1, {'@': 151}), 6: (1, {'@': 151}), 13: (1, {'@': 151}), 7: (1, {'@': 151}), 8: (1, {'@': 151}), 14: (1, {'@': 151}), 15: (1, {'@': 151}), 10: (1, {'@': 151}), 17: (1, {'@': 151}), 11: (1, {'@': 151})}, 235: {10: (0, 63), 33: (0, 69), 34: (0, 75), 19: (1, {'@': 152}), 18: (1, {'@': 152}), 0: (1, {'@': 152}), 4: (1, {'@': 152}), 9: (1, {'@': 152}), 28: (1, {'@': 152}), 16: (1, {'@': 152}), 11: (1, {'@': 152})}, 236: {0: (1, {'@': 153}), 9: (1, {'@': 153}), 4: (1, {'@': 153}), 28: (1, {'@': 153}), 16: (1, {'@': 153}), 11: (1, {'@': 153}), 1: (1, {'@': 153}), 2: (1, {'@': 153}), 3: (1, {'@': 153}), 5: (1, {'@': 153}), 6: (1, {'@': 153}), 7: (1, {'@': 153}), 8: (1, {'@': 153}), 10: (1, {'@': 153}), 12: (1, {'@': 153}), 13: (1, {'@': 153}), 14: (1, {'@': 153}), 15: (1, {'@': 153}), 17: (1, {'@': 153}), 30: (1, {'@': 153}), 31: (1, {'@': 153}), 26: (1, {'@': 153}), 18: (1, {'@': 153}), 27: (1, {'@': 153}), 19: (1, {'@': 153}), 29: (1, {'@': 153}), 32: (1, {'@': 153})}, 237: {14: (0, 415), 39: (0, 605), 10: (0, 636), 20: (0, 615), 58: (0, 118)}, 238: {90: (0, 240), 18: (0, 432), 19: (0, 436)}, 239: {10: (1, {'@': 154}), 60: (1, {'@': 154}), 1: (1, {'@': 154}), 2: (1, {'@': 154}), 3: (1, {'@': 154}), 5: (1, {'@': 154}), 6: (1, {'@': 154}), 7: (1, {'@': 154}), 8: (1, {'@': 154}), 11: (1, {'@': 154}), 30: (1, {'@': 154}), 31: (1, {'@': 154}), 12: (1, {'@': 154}), 13: (1, {'@': 154}), 14: (1, {'@': 154}), 15: (1, {'@': 154}), 17: (1, {'@': 154})}, 240: {18: (0, 631), 19: (0, 158)}, 241: {11: (0, 82), 42: (0, 160), 4: (0, 97), 9: (0, 16), 16: (0, 21), 0: (0, 25), 28: (0, 304)}, 242: {10: (0, 71), 14: (0, 415), 39: (0, 605), 20: (0, 615), 58: (0, 127)}, 243: {10: (1, {'@': 155}), 60: (1, {'@': 155}), 1: (1, {'@': 155}), 2: (1, {'@': 155}), 3: (1, {'@': 155}), 5: (1, {'@': 155}), 6: (1, {'@': 155}), 7: (1, {'@': 155}), 8: (1, {'@': 155}), 11: (1, {'@': 155}), 30: (1, {'@': 155}), 31: (1, {'@': 155}), 12: (1, {'@': 155}), 13: (1, {'@': 155}), 14: (1, {'@': 155}), 15: (1, {'@': 155}), 17: (1, {'@': 155})}, 244: {9: (1, {'@': 156}), 0: (1, {'@': 156}), 4: (1, {'@': 156}), 18: (1, {'@': 156}), 19: (1, {'@': 156}), 28: (1, {'@': 156}), 16: (1, {'@': 156}), 11: (1, {'@': 156})}, 245: {1: (0, 219), 20: (0, 500), 22: (0, 5), 39: (0, 148), 57: (0, 423), 13: (0, 528), 12: (0, 425), 36: (0, 427), 14: (0, 415)}, 246: {9: (0, 37), 19: (1, {'@': 157}), 18: (1, {'@': 157}), 0: (1, {'@': 157}), 4: (1, {'@': 157}), 28: (1, {'@': 157}), 16: (1, {'@': 157}), 11: (1, {'@': 157})}, 247: {23: (0, 229), 1: (0, 210), 20: (0, 249), 64: (0, 405), 8: (0, 418), 13: (0, 419), 11: (0, 420), 12: (0, 620), 66: (0, 66), 17: (0, 409), 41: (0, 421), 10: (0, 132), 68: (0, 422), 22: (0, 3), 14: (0, 415)}, 248: {61: (0, 611), 62: (0, 487), 77: (0, 635), 52: (0, 150), 76: (0, 86)}, 249: {10: (0, 63), 33: (0, 69), 34: (0, 75), 26: (1, {'@': 158}), 27: (1, {'@': 158}), 18: (1, {'@': 158}), 19: (1, {'@': 158}), 29: (1, {'@': 158}), 0: (1, {'@': 158}), 1: (1, {'@': 158}), 5: (1, {'@': 158}), 3: (1, {'@': 158}), 2: (1, {'@': 158}), 6: (1, {'@': 158}), 4: (1, {'@': 158}), 7: (1, {'@': 158}), 8: (1, {'@': 158}), 9: (1, {'@': 158}), 30: (1, {'@': 158}), 11: (1, {'@': 158}), 31: (1, {'@': 158}), 12: (1, {'@': 158}), 13: (1, {'@': 158}), 14: (1, {'@': 158}), 32: (1, {'@': 158}), 15: (1, {'@': 158}), 28: (1, {'@': 158}), 16: (1, {'@': 158}), 17: (1, {'@': 158})}, 250: {11: (0, 82), 42: (0, 160), 4: (0, 97), 9: (0, 16), 16: (0, 21), 0: (0, 25), 19: (1, {'@': 159}), 18: (1, {'@': 159}), 28: (1, {'@': 159})}, 251: {10: (1, {'@': 160}), 60: (1, {'@': 160}), 1: (1, {'@': 160}), 2: (1, {'@': 160}), 3: (1, {'@': 160}), 5: (1, {'@': 160}), 6: (1, {'@': 160}), 7: (1, {'@': 160}), 8: (1, {'@': 160}), 11: (1, {'@': 160}), 30: (1, {'@': 160}), 31: (1, {'@': 160}), 12: (1, {'@': 160}), 13: (1, {'@': 160}), 14: (1, {'@': 160}), 15: (1, {'@': 160}), 17: (1, {'@': 160})}, 252: {20: (0, 587), 1: (0, 593), 14: (0, 415), 10: (0, 598)}, 253: {10: (0, 41), 33: (0, 44), 34: (0, 49), 9: (0, 285)}, 254: {10: (1, {'@': 161}), 60: (1, {'@': 161}), 1: (1, {'@': 161}), 2: (1, {'@': 161}), 3: (1, {'@': 161}), 5: (1, {'@': 161}), 6: (1, {'@': 161}), 7: (1, {'@': 161}), 8: (1, {'@': 161}), 11: (1, {'@': 161}), 30: (1, {'@': 161}), 31: (1, {'@': 161}), 12: (1, {'@': 161}), 13: (1, {'@': 161}), 14: (1, {'@': 161}), 15: (1, {'@': 161}), 17: (1, {'@': 161})}, 255: {17: (1, {'@': 162}), 47: (1, {'@': 162})}, 256: {0: (1, {'@': 163}), 9: (1, {'@': 163}), 4: (1, {'@': 163}), 28: (1, {'@': 163}), 16: (1, {'@': 163}), 11: (1, {'@': 163}), 1: (1, {'@': 163}), 2: (1, {'@': 163}), 3: (1, {'@': 163}), 5: (1, {'@': 163}), 6: (1, {'@': 163}), 7: (1, {'@': 163}), 8: (1, {'@': 163}), 10: (1, {'@': 163}), 12: (1, {'@': 163}), 13: (1, {'@': 163}), 14: (1, {'@': 163}), 15: (1, {'@': 163}), 17: (1, {'@': 163}), 30: (1, {'@': 163}), 31: (1, {'@': 163}), 26: (1, {'@': 163}), 18: (1, {'@': 163}), 27: (1, {'@': 163}), 19: (1, {'@': 163}), 29: (1, {'@': 163}), 32: (1, {'@': 163})}, 257: {19: (1, {'@': 164}), 18: (1, {'@': 164})}, 258: {34: (0, 156)}, 259: {0: (1, {'@': 165}), 9: (1, {'@': 165}), 4: (1, {'@': 165}), 28: (1, {'@': 165}), 16: (1, {'@': 165}), 11: (1, {'@': 165}), 1: (1, {'@': 165}), 2: (1, {'@': 165}), 3: (1, {'@': 165}), 5: (1, {'@': 165}), 6: (1, {'@': 165}), 7: (1, {'@': 165}), 8: (1, {'@': 165}), 10: (1, {'@': 165}), 12: (1, {'@': 165}), 13: (1, {'@': 165}), 14: (1, {'@': 165}), 15: (1, {'@': 165}), 17: (1, {'@': 165}), 30: (1, {'@': 165}), 31: (1, {'@': 165}), 26: (1, {'@': 165}), 18: (1, {'@': 165}), 27: (1, {'@': 165}), 19: (1, {'@': 165}), 29: (1, {'@': 165}), 32: (1, {'@': 165})}, 260: {0: (1, {'@': 166}), 9: (1, {'@': 166}), 4: (1, {'@': 166}), 28: (1, {'@': 166}), 16: (1, {'@': 166}), 11: (1, {'@': 166}), 1: (1, {'@': 166}), 2: (1, {'@': 166}), 3: (1, {'@': 166}), 5: (1, {'@': 166}), 6: (1, {'@': 166}), 7: (1, {'@': 166}), 8: (1, {'@': 166}), 10: (1, {'@': 166}), 12: (1, {'@': 166}), 13: (1, {'@': 166}), 14: (1, {'@': 166}), 15: (1, {'@': 166}), 17: (1, {'@': 166}), 30: (1, {'@': 166}), 31: (1, {'@': 166}), 26: (1, {'@': 166}), 18: (1, {'@': 166}), 27: (1, {'@': 166}), 19: (1, {'@': 166}), 29: (1, {'@': 166}), 32: (1, {'@': 166})}, 261: {1: (0, 287), 20: (0, 235), 13: (0, 283), 63: (0, 309), 55: (0, 246), 53: (0, 250), 91: (0, 313), 17: (0, 300), 48: (0, 302), 54: (0, 306), 22: (0, 310), 50: (0, 312), 49: (0, 315), 14: (0, 415), 8: (0, 320), 12: (0, 325), 11: (0, 328)}, 262: {0: (1, {'@': 167}), 9: (1, {'@': 167}), 4: (1, {'@': 167}), 28: (1, {'@': 167}), 16: (1, {'@': 167}), 11: (1, {'@': 167}), 1: (1, {'@': 167}), 2: (1, {'@': 167}), 3: (1, {'@': 167}), 5: (1, {'@': 167}), 6: (1, {'@': 167}), 7: (1, {'@': 167}), 8: (1, {'@': 167}), 10: (1, {'@': 167}), 12: (1, {'@': 167}), 13: (1, {'@': 167}), 14: (1, {'@': 167}), 15: (1, {'@': 167}), 17: (1, {'@': 167}), 30: (1, {'@': 167}), 31: (1, {'@': 167}), 26: (1, {'@': 167}), 18: (1, {'@': 167}), 27: (1, {'@': 167}), 19: (1, {'@': 167}), 29: (1, {'@': 167}), 32: (1, {'@': 167})}, 263: {14: (0, 415), 20: (0, 568), 1: (0, 574)}, 264: {19: (0, 316)}, 265: {0: (1, {'@': 168}), 9: (1, {'@': 168}), 4: (1, {'@': 168}), 28: (1, {'@': 168}), 16: (1, {'@': 168}), 11: (1, {'@': 168}), 1: (1, {'@': 168}), 2: (1, {'@': 168}), 3: (1, {'@': 168}), 5: (1, {'@': 168}), 6: (1, {'@': 168}), 7: (1, {'@': 168}), 8: (1, {'@': 168}), 10: (1, {'@': 168}), 12: (1, {'@': 168}), 13: (1, {'@': 168}), 14: (1, {'@': 168}), 15: (1, {'@': 168}), 17: (1, {'@': 168}), 30: (1, {'@': 168}), 31: (1, {'@': 168}), 26: (1, {'@': 168}), 18: (1, {'@': 168}), 27: (1, {'@': 168}), 19: (1, {'@': 168}), 29: (1, {'@': 168}), 32: (1, {'@': 168})}, 266: {0: (1, {'@': 169}), 9: (1, {'@': 169}), 4: (1, {'@': 169}), 28: (1, {'@': 169}), 16: (1, {'@': 169}), 11: (1, {'@': 169}), 1: (1, {'@': 169}), 2: (1, {'@': 169}), 3: (1, {'@': 169}), 5: (1, {'@': 169}), 6: (1, {'@': 169}), 7: (1, {'@': 169}), 8: (1, {'@': 169}), 10: (1, {'@': 169}), 12: (1, {'@': 169}), 13: (1, {'@': 169}), 14: (1, {'@': 169}), 15: (1, {'@': 169}), 17: (1, {'@': 169}), 30: (1, {'@': 169}), 31: (1, {'@': 169}), 26: (1, {'@': 169}), 18: (1, {'@': 169}), 27: (1, {'@': 169}), 19: (1, {'@': 169}), 29: (1, {'@': 169}), 32: (1, {'@': 169})}, 267: {0: (1, {'@': 170}), 9: (1, {'@': 170}), 4: (1, {'@': 170}), 28: (1, {'@': 170}), 16: (1, {'@': 170}), 11: (1, {'@': 170}), 1: (1, {'@': 170}), 2: (1, {'@': 170}), 3: (1, {'@': 170}), 5: (1, {'@': 170}), 6: (1, {'@': 170}), 7: (1, {'@': 170}), 8: (1, {'@': 170}), 10: (1, {'@': 170}), 12: (1, {'@': 170}), 13: (1, {'@': 170}), 14: (1, {'@': 170}), 15: (1, {'@': 170}), 17: (1, {'@': 170}), 30: (1, {'@': 170}), 31: (1, {'@': 170}), 26: (1, {'@': 170}), 18: (1, {'@': 170}), 27: (1, {'@': 170}), 19: (1, {'@': 170}), 29: (1, {'@': 170}), 32: (1, {'@': 170})}, 268: {19: (0, 319)}, 269: {1: (0, 253), 20: (0, 500), 53: (0, 165), 13: (0, 283), 39: (0, 203), 17: (0, 300), 48: (0, 302), 52: (0, 209), 54: (0, 306), 22: (0, 310), 50: (0, 312), 49: (0, 315), 55: (0, 317), 14: (0, 415), 8: (0, 320), 12: (0, 325), 11: (0, 328)}, 270: {0: (1, {'@': 171}), 9: (1, {'@': 171}), 4: (1, {'@': 171}), 28: (1, {'@': 171}), 16: (1, {'@': 171}), 11: (1, {'@': 171}), 1: (1, {'@': 171}), 2: (1, {'@': 171}), 3: (1, {'@': 171}), 5: (1, {'@': 171}), 6: (1, {'@': 171}), 7: (1, {'@': 171}), 8: (1, {'@': 171}), 10: (1, {'@': 171}), 12: (1, {'@': 171}), 13: (1, {'@': 171}), 14: (1, {'@': 171}), 15: (1, {'@': 171}), 17: (1, {'@': 171}), 30: (1, {'@': 171}), 31: (1, {'@': 171}), 26: (1, {'@': 171}), 18: (1, {'@': 171}), 27: (1, {'@': 171}), 19: (1, {'@': 171}), 29: (1, {'@': 171}), 32: (1, {'@': 171})}, 271: {0: (1, {'@': 172}), 4: (1, {'@': 172}), 18: (1, {'@': 172}), 19: (1, {'@': 172}), 9: (1, {'@': 172}), 28: (1, {'@': 172}), 16: (1, {'@': 172}), 11: (1, {'@': 172})}, 272: {0: (1, {'@': 173}), 9: (1, {'@': 173}), 4: (1, {'@': 173}), 28: (1, {'@': 173}), 16: (1, {'@': 173}), 11: (1, {'@': 173}), 1: (1, {'@': 173}), 2: (1, {'@': 173}), 3: (1, {'@': 173}), 5: (1, {'@': 173}), 6: (1, {'@': 173}), 7: (1, {'@': 173}), 8: (1, {'@': 173}), 10: (1, {'@': 173}), 12: (1, {'@': 173}), 13: (1, {'@': 173}), 14: (1, {'@': 173}), 15: (1, {'@': 173}), 17: (1, {'@': 173}), 30: (1, {'@': 173}), 31: (1, {'@': 173}), 26: (1, {'@': 173}), 18: (1, {'@': 173}), 27: (1, {'@': 173}), 19: (1, {'@': 173}), 29: (1, {'@': 173}), 32: (1, {'@': 173})}, 273: {9: (1, {'@': 174}), 0: (1, {'@': 174}), 4: (1, {'@': 174}), 18: (1, {'@': 174}), 19: (1, {'@': 174}), 28: (1, {'@': 174}), 16: (1, {'@': 174}), 11: (1, {'@': 174})}, 274: {11: (0, 82), 42: (0, 160), 4: (0, 97), 9: (0, 16), 16: (0, 21), 0: (0, 25), 28: (0, 321)}, 275: {10: (1, {'@': 175}), 60: (1, {'@': 175}), 1: (1, {'@': 175}), 2: (1, {'@': 175}), 3: (1, {'@': 175}), 5: (1, {'@': 175}), 6: (1, {'@': 175}), 7: (1, {'@': 175}), 8: (1, {'@': 175}), 11: (1, {'@': 175}), 30: (1, {'@': 175}), 31: (1, {'@': 175}), 12: (1, {'@': 175}), 13: (1, {'@': 175}), 14: (1, {'@': 175}), 15: (1, {'@': 175}), 17: (1, {'@': 175})}, 276: {14: (0, 415), 20: (0, 579), 1: (0, 583)}, 277: {1: (1, {'@': 176}), 2: (1, {'@': 176}), 3: (1, {'@': 176}), 5: (1, {'@': 176}), 6: (1, {'@': 176}), 7: (1, {'@': 176}), 8: (1, {'@': 176}), 10: (1, {'@': 176}), 11: (1, {'@': 176}), 30: (1, {'@': 176}), 31: (1, {'@': 176}), 12: (1, {'@': 176}), 13: (1, {'@': 176}), 14: (1, {'@': 176}), 15: (1, {'@': 176}), 17: (1, {'@': 176})}, 278: {47: (0, 288), 28: (0, 220)}, 279: {10: (1, {'@': 177}), 60: (1, {'@': 177}), 1: (1, {'@': 177}), 2: (1, {'@': 177}), 3: (1, {'@': 177}), 5: (1, {'@': 177}), 6: (1, {'@': 177}), 7: (1, {'@': 177}), 8: (1, {'@': 177}), 11: (1, {'@': 177}), 30: (1, {'@': 177}), 31: (1, {'@': 177}), 12: (1, {'@': 177}), 13: (1, {'@': 177}), 14: (1, {'@': 177}), 15: (1, {'@': 177}), 17: (1, {'@': 177})}, 280: {11: (0, 82), 42: (0, 160), 4: (0, 97), 9: (0, 16), 16: (0, 21), 0: (0, 25), 28: (0, 323)}, 281: {47: (0, 372), 28: (0, 228)}, 282: {0: (1, {'@': 178}), 9: (1, {'@': 178}), 4: (1, {'@': 178}), 28: (1, {'@': 178}), 16: (1, {'@': 178}), 11: (1, {'@': 178}), 1: (1, {'@': 178}), 2: (1, {'@': 178}), 3: (1, {'@': 178}), 5: (1, {'@': 178}), 6: (1, {'@': 178}), 7: (1, {'@': 178}), 8: (1, {'@': 178}), 10: (1, {'@': 178}), 12: (1, {'@': 178}), 13: (1, {'@': 178}), 14: (1, {'@': 178}), 15: (1, {'@': 178}), 17: (1, {'@': 178}), 30: (1, {'@': 178}), 31: (1, {'@': 178}), 26: (1, {'@': 178}), 18: (1, {'@': 178}), 27: (1, {'@': 178}), 19: (1, {'@': 178}), 29: (1, {'@': 178}), 32: (1, {'@': 178})}, 283: {1: (0, 287), 20: (0, 235), 91: (0, 238), 13: (0, 283), 55: (0, 246), 53: (0, 250), 17: (0, 300), 48: (0, 302), 54: (0, 306), 22: (0, 7), 50: (0, 312), 49: (0, 315), 14: (0, 415), 8: (0, 320), 12: (0, 325), 11: (0, 328)}, 284: {0: (1, {'@': 179}), 9: (1, {'@': 179}), 4: (1, {'@': 179}), 28: (1, {'@': 179}), 16: (1, {'@': 179}), 11: (1, {'@': 179}), 1: (1, {'@': 179}), 2: (1, {'@': 179}), 3: (1, {'@': 179}), 5: (1, {'@': 179}), 6: (1, {'@': 179}), 7: (1, {'@': 179}), 8: (1, {'@': 179}), 10: (1, {'@': 179}), 12: (1, {'@': 179}), 13: (1, {'@': 179}), 14: (1, {'@': 179}), 15: (1, {'@': 179}), 17: (1, {'@': 179}), 30: (1, {'@': 179}), 31: (1, {'@': 179}), 26: (1, {'@': 179}), 18: (1, {'@': 179}), 27: (1, {'@': 179}), 19: (1, {'@': 179}), 29: (1, {'@': 179}), 32: (1, {'@': 179})}, 285: {1: (0, 219), 20: (0, 500), 13: (0, 283), 48: (0, 596), 22: (0, 324), 12: (0, 327), 49: (0, 329), 39: (0, 333), 51: (0, 337), 14: (0, 415), 50: (0, 341)}, 286: {19: (1, {'@': 180}), 18: (1, {'@': 180})}, 287: {10: (0, 41), 33: (0, 44), 34: (0, 49), 9: (0, 285), 19: (1, {'@': 181}), 18: (1, {'@': 181}), 0: (1, {'@': 181}), 4: (1, {'@': 181}), 28: (1, {'@': 181}), 16: (1, {'@': 181}), 11: (1, {'@': 181})}, 288: {1: (0, 253), 20: (0, 500), 13: (0, 283), 10: (0, 424), 53: (0, 426), 17: (0, 300), 48: (0, 302), 54: (0, 306), 22: (0, 310), 50: (0, 312), 49: (0, 315), 55: (0, 317), 14: (0, 415), 8: (0, 320), 12: (0, 325), 11: (0, 328)}, 289: {0: (1, {'@': 182}), 9: (1, {'@': 182}), 4: (1, {'@': 182}), 28: (1, {'@': 182}), 16: (1, {'@': 182}), 11: (1, {'@': 182}), 1: (1, {'@': 182}), 2: (1, {'@': 182}), 3: (1, {'@': 182}), 5: (1, {'@': 182}), 6: (1, {'@': 182}), 7: (1, {'@': 182}), 8: (1, {'@': 182}), 10: (1, {'@': 182}), 12: (1, {'@': 182}), 13: (1, {'@': 182}), 14: (1, {'@': 182}), 15: (1, {'@': 182}), 17: (1, {'@': 182}), 30: (1, {'@': 182}), 31: (1, {'@': 182}), 26: (1, {'@': 182}), 18: (1, {'@': 182}), 27: (1, {'@': 182}), 19: (1, {'@': 182}), 29: (1, {'@': 182}), 32: (1, {'@': 182})}, 290: {19: (0, 326)}, 291: {39: (0, 128)}, 292: {14: (0, 415), 1: (0, 457), 20: (0, 607)}, 293: {0: (1, {'@': 183}), 9: (1, {'@': 183}), 4: (1, {'@': 183}), 28: (1, {'@': 183}), 16: (1, {'@': 183}), 11: (1, {'@': 183}), 18: (1, {'@': 183}), 19: (1, {'@': 183})}, 294: {0: (1, {'@': 184}), 4: (1, {'@': 184}), 18: (1, {'@': 184}), 19: (1, {'@': 184}), 9: (1, {'@': 184}), 28: (1, {'@': 184}), 16: (1, {'@': 184}), 11: (1, {'@': 184})}, 295: {0: (1, {'@': 185}), 9: (1, {'@': 185}), 4: (1, {'@': 185}), 28: (1, {'@': 185}), 16: (1, {'@': 185}), 11: (1, {'@': 185}), 18: (1, {'@': 185}), 19: (1, {'@': 185})}, 296: {28: (0, 404), 11: (0, 82), 42: (0, 160), 4: (0, 97), 9: (0, 16), 16: (0, 21), 0: (0, 25)}, 297: {39: (0, 133)}, 298: {0: (1, {'@': 186}), 9: (1, {'@': 186}), 4: (1, {'@': 186}), 28: (1, {'@': 186}), 16: (1, {'@': 186}), 11: (1, {'@': 186}), 1: (1, {'@': 186}), 2: (1, {'@': 186}), 3: (1, {'@': 186}), 5: (1, {'@': 186}), 6: (1, {'@': 186}), 7: (1, {'@': 186}), 8: (1, {'@': 186}), 10: (1, {'@': 186}), 12: (1, {'@': 186}), 13: (1, {'@': 186}), 14: (1, {'@': 186}), 15: (1, {'@': 186}), 17: (1, {'@': 186}), 30: (1, {'@': 186}), 31: (1, {'@': 186}), 26: (1, {'@': 186}), 18: (1, {'@': 186}), 27: (1, {'@': 186}), 19: (1, {'@': 186}), 29: (1, {'@': 186}), 32: (1, {'@': 186})}, 299: {23: (0, 229), 1: (0, 210), 20: (0, 249), 64: (0, 405), 8: (0, 418), 13: (0, 419), 11: (0, 420), 12: (0, 620), 17: (0, 182), 66: (0, 525), 41: (0, 421), 65: (0, 331), 67: (0, 530), 68: (0, 422), 22: (0, 3), 14: (0, 415)}, 300: {39: (0, 393), 52: (0, 32)}, 301: {0: (1, {'@': 187}), 9: (1, {'@': 187}), 4: (1, {'@': 187}), 28: (1, {'@': 187}), 16: (1, {'@': 187}), 11: (1, {'@': 187}), 1: (1, {'@': 187}), 2: (1, {'@': 187}), 3: (1, {'@': 187}), 5: (1, {'@': 187}), 6: (1, {'@': 187}), 7: (1, {'@': 187}), 8: (1, {'@': 187}), 10: (1, {'@': 187}), 12: (1, {'@': 187}), 13: (1, {'@': 187}), 14: (1, {'@': 187}), 15: (1, {'@': 187}), 17: (1, {'@': 187}), 30: (1, {'@': 187}), 31: (1, {'@': 187}), 26: (1, {'@': 187}), 18: (1, {'@': 187}), 27: (1, {'@': 187}), 19: (1, {'@': 187}), 29: (1, {'@': 187}), 32: (1, {'@': 187})}, 302: {0: (1, {'@': 188}), 4: (1, {'@': 188}), 9: (1, {'@': 188}), 28: (1, {'@': 188}), 16: (1, {'@': 188}), 11: (1, {'@': 188}), 18: (1, {'@': 188}), 19: (1, {'@': 188})}, 303: {0: (1, {'@': 189}), 9: (1, {'@': 189}), 4: (1, {'@': 189}), 28: (1, {'@': 189}), 16: (1, {'@': 189}), 11: (1, {'@': 189}), 1: (1, {'@': 189}), 2: (1, {'@': 189}), 3: (1, {'@': 189}), 5: (1, {'@': 189}), 6: (1, {'@': 189}), 7: (1, {'@': 189}), 8: (1, {'@': 189}), 10: (1, {'@': 189}), 12: (1, {'@': 189}), 13: (1, {'@': 189}), 14: (1, {'@': 189}), 15: (1, {'@': 189}), 17: (1, {'@': 189}), 30: (1, {'@': 189}), 31: (1, {'@': 189}), 26: (1, {'@': 189}), 18: (1, {'@': 189}), 27: (1, {'@': 189}), 19: (1, {'@': 189}), 29: (1, {'@': 189}), 32: (1, {'@': 189})}, 304: {10: (1, {'@': 190}), 60: (1, {'@': 190}), 1: (1, {'@': 190}), 2: (1, {'@': 190}), 3: (1, {'@': 190}), 5: (1, {'@': 190}), 6: (1, {'@': 190}), 7: (1, {'@': 190}), 8: (1, {'@': 190}), 11: (1, {'@': 190}), 30: (1, {'@': 190}), 31: (1, {'@': 190}), 12: (1, {'@': 190}), 13: (1, {'@': 190}), 14: (1, {'@': 190}), 15: (1, {'@': 190}), 17: (1, {'@': 190})}, 305: {10: (1, {'@': 191}), 60: (1, {'@': 191}), 1: (1, {'@': 191}), 2: (1, {'@': 191}), 3: (1, {'@': 191}), 5: (1, {'@': 191}), 6: (1, {'@': 191}), 7: (1, {'@': 191}), 8: (1, {'@': 191}), 11: (1, {'@': 191}), 30: (1, {'@': 191}), 31: (1, {'@': 191}), 12: (1, {'@': 191}), 13: (1, {'@': 191}), 14: (1, {'@': 191}), 15: (1, {'@': 191}), 17: (1, {'@': 191})}, 306: {0: (1, {'@': 192}), 4: (1, {'@': 192}), 9: (1, {'@': 192}), 28: (1, {'@': 192}), 16: (1, {'@': 192}), 11: (1, {'@': 192}), 18: (1, {'@': 192}), 19: (1, {'@': 192})}, 307: {10: (1, {'@': 193}), 60: (1, {'@': 193}), 1: (1, {'@': 193}), 2: (1, {'@': 193}), 3: (1, {'@': 193}), 5: (1, {'@': 193}), 6: (1, {'@': 193}), 7: (1, {'@': 193}), 8: (1, {'@': 193}), 11: (1, {'@': 193}), 30: (1, {'@': 193}), 31: (1, {'@': 193}), 12: (1, {'@': 193}), 13: (1, {'@': 193}), 14: (1, {'@': 193}), 15: (1, {'@': 193}), 17: (1, {'@': 193})}, 308: {1: (0, 253), 20: (0, 500), 13: (0, 283), 53: (0, 612), 17: (0, 300), 10: (0, 619), 48: (0, 302), 54: (0, 306), 22: (0, 310), 50: (0, 312), 49: (0, 315), 55: (0, 317), 14: (0, 415), 8: (0, 320), 12: (0, 325), 11: (0, 328)}, 309: {19: (0, 334)}, 310: {0: (1, {'@': 48}), 4: (1, {'@': 48}), 9: (1, {'@': 48}), 28: (1, {'@': 48}), 16: (1, {'@': 48}), 11: (1, {'@': 48}), 18: (1, {'@': 48}), 19: (1, {'@': 48})}, 311: {1: (0, 287), 20: (0, 235), 13: (0, 283), 55: (0, 246), 53: (0, 250), 17: (0, 300), 91: (0, 68), 63: (0, 268), 48: (0, 302), 54: (0, 306), 22: (0, 310), 50: (0, 312), 49: (0, 315), 14: (0, 415), 8: (0, 320), 12: (0, 325), 11: (0, 328)}, 312: {0: (1, {'@': 194}), 4: (1, {'@': 194}), 9: (1, {'@': 194}), 28: (1, {'@': 194}), 16: (1, {'@': 194}), 11: (1, {'@': 194}), 18: (1, {'@': 194}), 19: (1, {'@': 194})}, 313: {19: (1, {'@': 195}), 18: (1, {'@': 195})}, 314: {10: (1, {'@': 196}), 60: (1, {'@': 196}), 1: (1, {'@': 196}), 2: (1, {'@': 196}), 3: (1, {'@': 196}), 5: (1, {'@': 196}), 6: (1, {'@': 196}), 7: (1, {'@': 196}), 8: (1, {'@': 196}), 11: (1, {'@': 196}), 30: (1, {'@': 196}), 31: (1, {'@': 196}), 12: (1, {'@': 196}), 13: (1, {'@': 196}), 14: (1, {'@': 196}), 15: (1, {'@': 196}), 17: (1, {'@': 196})}, 315: {9: (0, 172), 0: (1, {'@': 197}), 4: (1, {'@': 197}), 28: (1, {'@': 197}), 16: (1, {'@': 197}), 11: (1, {'@': 197}), 18: (1, {'@': 197}), 19: (1, {'@': 197})}, 316: {0: (1, {'@': 198}), 4: (1, {'@': 198}), 18: (1, {'@': 198}), 19: (1, {'@': 198}), 9: (1, {'@': 198}), 28: (1, {'@': 198}), 16: (1, {'@': 198}), 11: (1, {'@': 198})}, 317: {9: (0, 37)}, 318: {1: (0, 253), 20: (0, 500), 10: (0, 81), 13: (0, 283), 53: (0, 629), 17: (0, 300), 48: (0, 302), 54: (0, 306), 22: (0, 310), 50: (0, 312), 49: (0, 315), 55: (0, 317), 14: (0, 415), 8: (0, 320), 12: (0, 325), 11: (0, 328)}, 319: {0: (1, {'@': 199}), 4: (1, {'@': 199}), 18: (1, {'@': 199}), 19: (1, {'@': 199}), 9: (1, {'@': 199}), 28: (1, {'@': 199}), 16: (1, {'@': 199}), 11: (1, {'@': 199})}, 320: {1: (0, 287), 20: (0, 235), 13: (0, 283), 55: (0, 246), 53: (0, 250), 17: (0, 300), 48: (0, 302), 54: (0, 306), 22: (0, 310), 91: (0, 348), 50: (0, 312), 49: (0, 315), 14: (0, 415), 8: (0, 320), 12: (0, 325), 11: (0, 328)}, 321: {9: (1, {'@': 200}), 0: (1, {'@': 200}), 4: (1, {'@': 200}), 18: (1, {'@': 200}), 19: (1, {'@': 200}), 28: (1, {'@': 200}), 16: (1, {'@': 200}), 11: (1, {'@': 200})}, 322: {0: (1, {'@': 201}), 9: (1, {'@': 201}), 4: (1, {'@': 201}), 28: (1, {'@': 201}), 16: (1, {'@': 201}), 11: (1, {'@': 201}), 1: (1, {'@': 201}), 2: (1, {'@': 201}), 3: (1, {'@': 201}), 5: (1, {'@': 201}), 6: (1, {'@': 201}), 7: (1, {'@': 201}), 8: (1, {'@': 201}), 10: (1, {'@': 201}), 12: (1, {'@': 201}), 13: (1, {'@': 201}), 14: (1, {'@': 201}), 15: (1, {'@': 201}), 17: (1, {'@': 201}), 30: (1, {'@': 201}), 31: (1, {'@': 201}), 26: (1, {'@': 201}), 18: (1, {'@': 201}), 27: (1, {'@': 201}), 19: (1, {'@': 201}), 29: (1, {'@': 201}), 32: (1, {'@': 201})}, 323: {9: (1, {'@': 202}), 0: (1, {'@': 202}), 4: (1, {'@': 202}), 18: (1, {'@': 202}), 19: (1, {'@': 202}), 28: (1, {'@': 202}), 16: (1, {'@': 202}), 11: (1, {'@': 202})}, 324: {0: (1, {'@': 203}), 4: (1, {'@': 203}), 18: (1, {'@': 203}), 19: (1, {'@': 203}), 9: (1, {'@': 203}), 28: (1, {'@': 203}), 16: (1, {'@': 203}), 11: (1, {'@': 203})}, 325: {0: (1, {'@': 204}), 4: (1, {'@': 204}), 9: (1, {'@': 204}), 28: (1, {'@': 204}), 16: (1, {'@': 204}), 11: (1, {'@': 204}), 18: (1, {'@': 204}), 19: (1, {'@': 204})}, 326: {0: (1, {'@': 205}), 9: (1, {'@': 205}), 4: (1, {'@': 205}), 28: (1, {'@': 205}), 16: (1, {'@': 205}), 11: (1, {'@': 205}), 18: (1, {'@': 205}), 19: (1, {'@': 205})}, 327: {0: (1, {'@': 206}), 4: (1, {'@': 206}), 18: (1, {'@': 206}), 19: (1, {'@': 206}), 9: (1, {'@': 206}), 28: (1, {'@': 206}), 16: (1, {'@': 206}), 11: (1, {'@': 206})}, 328: {1: (0, 287), 20: (0, 235), 13: (0, 283), 55: (0, 246), 53: (0, 250), 91: (0, 47), 17: (0, 300), 48: (0, 302), 54: (0, 306), 22: (0, 310), 50: (0, 312), 49: (0, 315), 14: (0, 415), 8: (0, 320), 12: (0, 325), 11: (0, 328)}, 329: {9: (0, 172), 0: (1, {'@': 207}), 4: (1, {'@': 207}), 18: (1, {'@': 207}), 19: (1, {'@': 207}), 28: (1, {'@': 207}), 16: (1, {'@': 207}), 11: (1, {'@': 207})}, 330: {11: (0, 82), 42: (0, 160), 4: (0, 97), 9: (0, 16), 28: (0, 476), 16: (0, 21), 0: (0, 25)}, 331: {26: (0, 338)}, 332: {62: (0, 213), 61: (0, 611), 52: (0, 150)}, 333: {0: (1, {'@': 208}), 9: (1, {'@': 208}), 4: (1, {'@': 208}), 28: (1, {'@': 208}), 16: (1, {'@': 208}), 11: (1, {'@': 208}), 18: (1, {'@': 208}), 19: (1, {'@': 208})}, 334: {0: (1, {'@': 209}), 4: (1, {'@': 209}), 18: (1, {'@': 209}), 19: (1, {'@': 209}), 9: (1, {'@': 209}), 28: (1, {'@': 209}), 16: (1, {'@': 209}), 11: (1, {'@': 209})}, 335: {12: (1, {'@': 210}), 1: (1, {'@': 210}), 2: (1, {'@': 210}), 3: (1, {'@': 210}), 5: (1, {'@': 210}), 6: (1, {'@': 210}), 13: (1, {'@': 210}), 7: (1, {'@': 210}), 8: (1, {'@': 210}), 14: (1, {'@': 210}), 15: (1, {'@': 210}), 10: (1, {'@': 210}), 17: (1, {'@': 210}), 11: (1, {'@': 210})}, 336: {34: (0, 72)}, 337: {0: (1, {'@': 211}), 9: (1, {'@': 211}), 4: (1, {'@': 211}), 28: (1, {'@': 211}), 16: (1, {'@': 211}), 11: (1, {'@': 211}), 18: (1, {'@': 211}), 19: (1, {'@': 211})}, 338: {27: (1, {'@': 212}), 18: (1, {'@': 212})}, 339: {0: (1, {'@': 213}), 9: (1, {'@': 213}), 4: (1, {'@': 213}), 28: (1, {'@': 213}), 16: (1, {'@': 213}), 11: (1, {'@': 213}), 18: (1, {'@': 213}), 19: (1, {'@': 213})}, 340: {19: (1, {'@': 214}), 18: (1, {'@': 214})}, 341: {0: (1, {'@': 215}), 4: (1, {'@': 215}), 18: (1, {'@': 215}), 19: (1, {'@': 215}), 9: (1, {'@': 215}), 28: (1, {'@': 215}), 16: (1, {'@': 215}), 11: (1, {'@': 215})}, 342: {69: (1, {'@': 216})}, 343: {69: (1, {'@': 217})}, 344: {10: (0, 63), 33: (0, 69), 34: (0, 75), 19: (1, {'@': 218}), 18: (1, {'@': 218}), 0: (1, {'@': 218}), 4: (1, {'@': 218}), 9: (1, {'@': 218}), 28: (1, {'@': 218}), 16: (1, {'@': 218}), 11: (1, {'@': 218})}, 345: {0: (0, 291), 9: (0, 297), 11: (0, 82), 42: (0, 360), 4: (0, 97), 16: (0, 364), 19: (1, {'@': 219}), 18: (1, {'@': 219}), 28: (1, {'@': 219})}, 346: {58: (0, 545), 39: (0, 605), 20: (0, 615), 14: (0, 415)}, 347: {58: (0, 559), 39: (0, 605), 20: (0, 615), 14: (0, 415)}, 348: {0: (1, {'@': 220}), 9: (1, {'@': 220}), 4: (1, {'@': 220}), 28: (1, {'@': 220}), 16: (1, {'@': 220}), 11: (1, {'@': 220}), 18: (1, {'@': 220}), 19: (1, {'@': 220})}, 349: {92: (0, 111), 18: (0, 113), 19: (0, 120)}, 350: {9: (1, {'@': 221}), 1: (1, {'@': 221}), 2: (1, {'@': 221}), 3: (1, {'@': 221}), 5: (1, {'@': 221}), 6: (1, {'@': 221}), 7: (1, {'@': 221}), 8: (1, {'@': 221}), 10: (1, {'@': 221}), 30: (1, {'@': 221}), 11: (1, {'@': 221}), 31: (1, {'@': 221}), 12: (1, {'@': 221}), 13: (1, {'@': 221}), 14: (1, {'@': 221}), 15: (1, {'@': 221}), 17: (1, {'@': 221}), 19: (1, {'@': 221}), 18: (1, {'@': 221}), 26: (1, {'@': 221}), 27: (1, {'@': 221}), 0: (1, {'@': 221}), 4: (1, {'@': 221}), 29: (1, {'@': 221}), 32: (1, {'@': 221}), 28: (1, {'@': 221}), 16: (1, {'@': 221})}, 351: {14: (0, 415), 39: (0, 605), 58: (0, 550), 20: (0, 615)}, 352: {27: (1, {'@': 222}), 18: (1, {'@': 222})}, 353: {69: (1, {'@': 223})}, 354: {0: (1, {'@': 224}), 9: (1, {'@': 224}), 4: (1, {'@': 224}), 28: (1, {'@': 224}), 16: (1, {'@': 224}), 11: (1, {'@': 224}), 18: (1, {'@': 224}), 19: (1, {'@': 224})}, 355: {19: (0, 374), 0: (1, {'@': 97}), 4: (1, {'@': 97}), 18: (1, {'@': 97}), 9: (1, {'@': 97}), 16: (1, {'@': 97}), 11: (1, {'@': 97})}, 356: {14: (0, 415), 39: (0, 605), 20: (0, 615), 58: (0, 554)}, 357: {0: (1, {'@': 225}), 9: (1, {'@': 225}), 4: (1, {'@': 225}), 28: (1, {'@': 225}), 16: (1, {'@': 225}), 11: (1, {'@': 225}), 1: (1, {'@': 225}), 2: (1, {'@': 225}), 3: (1, {'@': 225}), 5: (1, {'@': 225}), 6: (1, {'@': 225}), 7: (1, {'@': 225}), 8: (1, {'@': 225}), 10: (1, {'@': 225}), 12: (1, {'@': 225}), 13: (1, {'@': 225}), 14: (1, {'@': 225}), 15: (1, {'@': 225}), 17: (1, {'@': 225}), 30: (1, {'@': 225}), 31: (1, {'@': 225}), 26: (1, {'@': 225}), 18: (1, {'@': 225}), 27: (1, {'@': 225}), 19: (1, {'@': 225}), 29: (1, {'@': 225}), 32: (1, {'@': 225})}, 358: {9: (0, 368), 19: (1, {'@': 226}), 18: (1, {'@': 226}), 0: (1, {'@': 226}), 4: (1, {'@': 226}), 28: (1, {'@': 226}), 16: (1, {'@': 226}), 11: (1, {'@': 226})}, 359: {0: (1, {'@': 227}), 9: (1, {'@': 227}), 4: (1, {'@': 227}), 28: (1, {'@': 227}), 16: (1, {'@': 227}), 11: (1, {'@': 227}), 1: (1, {'@': 227}), 2: (1, {'@': 227}), 3: (1, {'@': 227}), 5: (1, {'@': 227}), 6: (1, {'@': 227}), 7: (1, {'@': 227}), 8: (1, {'@': 227}), 10: (1, {'@': 227}), 12: (1, {'@': 227}), 13: (1, {'@': 227}), 14: (1, {'@': 227}), 15: (1, {'@': 227}), 17: (1, {'@': 227}), 30: (1, {'@': 227}), 31: (1, {'@': 227}), 26: (1, {'@': 227}), 18: (1, {'@': 227}), 27: (1, {'@': 227}), 19: (1, {'@': 227}), 29: (1, {'@': 227}), 32: (1, {'@': 227})}, 360: {1: (0, 136), 20: (0, 141), 13: (0, 51), 93: (0, 145), 17: (0, 409), 72: (0, 149), 14: (0, 415), 12: (0, 87), 23: (0, 491), 25: (0, 99), 22: (0, 104)}, 361: {69: (1, {'@': 228})}, 362: {0: (1, {'@': 229}), 9: (1, {'@': 229}), 4: (1, {'@': 229}), 28: (1, {'@': 229}), 16: (1, {'@': 229}), 11: (1, {'@': 229}), 1: (1, {'@': 229}), 2: (1, {'@': 229}), 3: (1, {'@': 229}), 5: (1, {'@': 229}), 6: (1, {'@': 229}), 7: (1, {'@': 229}), 8: (1, {'@': 229}), 10: (1, {'@': 229}), 12: (1, {'@': 229}), 13: (1, {'@': 229}), 14: (1, {'@': 229}), 15: (1, {'@': 229}), 17: (1, {'@': 229}), 30: (1, {'@': 229}), 31: (1, {'@': 229}), 26: (1, {'@': 229}), 18: (1, {'@': 229}), 27: (1, {'@': 229}), 19: (1, {'@': 229}), 29: (1, {'@': 229}), 32: (1, {'@': 229})}, 363: {69: (1, {'@': 230})}, 364: {39: (0, 496)}, 365: {69: (1, {'@': 231})}, 366: {9: (1, {'@': 232}), 1: (1, {'@': 232}), 2: (1, {'@': 232}), 3: (1, {'@': 232}), 5: (1, {'@': 232}), 6: (1, {'@': 232}), 7: (1, {'@': 232}), 8: (1, {'@': 232}), 10: (1, {'@': 232}), 30: (1, {'@': 232}), 11: (1, {'@': 232}), 31: (1, {'@': 232}), 12: (1, {'@': 232}), 13: (1, {'@': 232}), 14: (1, {'@': 232}), 15: (1, {'@': 232}), 17: (1, {'@': 232}), 19: (1, {'@': 232}), 18: (1, {'@': 232}), 26: (1, {'@': 232}), 27: (1, {'@': 232}), 0: (1, {'@': 232}), 4: (1, {'@': 232}), 29: (1, {'@': 232}), 32: (1, {'@': 232}), 28: (1, {'@': 232}), 16: (1, {'@': 232})}, 367: {19: (1, {'@': 233}), 18: (1, {'@': 233})}, 368: {1: (0, 219), 20: (0, 500), 13: (0, 51), 72: (0, 501), 14: (0, 415), 12: (0, 87), 25: (0, 99), 22: (0, 104), 39: (0, 508)}, 369: {19: (1, {'@': 234}), 18: (1, {'@': 234})}, 370: {23: (0, 229), 1: (0, 210), 20: (0, 249), 64: (0, 405), 8: (0, 418), 66: (0, 565), 13: (0, 419), 11: (0, 420), 12: (0, 620), 17: (0, 409), 41: (0, 421), 68: (0, 422), 22: (0, 3), 14: (0, 415)}, 371: {0: (0, 291), 9: (0, 297), 11: (0, 82), 42: (0, 360), 4: (0, 97), 28: (0, 512), 16: (0, 364)}, 372: {1: (0, 253), 20: (0, 500), 13: (0, 283), 53: (0, 330), 17: (0, 300), 48: (0, 302), 54: (0, 306), 22: (0, 310), 50: (0, 312), 49: (0, 315), 55: (0, 317), 14: (0, 415), 8: (0, 320), 12: (0, 325), 11: (0, 328), 10: (0, 429)}, 373: {0: (1, {'@': 235}), 9: (1, {'@': 235}), 4: (1, {'@': 235}), 28: (1, {'@': 235}), 16: (1, {'@': 235}), 11: (1, {'@': 235}), 1: (1, {'@': 235}), 2: (1, {'@': 235}), 3: (1, {'@': 235}), 5: (1, {'@': 235}), 6: (1, {'@': 235}), 7: (1, {'@': 235}), 8: (1, {'@': 235}), 10: (1, {'@': 235}), 12: (1, {'@': 235}), 13: (1, {'@': 235}), 14: (1, {'@': 235}), 15: (1, {'@': 235}), 17: (1, {'@': 235}), 30: (1, {'@': 235}), 31: (1, {'@': 235}), 26: (1, {'@': 235}), 18: (1, {'@': 235}), 27: (1, {'@': 235}), 19: (1, {'@': 235}), 29: (1, {'@': 235}), 32: (1, {'@': 235})}, 374: {0: (1, {'@': 236}), 9: (1, {'@': 236}), 4: (1, {'@': 236}), 28: (1, {'@': 236}), 16: (1, {'@': 236}), 11: (1, {'@': 236}), 18: (1, {'@': 236}), 19: (1, {'@': 236})}, 375: {0: (0, 291), 9: (0, 297), 11: (0, 82), 42: (0, 360), 4: (0, 97), 28: (0, 515), 16: (0, 364)}, 376: {0: (1, {'@': 237}), 1: (1, {'@': 237}), 2: (1, {'@': 237}), 3: (1, {'@': 237}), 4: (1, {'@': 237}), 5: (1, {'@': 237}), 6: (1, {'@': 237}), 7: (1, {'@': 237}), 8: (1, {'@': 237}), 9: (1, {'@': 237}), 10: (1, {'@': 237}), 11: (1, {'@': 237}), 12: (1, {'@': 237}), 13: (1, {'@': 237}), 14: (1, {'@': 237}), 15: (1, {'@': 237}), 16: (1, {'@': 237}), 17: (1, {'@': 237}), 18: (1, {'@': 237}), 19: (1, {'@': 237})}, 377: {1: (0, 558), 20: (0, 563), 8: (0, 505), 12: (0, 513), 11: (0, 517), 22: (0, 524), 13: (0, 528), 35: (0, 569), 36: (0, 549), 37: (0, 553), 10: (0, 570), 14: (0, 415), 44: (0, 578)}, 378: {1: (0, 558), 20: (0, 563), 8: (0, 505), 12: (0, 513), 11: (0, 517), 22: (0, 524), 13: (0, 528), 35: (0, 569), 36: (0, 549), 37: (0, 553), 44: (0, 2), 14: (0, 415)}, 379: {10: (1, {'@': 238})}, 380: {9: (1, {'@': 239}), 0: (1, {'@': 239}), 4: (1, {'@': 239}), 18: (1, {'@': 239}), 19: (1, {'@': 239}), 28: (1, {'@': 239}), 16: (1, {'@': 239}), 11: (1, {'@': 239})}, 381: {27: (1, {'@': 240}), 18: (1, {'@': 240})}, 382: {14: (0, 415), 20: (0, 357), 1: (0, 634)}, 383: {27: (1, {'@': 241}), 18: (1, {'@': 241})}, 384: {14: (0, 415), 1: (0, 584), 20: (0, 589)}, 385: {10: (0, 263), 14: (0, 415), 1: (0, 267), 20: (0, 270)}, 386: {27: (1, {'@': 242}), 18: (1, {'@': 242})}, 387: {0: (1, {'@': 243}), 9: (1, {'@': 243}), 4: (1, {'@': 243}), 28: (1, {'@': 243}), 16: (1, {'@': 243}), 11: (1, {'@': 243}), 1: (1, {'@': 243}), 2: (1, {'@': 243}), 3: (1, {'@': 243}), 5: (1, {'@': 243}), 6: (1, {'@': 243}), 7: (1, {'@': 243}), 8: (1, {'@': 243}), 10: (1, {'@': 243}), 12: (1, {'@': 243}), 13: (1, {'@': 243}), 14: (1, {'@': 243}), 15: (1, {'@': 243}), 17: (1, {'@': 243}), 30: (1, {'@': 243}), 31: (1, {'@': 243}), 26: (1, {'@': 243}), 18: (1, {'@': 243}), 27: (1, {'@': 243}), 19: (1, {'@': 243}), 29: (1, {'@': 243}), 32: (1, {'@': 243})}, 388: {26: (1, {'@': 244}), 27: (1, {'@': 244}), 18: (1, {'@': 244}), 29: (1, {'@': 244}), 32: (1, {'@': 244})}, 389: {83: (0, 519)}, 390: {23: (0, 229), 1: (0, 210), 20: (0, 249), 64: (0, 405), 8: (0, 418), 13: (0, 419), 11: (0, 420), 12: (0, 620), 17: (0, 182), 66: (0, 525), 41: (0, 421), 67: (0, 530), 68: (0, 422), 22: (0, 3), 14: (0, 415), 65: (0, 535)}, 391: {1: (0, 225), 20: (0, 621), 10: (0, 625), 14: (0, 415)}, 392: {0: (1, {'@': 245}), 9: (1, {'@': 245}), 4: (1, {'@': 245}), 28: (1, {'@': 245}), 16: (1, {'@': 245}), 11: (1, {'@': 245}), 1: (1, {'@': 245}), 2: (1, {'@': 245}), 3: (1, {'@': 245}), 5: (1, {'@': 245}), 6: (1, {'@': 245}), 7: (1, {'@': 245}), 8: (1, {'@': 245}), 10: (1, {'@': 245}), 12: (1, {'@': 245}), 13: (1, {'@': 245}), 14: (1, {'@': 245}), 15: (1, {'@': 245}), 17: (1, {'@': 245}), 30: (1, {'@': 245}), 31: (1, {'@': 245}), 26: (1, {'@': 245}), 18: (1, {'@': 245}), 27: (1, {'@': 245}), 19: (1, {'@': 245}), 29: (1, {'@': 245}), 32: (1, {'@': 245})}, 393: {47: (0, 456), 28: (0, 459)}, 394: {10: (0, 276), 1: (0, 282), 20: (0, 284), 14: (0, 415)}, 395: {1: (1, {'@': 246}), 2: (1, {'@': 246}), 3: (1, {'@': 246}), 5: (1, {'@': 246}), 6: (1, {'@': 246}), 7: (1, {'@': 246}), 8: (1, {'@': 246}), 10: (1, {'@': 246}), 30: (1, {'@': 246}), 11: (1, {'@': 246}), 31: (1, {'@': 246}), 12: (1, {'@': 246}), 13: (1, {'@': 246}), 14: (1, {'@': 246}), 15: (1, {'@': 246}), 17: (1, {'@': 246})}, 396: {12: (1, {'@': 247}), 1: (1, {'@': 247}), 2: (1, {'@': 247}), 3: (1, {'@': 247}), 5: (1, {'@': 247}), 6: (1, {'@': 247}), 13: (1, {'@': 247}), 7: (1, {'@': 247}), 8: (1, {'@': 247}), 14: (1, {'@': 247}), 15: (1, {'@': 247}), 10: (1, {'@': 247}), 17: (1, {'@': 247}), 11: (1, {'@': 247})}, 397: {0: (1, {'@': 248}), 9: (1, {'@': 248}), 4: (1, {'@': 248}), 28: (1, {'@': 248}), 16: (1, {'@': 248}), 11: (1, {'@': 248}), 1: (1, {'@': 248}), 2: (1, {'@': 248}), 3: (1, {'@': 248}), 5: (1, {'@': 248}), 6: (1, {'@': 248}), 7: (1, {'@': 248}), 8: (1, {'@': 248}), 10: (1, {'@': 248}), 12: (1, {'@': 248}), 13: (1, {'@': 248}), 14: (1, {'@': 248}), 15: (1, {'@': 248}), 17: (1, {'@': 248}), 30: (1, {'@': 248}), 31: (1, {'@': 248}), 26: (1, {'@': 248}), 18: (1, {'@': 248}), 27: (1, {'@': 248}), 19: (1, {'@': 248}), 29: (1, {'@': 248}), 32: (1, {'@': 248})}, 398: {1: (1, {'@': 249}), 2: (1, {'@': 249}), 3: (1, {'@': 249}), 5: (1, {'@': 249}), 6: (1, {'@': 249}), 7: (1, {'@': 249}), 8: (1, {'@': 249}), 10: (1, {'@': 249}), 30: (1, {'@': 249}), 11: (1, {'@': 249}), 31: (1, {'@': 249}), 12: (1, {'@': 249}), 13: (1, {'@': 249}), 14: (1, {'@': 249}), 15: (1, {'@': 249}), 17: (1, {'@': 249})}, 399: {0: (1, {'@': 250}), 9: (1, {'@': 250}), 4: (1, {'@': 250}), 28: (1, {'@': 250}), 16: (1, {'@': 250}), 11: (1, {'@': 250}), 1: (1, {'@': 250}), 2: (1, {'@': 250}), 3: (1, {'@': 250}), 5: (1, {'@': 250}), 6: (1, {'@': 250}), 7: (1, {'@': 250}), 8: (1, {'@': 250}), 10: (1, {'@': 250}), 12: (1, {'@': 250}), 13: (1, {'@': 250}), 14: (1, {'@': 250}), 15: (1, {'@': 250}), 17: (1, {'@': 250}), 30: (1, {'@': 250}), 31: (1, {'@': 250}), 26: (1, {'@': 250}), 18: (1, {'@': 250}), 27: (1, {'@': 250}), 19: (1, {'@': 250}), 29: (1, {'@': 250}), 32: (1, {'@': 250})}, 400: {0: (1, {'@': 251}), 9: (1, {'@': 251}), 4: (1, {'@': 251}), 28: (1, {'@': 251}), 16: (1, {'@': 251}), 11: (1, {'@': 251}), 1: (1, {'@': 251}), 2: (1, {'@': 251}), 3: (1, {'@': 251}), 5: (1, {'@': 251}), 6: (1, {'@': 251}), 7: (1, {'@': 251}), 8: (1, {'@': 251}), 10: (1, {'@': 251}), 12: (1, {'@': 251}), 13: (1, {'@': 251}), 14: (1, {'@': 251}), 15: (1, {'@': 251}), 17: (1, {'@': 251}), 30: (1, {'@': 251}), 31: (1, {'@': 251}), 26: (1, {'@': 251}), 18: (1, {'@': 251}), 27: (1, {'@': 251}), 19: (1, {'@': 251}), 29: (1, {'@': 251}), 32: (1, {'@': 251})}, 401: {14: (0, 415), 20: (0, 539)}, 402: {14: (0, 415), 10: (0, 414), 20: (0, 256), 1: (0, 259)}, 403: {0: (1, {'@': 252}), 9: (1, {'@': 252}), 4: (1, {'@': 252}), 28: (1, {'@': 252}), 16: (1, {'@': 252}), 11: (1, {'@': 252}), 18: (1, {'@': 252}), 19: (1, {'@': 252})}, 404: {10: (1, {'@': 253}), 60: (1, {'@': 253}), 1: (1, {'@': 253}), 2: (1, {'@': 253}), 3: (1, {'@': 253}), 5: (1, {'@': 253}), 6: (1, {'@': 253}), 7: (1, {'@': 253}), 8: (1, {'@': 253}), 11: (1, {'@': 253}), 30: (1, {'@': 253}), 31: (1, {'@': 253}), 12: (1, {'@': 253}), 13: (1, {'@': 253}), 14: (1, {'@': 253}), 15: (1, {'@': 253}), 17: (1, {'@': 253})}, 405: {11: (0, 82), 0: (0, 91), 4: (0, 97), 9: (0, 101), 42: (0, 107), 16: (0, 114), 26: (1, {'@': 254}), 27: (1, {'@': 254}), 18: (1, {'@': 254}), 19: (1, {'@': 254}), 29: (1, {'@': 254}), 1: (1, {'@': 254}), 5: (1, {'@': 254}), 3: (1, {'@': 254}), 2: (1, {'@': 254}), 6: (1, {'@': 254}), 7: (1, {'@': 254}), 8: (1, {'@': 254}), 10: (1, {'@': 254}), 30: (1, {'@': 254}), 31: (1, {'@': 254}), 12: (1, {'@': 254}), 13: (1, {'@': 254}), 14: (1, {'@': 254}), 32: (1, {'@': 254}), 15: (1, {'@': 254}), 28: (1, {'@': 254}), 17: (1, {'@': 254})}, 406: {75: (0, 84), 6: (0, 121), 15: (0, 125), 12: (1, {'@': 255}), 1: (1, {'@': 255}), 2: (1, {'@': 255}), 3: (1, {'@': 255}), 5: (1, {'@': 255}), 13: (1, {'@': 255}), 7: (1, {'@': 255}), 8: (1, {'@': 255}), 14: (1, {'@': 255}), 10: (1, {'@': 255}), 17: (1, {'@': 255}), 11: (1, {'@': 255})}, 407: {12: (0, 214), 23: (0, 229), 1: (0, 210), 20: (0, 249), 64: (0, 405), 81: (0, 129), 78: (0, 408), 17: (0, 409), 10: (0, 138), 80: (0, 410), 66: (0, 411), 2: (0, 412), 14: (0, 415), 7: (0, 417), 8: (0, 418), 13: (0, 419), 11: (0, 420), 41: (0, 421), 68: (0, 422), 22: (0, 3), 79: (0, 494), 3: (0, 8), 5: (1, {'@': 256})}, 408: {30: (0, 499), 94: (0, 510), 95: (0, 516), 96: (0, 521), 31: (0, 527), 12: (1, {'@': 257}), 1: (1, {'@': 257}), 2: (1, {'@': 257}), 3: (1, {'@': 257}), 5: (1, {'@': 257}), 6: (1, {'@': 257}), 13: (1, {'@': 257}), 7: (1, {'@': 257}), 8: (1, {'@': 257}), 14: (1, {'@': 257}), 15: (1, {'@': 257}), 10: (1, {'@': 257}), 17: (1, {'@': 257}), 11: (1, {'@': 257})}, 409: {39: (0, 503), 52: (0, 541)}, 410: {30: (0, 499), 94: (0, 510), 96: (0, 521), 95: (0, 536), 31: (0, 527), 12: (1, {'@': 258}), 1: (1, {'@': 258}), 2: (1, {'@': 258}), 3: (1, {'@': 258}), 5: (1, {'@': 258}), 6: (1, {'@': 258}), 13: (1, {'@': 258}), 7: (1, {'@': 258}), 8: (1, {'@': 258}), 14: (1, {'@': 258}), 15: (1, {'@': 258}), 10: (1, {'@': 258}), 17: (1, {'@': 258}), 11: (1, {'@': 258})}, 411: {86: (0, 547), 97: (0, 560), 27: (0, 571), 18: (0, 575)}, 412: {12: (0, 580)}, 413: {12: (0, 214), 23: (0, 229), 1: (0, 210), 20: (0, 249), 64: (0, 405), 81: (0, 585), 78: (0, 408), 79: (0, 594), 17: (0, 409), 80: (0, 410), 66: (0, 411), 2: (0, 412), 14: (0, 415), 7: (0, 417), 8: (0, 418), 13: (0, 419), 11: (0, 420), 41: (0, 421), 68: (0, 422), 22: (0, 3), 3: (0, 8)}, 414: {1: (0, 557), 20: (0, 562), 14: (0, 415)}, 415: {58: (0, 599), 14: (0, 415), 39: (0, 605), 98: (0, 610), 20: (0, 615)}, 416: {}, 417: {12: (1, {'@': 259}), 1: (1, {'@': 259}), 2: (1, {'@': 259}), 3: (1, {'@': 259}), 5: (1, {'@': 259}), 13: (1, {'@': 259}), 7: (1, {'@': 259}), 8: (1, {'@': 259}), 14: (1, {'@': 259}), 15: (1, {'@': 259}), 10: (1, {'@': 259}), 17: (1, {'@': 259}), 11: (1, {'@': 259})}, 418: {23: (0, 229), 1: (0, 210), 20: (0, 249), 64: (0, 405), 8: (0, 418), 13: (0, 419), 11: (0, 420), 12: (0, 620), 17: (0, 409), 41: (0, 421), 68: (0, 422), 22: (0, 3), 14: (0, 415), 66: (0, 624)}, 419: {23: (0, 229), 1: (0, 210), 20: (0, 249), 64: (0, 405), 8: (0, 418), 13: (0, 419), 22: (0, 632), 11: (0, 420), 12: (0, 620), 17: (0, 409), 41: (0, 421), 66: (0, 486), 68: (0, 422), 14: (0, 415)}, 420: {23: (0, 229), 1: (0, 210), 20: (0, 249), 64: (0, 405), 8: (0, 418), 13: (0, 419), 11: (0, 420), 12: (0, 620), 17: (0, 409), 41: (0, 421), 66: (0, 490), 68: (0, 422), 22: (0, 3), 14: (0, 415)}, 421: {0: (1, {'@': 260}), 26: (1, {'@': 260}), 4: (1, {'@': 260}), 9: (1, {'@': 260}), 16: (1, {'@': 260}), 11: (1, {'@': 260}), 27: (1, {'@': 260}), 18: (1, {'@': 260}), 19: (1, {'@': 260}), 28: (1, {'@': 260}), 29: (1, {'@': 260}), 1: (1, {'@': 260}), 5: (1, {'@': 260}), 3: (1, {'@': 260}), 2: (1, {'@': 260}), 6: (1, {'@': 260}), 7: (1, {'@': 260}), 8: (1, {'@': 260}), 10: (1, {'@': 260}), 30: (1, {'@': 260}), 31: (1, {'@': 260}), 12: (1, {'@': 260}), 13: (1, {'@': 260}), 14: (1, {'@': 260}), 32: (1, {'@': 260}), 15: (1, {'@': 260}), 17: (1, {'@': 260})}, 422: {0: (1, {'@': 261}), 26: (1, {'@': 261}), 4: (1, {'@': 261}), 9: (1, {'@': 261}), 16: (1, {'@': 261}), 11: (1, {'@': 261}), 27: (1, {'@': 261}), 18: (1, {'@': 261}), 19: (1, {'@': 261}), 28: (1, {'@': 261}), 29: (1, {'@': 261}), 1: (1, {'@': 261}), 5: (1, {'@': 261}), 3: (1, {'@': 261}), 2: (1, {'@': 261}), 6: (1, {'@': 261}), 7: (1, {'@': 261}), 8: (1, {'@': 261}), 10: (1, {'@': 261}), 30: (1, {'@': 261}), 31: (1, {'@': 261}), 12: (1, {'@': 261}), 13: (1, {'@': 261}), 14: (1, {'@': 261}), 32: (1, {'@': 261}), 15: (1, {'@': 261}), 17: (1, {'@': 261})}, 423: {0: (1, {'@': 262}), 1: (1, {'@': 262}), 2: (1, {'@': 262}), 3: (1, {'@': 262}), 4: (1, {'@': 262}), 5: (1, {'@': 262}), 6: (1, {'@': 262}), 7: (1, {'@': 262}), 8: (1, {'@': 262}), 9: (1, {'@': 262}), 10: (1, {'@': 262}), 11: (1, {'@': 262}), 12: (1, {'@': 262}), 13: (1, {'@': 262}), 14: (1, {'@': 262}), 15: (1, {'@': 262}), 16: (1, {'@': 262}), 17: (1, {'@': 262}), 18: (1, {'@': 262}), 19: (1, {'@': 262})}, 424: {1: (0, 253), 20: (0, 500), 13: (0, 283), 53: (0, 622), 17: (0, 300), 48: (0, 302), 54: (0, 306), 22: (0, 310), 50: (0, 312), 49: (0, 315), 55: (0, 317), 14: (0, 415), 8: (0, 320), 12: (0, 325), 11: (0, 328)}, 425: {0: (1, {'@': 263}), 1: (1, {'@': 263}), 5: (1, {'@': 263}), 3: (1, {'@': 263}), 2: (1, {'@': 263}), 6: (1, {'@': 263}), 4: (1, {'@': 263}), 7: (1, {'@': 263}), 8: (1, {'@': 263}), 9: (1, {'@': 263}), 10: (1, {'@': 263}), 11: (1, {'@': 263}), 12: (1, {'@': 263}), 18: (1, {'@': 263}), 13: (1, {'@': 263}), 19: (1, {'@': 263}), 14: (1, {'@': 263}), 15: (1, {'@': 263}), 16: (1, {'@': 263}), 17: (1, {'@': 263})}, 426: {11: (0, 82), 42: (0, 160), 4: (0, 97), 28: (0, 614), 9: (0, 16), 16: (0, 21), 0: (0, 25)}, 427: {0: (1, {'@': 264}), 1: (1, {'@': 264}), 5: (1, {'@': 264}), 3: (1, {'@': 264}), 2: (1, {'@': 264}), 6: (1, {'@': 264}), 4: (1, {'@': 264}), 7: (1, {'@': 264}), 8: (1, {'@': 264}), 9: (1, {'@': 264}), 10: (1, {'@': 264}), 11: (1, {'@': 264}), 12: (1, {'@': 264}), 18: (1, {'@': 264}), 13: (1, {'@': 264}), 19: (1, {'@': 264}), 14: (1, {'@': 264}), 15: (1, {'@': 264}), 16: (1, {'@': 264}), 17: (1, {'@': 264})}, 428: {0: (1, {'@': 265}), 1: (1, {'@': 265}), 2: (1, {'@': 265}), 3: (1, {'@': 265}), 4: (1, {'@': 265}), 5: (1, {'@': 265}), 6: (1, {'@': 265}), 7: (1, {'@': 265}), 8: (1, {'@': 265}), 9: (1, {'@': 265}), 10: (1, {'@': 265}), 11: (1, {'@': 265}), 12: (1, {'@': 265}), 13: (1, {'@': 265}), 14: (1, {'@': 265}), 15: (1, {'@': 265}), 16: (1, {'@': 265}), 17: (1, {'@': 265}), 18: (1, {'@': 265}), 19: (1, {'@': 265})}, 429: {1: (0, 253), 20: (0, 500), 13: (0, 283), 53: (0, 151), 17: (0, 300), 48: (0, 302), 54: (0, 306), 22: (0, 310), 50: (0, 312), 49: (0, 315), 55: (0, 317), 14: (0, 415), 8: (0, 320), 12: (0, 325), 11: (0, 328)}, 430: {18: (0, 377), 19: (0, 376)}, 431: {23: (0, 229), 1: (0, 210), 20: (0, 249), 64: (0, 405), 8: (0, 418), 13: (0, 419), 11: (0, 420), 12: (0, 620), 17: (0, 182), 65: (0, 216), 66: (0, 525), 41: (0, 421), 67: (0, 530), 68: (0, 422), 22: (0, 3), 14: (0, 415)}, 432: {1: (0, 287), 20: (0, 235), 10: (0, 311), 13: (0, 283), 55: (0, 246), 53: (0, 250), 63: (0, 163), 17: (0, 300), 48: (0, 302), 91: (0, 168), 54: (0, 306), 22: (0, 310), 50: (0, 312), 49: (0, 315), 14: (0, 415), 8: (0, 320), 12: (0, 325), 11: (0, 328)}, 433: {1: (0, 558), 20: (0, 563), 8: (0, 505), 12: (0, 513), 11: (0, 517), 44: (0, 340), 22: (0, 524), 13: (0, 528), 35: (0, 569), 36: (0, 549), 37: (0, 553), 14: (0, 415), 10: (0, 378)}, 434: {19: (1, {'@': 266}), 18: (1, {'@': 266})}, 435: {0: (1, {'@': 267}), 9: (1, {'@': 267}), 4: (1, {'@': 267}), 28: (1, {'@': 267}), 16: (1, {'@': 267}), 11: (1, {'@': 267}), 1: (1, {'@': 267}), 2: (1, {'@': 267}), 3: (1, {'@': 267}), 5: (1, {'@': 267}), 6: (1, {'@': 267}), 7: (1, {'@': 267}), 8: (1, {'@': 267}), 10: (1, {'@': 267}), 12: (1, {'@': 267}), 13: (1, {'@': 267}), 14: (1, {'@': 267}), 15: (1, {'@': 267}), 17: (1, {'@': 267}), 30: (1, {'@': 267}), 31: (1, {'@': 267}), 26: (1, {'@': 267}), 18: (1, {'@': 267}), 27: (1, {'@': 267}), 19: (1, {'@': 267}), 29: (1, {'@': 267}), 32: (1, {'@': 267})}, 436: {0: (1, {'@': 268}), 4: (1, {'@': 268}), 18: (1, {'@': 268}), 19: (1, {'@': 268}), 9: (1, {'@': 268}), 28: (1, {'@': 268}), 16: (1, {'@': 268}), 11: (1, {'@': 268})}, 437: {0: (1, {'@': 269}), 1: (1, {'@': 269}), 2: (1, {'@': 269}), 3: (1, {'@': 269}), 4: (1, {'@': 269}), 5: (1, {'@': 269}), 6: (1, {'@': 269}), 7: (1, {'@': 269}), 8: (1, {'@': 269}), 9: (1, {'@': 269}), 10: (1, {'@': 269}), 11: (1, {'@': 269}), 12: (1, {'@': 269}), 13: (1, {'@': 269}), 14: (1, {'@': 269}), 15: (1, {'@': 269}), 16: (1, {'@': 269}), 17: (1, {'@': 269}), 18: (1, {'@': 269}), 19: (1, {'@': 269})}, 438: {0: (1, {'@': 270}), 1: (1, {'@': 270}), 2: (1, {'@': 270}), 3: (1, {'@': 270}), 4: (1, {'@': 270}), 5: (1, {'@': 270}), 6: (1, {'@': 270}), 7: (1, {'@': 270}), 8: (1, {'@': 270}), 9: (1, {'@': 270}), 10: (1, {'@': 270}), 11: (1, {'@': 270}), 12: (1, {'@': 270}), 13: (1, {'@': 270}), 14: (1, {'@': 270}), 15: (1, {'@': 270}), 16: (1, {'@': 270}), 17: (1, {'@': 270}), 18: (1, {'@': 270}), 19: (1, {'@': 270})}, 439: {10: (0, 41), 33: (0, 44), 34: (0, 49), 0: (1, {'@': 271}), 4: (1, {'@': 271}), 18: (1, {'@': 271}), 19: (1, {'@': 271}), 9: (1, {'@': 271}), 28: (1, {'@': 271}), 16: (1, {'@': 271}), 11: (1, {'@': 271})}, 440: {10: (0, 41), 33: (0, 44), 34: (0, 49), 0: (1, {'@': 272}), 5: (1, {'@': 272}), 3: (1, {'@': 272}), 6: (1, {'@': 272}), 8: (1, {'@': 272}), 9: (1, {'@': 272}), 13: (1, {'@': 272}), 19: (1, {'@': 272}), 15: (1, {'@': 272}), 17: (1, {'@': 272}), 1: (1, {'@': 272}), 2: (1, {'@': 272}), 4: (1, {'@': 272}), 7: (1, {'@': 272}), 11: (1, {'@': 272}), 12: (1, {'@': 272}), 18: (1, {'@': 272}), 14: (1, {'@': 272}), 16: (1, {'@': 272})}, 441: {10: (0, 63), 33: (0, 69), 34: (0, 75), 0: (1, {'@': 273}), 4: (1, {'@': 273}), 18: (1, {'@': 273}), 19: (1, {'@': 273}), 9: (1, {'@': 273}), 28: (1, {'@': 273}), 16: (1, {'@': 273}), 11: (1, {'@': 273})}, 442: {10: (0, 63), 33: (0, 69), 34: (0, 75), 0: (1, {'@': 274}), 5: (1, {'@': 274}), 3: (1, {'@': 274}), 6: (1, {'@': 274}), 8: (1, {'@': 274}), 9: (1, {'@': 274}), 13: (1, {'@': 274}), 19: (1, {'@': 274}), 15: (1, {'@': 274}), 17: (1, {'@': 274}), 1: (1, {'@': 274}), 2: (1, {'@': 274}), 4: (1, {'@': 274}), 7: (1, {'@': 274}), 11: (1, {'@': 274}), 12: (1, {'@': 274}), 18: (1, {'@': 274}), 14: (1, {'@': 274}), 16: (1, {'@': 274})}, 443: {0: (1, {'@': 275}), 4: (1, {'@': 275}), 18: (1, {'@': 275}), 19: (1, {'@': 275}), 9: (1, {'@': 275}), 28: (1, {'@': 275}), 16: (1, {'@': 275}), 11: (1, {'@': 275})}, 444: {0: (1, {'@': 276}), 1: (1, {'@': 276}), 2: (1, {'@': 276}), 3: (1, {'@': 276}), 4: (1, {'@': 276}), 5: (1, {'@': 276}), 6: (1, {'@': 276}), 7: (1, {'@': 276}), 8: (1, {'@': 276}), 9: (1, {'@': 276}), 10: (1, {'@': 276}), 11: (1, {'@': 276}), 12: (1, {'@': 276}), 13: (1, {'@': 276}), 14: (1, {'@': 276}), 15: (1, {'@': 276}), 16: (1, {'@': 276}), 17: (1, {'@': 276}), 18: (1, {'@': 276}), 19: (1, {'@': 276})}, 445: {0: (1, {'@': 277}), 4: (1, {'@': 277}), 18: (1, {'@': 277}), 19: (1, {'@': 277}), 9: (1, {'@': 277}), 28: (1, {'@': 277}), 16: (1, {'@': 277}), 11: (1, {'@': 277})}, 446: {0: (1, {'@': 278}), 5: (1, {'@': 278}), 3: (1, {'@': 278}), 6: (1, {'@': 278}), 8: (1, {'@': 278}), 9: (1, {'@': 278}), 10: (1, {'@': 278}), 13: (1, {'@': 278}), 19: (1, {'@': 278}), 15: (1, {'@': 278}), 17: (1, {'@': 278}), 1: (1, {'@': 278}), 2: (1, {'@': 278}), 4: (1, {'@': 278}), 7: (1, {'@': 278}), 11: (1, {'@': 278}), 12: (1, {'@': 278}), 18: (1, {'@': 278}), 14: (1, {'@': 278}), 16: (1, {'@': 278})}, 447: {0: (1, {'@': 279}), 9: (1, {'@': 279}), 4: (1, {'@': 279}), 28: (1, {'@': 279}), 16: (1, {'@': 279}), 11: (1, {'@': 279}), 18: (1, {'@': 279}), 19: (1, {'@': 279})}, 448: {0: (1, {'@': 280}), 1: (1, {'@': 280}), 2: (1, {'@': 280}), 3: (1, {'@': 280}), 4: (1, {'@': 280}), 5: (1, {'@': 280}), 6: (1, {'@': 280}), 7: (1, {'@': 280}), 8: (1, {'@': 280}), 9: (1, {'@': 280}), 10: (1, {'@': 280}), 11: (1, {'@': 280}), 12: (1, {'@': 280}), 13: (1, {'@': 280}), 14: (1, {'@': 280}), 15: (1, {'@': 280}), 16: (1, {'@': 280}), 17: (1, {'@': 280}), 18: (1, {'@': 280}), 19: (1, {'@': 280})}, 449: {0: (1, {'@': 281}), 9: (1, {'@': 281}), 4: (1, {'@': 281}), 28: (1, {'@': 281}), 16: (1, {'@': 281}), 11: (1, {'@': 281}), 18: (1, {'@': 281}), 19: (1, {'@': 281})}, 450: {12: (1, {'@': 282}), 1: (1, {'@': 282}), 2: (1, {'@': 282}), 3: (1, {'@': 282}), 5: (1, {'@': 282}), 6: (1, {'@': 282}), 13: (1, {'@': 282}), 7: (1, {'@': 282}), 8: (1, {'@': 282}), 14: (1, {'@': 282}), 15: (1, {'@': 282}), 10: (1, {'@': 282}), 17: (1, {'@': 282}), 11: (1, {'@': 282})}, 451: {0: (1, {'@': 283}), 9: (1, {'@': 283}), 4: (1, {'@': 283}), 28: (1, {'@': 283}), 16: (1, {'@': 283}), 11: (1, {'@': 283}), 18: (1, {'@': 283}), 19: (1, {'@': 283})}, 452: {1: (0, 373), 14: (0, 415), 10: (0, 384), 20: (0, 387)}, 453: {0: (1, {'@': 284}), 9: (1, {'@': 284}), 4: (1, {'@': 284}), 28: (1, {'@': 284}), 16: (1, {'@': 284}), 11: (1, {'@': 284}), 18: (1, {'@': 284}), 19: (1, {'@': 284})}, 454: {0: (1, {'@': 285}), 9: (1, {'@': 285}), 4: (1, {'@': 285}), 28: (1, {'@': 285}), 16: (1, {'@': 285}), 11: (1, {'@': 285}), 1: (1, {'@': 285}), 2: (1, {'@': 285}), 3: (1, {'@': 285}), 5: (1, {'@': 285}), 6: (1, {'@': 285}), 7: (1, {'@': 285}), 8: (1, {'@': 285}), 10: (1, {'@': 285}), 12: (1, {'@': 285}), 13: (1, {'@': 285}), 14: (1, {'@': 285}), 15: (1, {'@': 285}), 17: (1, {'@': 285}), 30: (1, {'@': 285}), 31: (1, {'@': 285}), 26: (1, {'@': 285}), 18: (1, {'@': 285}), 27: (1, {'@': 285}), 19: (1, {'@': 285}), 29: (1, {'@': 285}), 32: (1, {'@': 285})}, 455: {0: (1, {'@': 286}), 9: (1, {'@': 286}), 4: (1, {'@': 286}), 28: (1, {'@': 286}), 16: (1, {'@': 286}), 11: (1, {'@': 286}), 1: (1, {'@': 286}), 2: (1, {'@': 286}), 3: (1, {'@': 286}), 5: (1, {'@': 286}), 6: (1, {'@': 286}), 7: (1, {'@': 286}), 8: (1, {'@': 286}), 10: (1, {'@': 286}), 12: (1, {'@': 286}), 13: (1, {'@': 286}), 14: (1, {'@': 286}), 15: (1, {'@': 286}), 17: (1, {'@': 286}), 30: (1, {'@': 286}), 31: (1, {'@': 286}), 26: (1, {'@': 286}), 18: (1, {'@': 286}), 27: (1, {'@': 286}), 19: (1, {'@': 286}), 29: (1, {'@': 286}), 32: (1, {'@': 286})}, 456: {1: (0, 253), 20: (0, 500), 13: (0, 283), 53: (0, 194), 10: (0, 173), 17: (0, 300), 48: (0, 302), 54: (0, 306), 22: (0, 310), 50: (0, 312), 49: (0, 315), 55: (0, 317), 14: (0, 415), 8: (0, 320), 12: (0, 325), 11: (0, 328)}, 457: {0: (1, {'@': 287}), 9: (1, {'@': 287}), 4: (1, {'@': 287}), 28: (1, {'@': 287}), 16: (1, {'@': 287}), 11: (1, {'@': 287}), 1: (1, {'@': 287}), 2: (1, {'@': 287}), 3: (1, {'@': 287}), 5: (1, {'@': 287}), 6: (1, {'@': 287}), 7: (1, {'@': 287}), 8: (1, {'@': 287}), 10: (1, {'@': 287}), 12: (1, {'@': 287}), 13: (1, {'@': 287}), 14: (1, {'@': 287}), 15: (1, {'@': 287}), 17: (1, {'@': 287}), 30: (1, {'@': 287}), 31: (1, {'@': 287}), 26: (1, {'@': 287}), 18: (1, {'@': 287}), 27: (1, {'@': 287}), 19: (1, {'@': 287}), 29: (1, {'@': 287}), 32: (1, {'@': 287})}, 458: {34: (0, 484)}, 459: {9: (1, {'@': 288}), 0: (1, {'@': 288}), 4: (1, {'@': 288}), 18: (1, {'@': 288}), 19: (1, {'@': 288}), 28: (1, {'@': 288}), 16: (1, {'@': 288}), 11: (1, {'@': 288})}, 460: {0: (1, {'@': 289}), 9: (1, {'@': 289}), 4: (1, {'@': 289}), 28: (1, {'@': 289}), 16: (1, {'@': 289}), 11: (1, {'@': 289}), 1: (1, {'@': 289}), 2: (1, {'@': 289}), 3: (1, {'@': 289}), 5: (1, {'@': 289}), 6: (1, {'@': 289}), 7: (1, {'@': 289}), 8: (1, {'@': 289}), 10: (1, {'@': 289}), 12: (1, {'@': 289}), 13: (1, {'@': 289}), 14: (1, {'@': 289}), 15: (1, {'@': 289}), 17: (1, {'@': 289}), 30: (1, {'@': 289}), 31: (1, {'@': 289}), 26: (1, {'@': 289}), 18: (1, {'@': 289}), 27: (1, {'@': 289}), 19: (1, {'@': 289}), 29: (1, {'@': 289}), 32: (1, {'@': 289})}, 461: {1: (0, 253), 20: (0, 500), 13: (0, 283), 53: (0, 485), 17: (0, 300), 10: (0, 179), 48: (0, 302), 54: (0, 306), 22: (0, 310), 50: (0, 312), 49: (0, 315), 55: (0, 317), 14: (0, 415), 8: (0, 320), 12: (0, 325), 11: (0, 328)}, 462: {0: (1, {'@': 290}), 9: (1, {'@': 290}), 4: (1, {'@': 290}), 28: (1, {'@': 290}), 16: (1, {'@': 290}), 11: (1, {'@': 290}), 1: (1, {'@': 290}), 2: (1, {'@': 290}), 3: (1, {'@': 290}), 5: (1, {'@': 290}), 6: (1, {'@': 290}), 7: (1, {'@': 290}), 8: (1, {'@': 290}), 10: (1, {'@': 290}), 12: (1, {'@': 290}), 13: (1, {'@': 290}), 14: (1, {'@': 290}), 15: (1, {'@': 290}), 17: (1, {'@': 290}), 30: (1, {'@': 290}), 31: (1, {'@': 290}), 26: (1, {'@': 290}), 18: (1, {'@': 290}), 27: (1, {'@': 290}), 19: (1, {'@': 290}), 29: (1, {'@': 290}), 32: (1, {'@': 290})}, 463: {10: (0, 382), 1: (0, 397), 20: (0, 399), 14: (0, 415)}, 464: {34: (0, 394), 10: (0, 175)}, 465: {0: (1, {'@': 291}), 9: (1, {'@': 291}), 4: (1, {'@': 291}), 28: (1, {'@': 291}), 16: (1, {'@': 291}), 11: (1, {'@': 291}), 18: (1, {'@': 291}), 19: (1, {'@': 291})}, 466: {0: (1, {'@': 292}), 9: (1, {'@': 292}), 4: (1, {'@': 292}), 28: (1, {'@': 292}), 16: (1, {'@': 292}), 11: (1, {'@': 292}), 18: (1, {'@': 292}), 19: (1, {'@': 292})}, 467: {0: (1, {'@': 293}), 9: (1, {'@': 293}), 4: (1, {'@': 293}), 28: (1, {'@': 293}), 16: (1, {'@': 293}), 11: (1, {'@': 293}), 1: (1, {'@': 293}), 2: (1, {'@': 293}), 3: (1, {'@': 293}), 5: (1, {'@': 293}), 6: (1, {'@': 293}), 7: (1, {'@': 293}), 8: (1, {'@': 293}), 10: (1, {'@': 293}), 12: (1, {'@': 293}), 13: (1, {'@': 293}), 14: (1, {'@': 293}), 15: (1, {'@': 293}), 17: (1, {'@': 293}), 30: (1, {'@': 293}), 31: (1, {'@': 293}), 26: (1, {'@': 293}), 18: (1, {'@': 293}), 27: (1, {'@': 293}), 19: (1, {'@': 293}), 29: (1, {'@': 293}), 32: (1, {'@': 293})}, 468: {1: (1, {'@': 294}), 2: (1, {'@': 294}), 3: (1, {'@': 294}), 5: (1, {'@': 294}), 6: (1, {'@': 294}), 7: (1, {'@': 294}), 8: (1, {'@': 294}), 10: (1, {'@': 294}), 11: (1, {'@': 294}), 30: (1, {'@': 294}), 31: (1, {'@': 294}), 12: (1, {'@': 294}), 13: (1, {'@': 294}), 14: (1, {'@': 294}), 15: (1, {'@': 294}), 17: (1, {'@': 294})}, 469: {14: (0, 415), 1: (0, 359), 20: (0, 400)}, 470: {69: (1, {'@': 295})}, 471: {61: (0, 611), 62: (0, 489), 52: (0, 150), 60: (0, 184)}, 472: {19: (0, 181)}, 473: {1: (0, 362), 20: (0, 152), 14: (0, 415), 10: (0, 154)}, 474: {12: (1, {'@': 296}), 1: (1, {'@': 296}), 2: (1, {'@': 296}), 3: (1, {'@': 296}), 5: (1, {'@': 296}), 13: (1, {'@': 296}), 7: (1, {'@': 296}), 8: (1, {'@': 296}), 14: (1, {'@': 296}), 10: (1, {'@': 296}), 17: (1, {'@': 296}), 11: (1, {'@': 296})}, 475: {10: (1, {'@': 297}), 60: (1, {'@': 297})}, 476: {10: (1, {'@': 298}), 60: (1, {'@': 298}), 1: (1, {'@': 298}), 2: (1, {'@': 298}), 3: (1, {'@': 298}), 5: (1, {'@': 298}), 6: (1, {'@': 298}), 7: (1, {'@': 298}), 8: (1, {'@': 298}), 11: (1, {'@': 298}), 30: (1, {'@': 298}), 31: (1, {'@': 298}), 12: (1, {'@': 298}), 13: (1, {'@': 298}), 14: (1, {'@': 298}), 15: (1, {'@': 298}), 17: (1, {'@': 298})}, 477: {0: (1, {'@': 299}), 9: (1, {'@': 299}), 4: (1, {'@': 299}), 28: (1, {'@': 299}), 16: (1, {'@': 299}), 11: (1, {'@': 299}), 1: (1, {'@': 299}), 2: (1, {'@': 299}), 3: (1, {'@': 299}), 5: (1, {'@': 299}), 6: (1, {'@': 299}), 7: (1, {'@': 299}), 8: (1, {'@': 299}), 10: (1, {'@': 299}), 12: (1, {'@': 299}), 13: (1, {'@': 299}), 14: (1, {'@': 299}), 15: (1, {'@': 299}), 17: (1, {'@': 299}), 30: (1, {'@': 299}), 31: (1, {'@': 299}), 26: (1, {'@': 299}), 18: (1, {'@': 299}), 27: (1, {'@': 299}), 19: (1, {'@': 299}), 29: (1, {'@': 299}), 32: (1, {'@': 299})}, 478: {1: (1, {'@': 300}), 2: (1, {'@': 300}), 3: (1, {'@': 300}), 5: (1, {'@': 300}), 6: (1, {'@': 300}), 7: (1, {'@': 300}), 8: (1, {'@': 300}), 10: (1, {'@': 300}), 11: (1, {'@': 300}), 30: (1, {'@': 300}), 31: (1, {'@': 300}), 12: (1, {'@': 300}), 13: (1, {'@': 300}), 14: (1, {'@': 300}), 15: (1, {'@': 300}), 17: (1, {'@': 300})}, 479: {34: (0, 385)}, 480: {1: (0, 392), 10: (0, 178), 20: (0, 183), 14: (0, 415)}, 481: {10: (0, 185), 60: (0, 191)}, 482: {20: (0, 322), 10: (0, 162), 14: (0, 415), 1: (0, 169)}, 483: {61: (0, 611), 60: (0, 502), 52: (0, 150), 62: (0, 475)}, 484: {20: (0, 592), 10: (0, 601), 14: (0, 415), 1: (0, 609)}, 485: {11: (0, 82), 42: (0, 160), 4: (0, 97), 28: (0, 244), 9: (0, 16), 16: (0, 21), 0: (0, 25)}, 486: {18: (0, 247), 99: (0, 6), 19: (0, 11)}, 487: {1: (1, {'@': 301}), 2: (1, {'@': 301}), 3: (1, {'@': 301}), 5: (1, {'@': 301}), 6: (1, {'@': 301}), 7: (1, {'@': 301}), 8: (1, {'@': 301}), 10: (1, {'@': 301}), 11: (1, {'@': 301}), 30: (1, {'@': 301}), 31: (1, {'@': 301}), 12: (1, {'@': 301}), 13: (1, {'@': 301}), 14: (1, {'@': 301}), 15: (1, {'@': 301}), 17: (1, {'@': 301})}, 488: {28: (0, 350), 0: (0, 291), 9: (0, 297), 11: (0, 82), 42: (0, 360), 4: (0, 97), 16: (0, 364)}, 489: {10: (1, {'@': 302}), 60: (1, {'@': 302})}, 490: {0: (1, {'@': 303}), 26: (1, {'@': 303}), 9: (1, {'@': 303}), 4: (1, {'@': 303}), 16: (1, {'@': 303}), 11: (1, {'@': 303}), 27: (1, {'@': 303}), 18: (1, {'@': 303}), 19: (1, {'@': 303}), 28: (1, {'@': 303}), 29: (1, {'@': 303}), 1: (1, {'@': 303}), 5: (1, {'@': 303}), 3: (1, {'@': 303}), 2: (1, {'@': 303}), 6: (1, {'@': 303}), 7: (1, {'@': 303}), 8: (1, {'@': 303}), 10: (1, {'@': 303}), 30: (1, {'@': 303}), 31: (1, {'@': 303}), 12: (1, {'@': 303}), 13: (1, {'@': 303}), 14: (1, {'@': 303}), 32: (1, {'@': 303}), 15: (1, {'@': 303}), 17: (1, {'@': 303})}, 491: {0: (1, {'@': 304}), 4: (1, {'@': 304}), 18: (1, {'@': 304}), 19: (1, {'@': 304}), 9: (1, {'@': 304}), 28: (1, {'@': 304}), 16: (1, {'@': 304}), 11: (1, {'@': 304})}, 492: {0: (1, {'@': 305}), 9: (1, {'@': 305}), 4: (1, {'@': 305}), 28: (1, {'@': 305}), 16: (1, {'@': 305}), 11: (1, {'@': 305}), 1: (1, {'@': 305}), 2: (1, {'@': 305}), 3: (1, {'@': 305}), 5: (1, {'@': 305}), 6: (1, {'@': 305}), 7: (1, {'@': 305}), 8: (1, {'@': 305}), 10: (1, {'@': 305}), 12: (1, {'@': 305}), 13: (1, {'@': 305}), 14: (1, {'@': 305}), 15: (1, {'@': 305}), 17: (1, {'@': 305}), 30: (1, {'@': 305}), 31: (1, {'@': 305}), 26: (1, {'@': 305}), 18: (1, {'@': 305}), 27: (1, {'@': 305}), 19: (1, {'@': 305}), 29: (1, {'@': 305}), 32: (1, {'@': 305})}, 493: {0: (1, {'@': 306}), 9: (1, {'@': 306}), 4: (1, {'@': 306}), 28: (1, {'@': 306}), 16: (1, {'@': 306}), 11: (1, {'@': 306}), 18: (1, {'@': 306}), 19: (1, {'@': 306})}, 494: {15: (0, 233), 12: (1, {'@': 307}), 1: (1, {'@': 307}), 2: (1, {'@': 307}), 3: (1, {'@': 307}), 5: (1, {'@': 307}), 13: (1, {'@': 307}), 7: (1, {'@': 307}), 8: (1, {'@': 307}), 14: (1, {'@': 307}), 10: (1, {'@': 307}), 17: (1, {'@': 307}), 11: (1, {'@': 307})}, 495: {10: (0, 41), 33: (0, 44), 34: (0, 49), 9: (0, 245)}, 496: {0: (1, {'@': 308}), 9: (1, {'@': 308}), 4: (1, {'@': 308}), 28: (1, {'@': 308}), 16: (1, {'@': 308}), 11: (1, {'@': 308}), 18: (1, {'@': 308}), 19: (1, {'@': 308})}, 497: {0: (1, {'@': 309}), 26: (1, {'@': 309}), 9: (1, {'@': 309}), 4: (1, {'@': 309}), 16: (1, {'@': 309}), 11: (1, {'@': 309}), 27: (1, {'@': 309}), 18: (1, {'@': 309}), 19: (1, {'@': 309}), 28: (1, {'@': 309}), 29: (1, {'@': 309}), 1: (1, {'@': 309}), 5: (1, {'@': 309}), 3: (1, {'@': 309}), 2: (1, {'@': 309}), 6: (1, {'@': 309}), 7: (1, {'@': 309}), 8: (1, {'@': 309}), 10: (1, {'@': 309}), 30: (1, {'@': 309}), 31: (1, {'@': 309}), 12: (1, {'@': 309}), 13: (1, {'@': 309}), 14: (1, {'@': 309}), 32: (1, {'@': 309}), 15: (1, {'@': 309}), 17: (1, {'@': 309})}, 498: {1: (0, 143), 20: (0, 344), 13: (0, 51), 63: (0, 206), 21: (0, 345), 11: (0, 115), 12: (0, 123), 22: (0, 126), 17: (0, 409), 23: (0, 358), 59: (0, 211), 8: (0, 135), 24: (0, 142), 14: (0, 415), 25: (0, 147)}, 499: {61: (0, 611), 62: (0, 616), 100: (0, 623), 76: (0, 627), 77: (0, 635), 52: (0, 150)}, 500: {10: (0, 63), 33: (0, 69), 34: (0, 75)}, 501: {0: (1, {'@': 310}), 9: (1, {'@': 310}), 4: (1, {'@': 310}), 28: (1, {'@': 310}), 16: (1, {'@': 310}), 11: (1, {'@': 310}), 18: (1, {'@': 310}), 19: (1, {'@': 310})}, 502: {1: (1, {'@': 311}), 2: (1, {'@': 311}), 3: (1, {'@': 311}), 5: (1, {'@': 311}), 6: (1, {'@': 311}), 7: (1, {'@': 311}), 8: (1, {'@': 311}), 10: (1, {'@': 311}), 11: (1, {'@': 311}), 30: (1, {'@': 311}), 31: (1, {'@': 311}), 12: (1, {'@': 311}), 13: (1, {'@': 311}), 14: (1, {'@': 311}), 15: (1, {'@': 311}), 17: (1, {'@': 311})}, 503: {47: (0, 155), 28: (0, 159)}, 504: {10: (0, 122), 1: (0, 130), 20: (0, 134), 14: (0, 415)}, 505: {1: (0, 558), 20: (0, 563), 8: (0, 505), 12: (0, 513), 11: (0, 517), 22: (0, 524), 13: (0, 528), 35: (0, 569), 36: (0, 549), 37: (0, 553), 44: (0, 0), 14: (0, 415)}, 506: {1: (1, {'@': 312}), 2: (1, {'@': 312}), 3: (1, {'@': 312}), 5: (1, {'@': 312}), 6: (1, {'@': 312}), 7: (1, {'@': 312}), 8: (1, {'@': 312}), 10: (1, {'@': 312}), 11: (1, {'@': 312}), 12: (1, {'@': 312}), 13: (1, {'@': 312}), 14: (1, {'@': 312}), 15: (1, {'@': 312}), 17: (1, {'@': 312})}, 507: {39: (0, 255)}, 508: {0: (1, {'@': 313}), 9: (1, {'@': 313}), 4: (1, {'@': 313}), 28: (1, {'@': 313}), 16: (1, {'@': 313}), 11: (1, {'@': 313}), 18: (1, {'@': 313}), 19: (1, {'@': 313})}, 509: {19: (1, {'@': 314}), 18: (1, {'@': 314})}, 510: {96: (0, 506), 31: (0, 527), 1: (1, {'@': 315}), 2: (1, {'@': 315}), 3: (1, {'@': 315}), 5: (1, {'@': 315}), 6: (1, {'@': 315}), 7: (1, {'@': 315}), 8: (1, {'@': 315}), 10: (1, {'@': 315}), 11: (1, {'@': 315}), 12: (1, {'@': 315}), 13: (1, {'@': 315}), 14: (1, {'@': 315}), 15: (1, {'@': 315}), 17: (1, {'@': 315})}, 511: {39: (0, 208), 10: (0, 139)}, 512: {9: (1, {'@': 316}), 1: (1, {'@': 316}), 2: (1, {'@': 316}), 3: (1, {'@': 316}), 5: (1, {'@': 316}), 6: (1, {'@': 316}), 7: (1, {'@': 316}), 8: (1, {'@': 316}), 10: (1, {'@': 316}), 30: (1, {'@': 316}), 11: (1, {'@': 316}), 31: (1, {'@': 316}), 12: (1, {'@': 316}), 13: (1, {'@': 316}), 14: (1, {'@': 316}), 15: (1, {'@': 316}), 17: (1, {'@': 316}), 19: (1, {'@': 316}), 18: (1, {'@': 316}), 26: (1, {'@': 316}), 27: (1, {'@': 316}), 0: (1, {'@': 316}), 4: (1, {'@': 316}), 29: (1, {'@': 316}), 32: (1, {'@': 316}), 28: (1, {'@': 316}), 16: (1, {'@': 316})}, 513: {0: (1, {'@': 317}), 1: (1, {'@': 317}), 2: (1, {'@': 317}), 3: (1, {'@': 317}), 4: (1, {'@': 317}), 5: (1, {'@': 317}), 6: (1, {'@': 317}), 7: (1, {'@': 317}), 8: (1, {'@': 317}), 9: (1, {'@': 317}), 10: (1, {'@': 317}), 11: (1, {'@': 317}), 12: (1, {'@': 317}), 13: (1, {'@': 317}), 14: (1, {'@': 317}), 15: (1, {'@': 317}), 16: (1, {'@': 317}), 17: (1, {'@': 317}), 18: (1, {'@': 317}), 19: (1, {'@': 317})}, 514: {12: (1, {'@': 318}), 1: (1, {'@': 318}), 2: (1, {'@': 318}), 3: (1, {'@': 318}), 5: (1, {'@': 318}), 6: (1, {'@': 318}), 13: (1, {'@': 318}), 7: (1, {'@': 318}), 8: (1, {'@': 318}), 14: (1, {'@': 318}), 15: (1, {'@': 318}), 10: (1, {'@': 318}), 17: (1, {'@': 318}), 11: (1, {'@': 318})}, 515: {9: (1, {'@': 319}), 1: (1, {'@': 319}), 2: (1, {'@': 319}), 3: (1, {'@': 319}), 5: (1, {'@': 319}), 6: (1, {'@': 319}), 7: (1, {'@': 319}), 8: (1, {'@': 319}), 10: (1, {'@': 319}), 30: (1, {'@': 319}), 11: (1, {'@': 319}), 31: (1, {'@': 319}), 12: (1, {'@': 319}), 13: (1, {'@': 319}), 14: (1, {'@': 319}), 15: (1, {'@': 319}), 17: (1, {'@': 319}), 19: (1, {'@': 319}), 18: (1, {'@': 319}), 26: (1, {'@': 319}), 27: (1, {'@': 319}), 0: (1, {'@': 319}), 4: (1, {'@': 319}), 29: (1, {'@': 319}), 32: (1, {'@': 319}), 28: (1, {'@': 319}), 16: (1, {'@': 319})}, 516: {12: (1, {'@': 320}), 1: (1, {'@': 320}), 2: (1, {'@': 320}), 3: (1, {'@': 320}), 5: (1, {'@': 320}), 6: (1, {'@': 320}), 13: (1, {'@': 320}), 7: (1, {'@': 320}), 8: (1, {'@': 320}), 14: (1, {'@': 320}), 15: (1, {'@': 320}), 10: (1, {'@': 320}), 17: (1, {'@': 320}), 11: (1, {'@': 320})}, 517: {1: (0, 558), 20: (0, 563), 8: (0, 505), 12: (0, 513), 11: (0, 517), 22: (0, 524), 13: (0, 528), 35: (0, 569), 36: (0, 549), 37: (0, 553), 14: (0, 415), 44: (0, 19)}, 518: {34: (0, 146), 10: (0, 9)}, 519: {29: (0, 431)}, 520: {10: (0, 112), 34: (0, 473)}, 521: {94: (0, 573), 30: (0, 499), 1: (1, {'@': 321}), 2: (1, {'@': 321}), 3: (1, {'@': 321}), 5: (1, {'@': 321}), 6: (1, {'@': 321}), 7: (1, {'@': 321}), 8: (1, {'@': 321}), 10: (1, {'@': 321}), 11: (1, {'@': 321}), 12: (1, {'@': 321}), 13: (1, {'@': 321}), 14: (1, {'@': 321}), 15: (1, {'@': 321}), 17: (1, {'@': 321})}, 522: {0: (1, {'@': 322}), 9: (1, {'@': 322}), 4: (1, {'@': 322}), 28: (1, {'@': 322}), 16: (1, {'@': 322}), 11: (1, {'@': 322}), 1: (1, {'@': 322}), 2: (1, {'@': 322}), 3: (1, {'@': 322}), 5: (1, {'@': 322}), 6: (1, {'@': 322}), 7: (1, {'@': 322}), 8: (1, {'@': 322}), 10: (1, {'@': 322}), 12: (1, {'@': 322}), 13: (1, {'@': 322}), 14: (1, {'@': 322}), 15: (1, {'@': 322}), 17: (1, {'@': 322}), 30: (1, {'@': 322}), 31: (1, {'@': 322}), 26: (1, {'@': 322}), 18: (1, {'@': 322}), 27: (1, {'@': 322}), 19: (1, {'@': 322}), 29: (1, {'@': 322}), 32: (1, {'@': 322})}, 523: {0: (1, {'@': 323}), 9: (1, {'@': 323}), 4: (1, {'@': 323}), 28: (1, {'@': 323}), 16: (1, {'@': 323}), 11: (1, {'@': 323}), 1: (1, {'@': 323}), 2: (1, {'@': 323}), 3: (1, {'@': 323}), 5: (1, {'@': 323}), 6: (1, {'@': 323}), 7: (1, {'@': 323}), 8: (1, {'@': 323}), 10: (1, {'@': 323}), 12: (1, {'@': 323}), 13: (1, {'@': 323}), 14: (1, {'@': 323}), 15: (1, {'@': 323}), 17: (1, {'@': 323}), 30: (1, {'@': 323}), 31: (1, {'@': 323}), 26: (1, {'@': 323}), 18: (1, {'@': 323}), 27: (1, {'@': 323}), 19: (1, {'@': 323}), 29: (1, {'@': 323}), 32: (1, {'@': 323})}, 524: {0: (1, {'@': 54}), 1: (1, {'@': 54}), 2: (1, {'@': 54}), 3: (1, {'@': 54}), 4: (1, {'@': 54}), 5: (1, {'@': 54}), 6: (1, {'@': 54}), 7: (1, {'@': 54}), 8: (1, {'@': 54}), 9: (1, {'@': 54}), 10: (1, {'@': 54}), 11: (1, {'@': 54}), 12: (1, {'@': 54}), 13: (1, {'@': 54}), 14: (1, {'@': 54}), 15: (1, {'@': 54}), 16: (1, {'@': 54}), 17: (1, {'@': 54}), 18: (1, {'@': 54}), 19: (1, {'@': 54})}, 525: {26: (1, {'@': 324}), 29: (1, {'@': 324})}, 526: {0: (1, {'@': 325}), 9: (1, {'@': 325}), 4: (1, {'@': 325}), 28: (1, {'@': 325}), 16: (1, {'@': 325}), 11: (1, {'@': 325}), 1: (1, {'@': 325}), 2: (1, {'@': 325}), 3: (1, {'@': 325}), 5: (1, {'@': 325}), 6: (1, {'@': 325}), 7: (1, {'@': 325}), 8: (1, {'@': 325}), 10: (1, {'@': 325}), 12: (1, {'@': 325}), 13: (1, {'@': 325}), 14: (1, {'@': 325}), 15: (1, {'@': 325}), 17: (1, {'@': 325}), 30: (1, {'@': 325}), 31: (1, {'@': 325}), 26: (1, {'@': 325}), 18: (1, {'@': 325}), 27: (1, {'@': 325}), 19: (1, {'@': 325}), 29: (1, {'@': 325}), 32: (1, {'@': 325})}, 527: {61: (0, 611), 62: (0, 616), 76: (0, 627), 77: (0, 635), 52: (0, 150), 100: (0, 153)}, 528: {1: (0, 558), 20: (0, 563), 8: (0, 505), 12: (0, 513), 11: (0, 517), 22: (0, 24), 13: (0, 528), 35: (0, 569), 36: (0, 549), 37: (0, 553), 44: (0, 28), 14: (0, 415)}, 529: {14: (0, 415), 20: (0, 534), 1: (0, 13)}, 530: {26: (1, {'@': 326}), 29: (1, {'@': 326})}, 531: {15: (0, 532), 12: (1, {'@': 327}), 1: (1, {'@': 327}), 2: (1, {'@': 327}), 3: (1, {'@': 327}), 5: (1, {'@': 327}), 13: (1, {'@': 327}), 7: (1, {'@': 327}), 8: (1, {'@': 327}), 14: (1, {'@': 327}), 10: (1, {'@': 327}), 17: (1, {'@': 327}), 11: (1, {'@': 327})}, 532: {12: (1, {'@': 328}), 1: (1, {'@': 328}), 2: (1, {'@': 328}), 3: (1, {'@': 328}), 5: (1, {'@': 328}), 13: (1, {'@': 328}), 7: (1, {'@': 328}), 8: (1, {'@': 328}), 14: (1, {'@': 328}), 10: (1, {'@': 328}), 17: (1, {'@': 328}), 11: (1, {'@': 328})}, 533: {0: (1, {'@': 329}), 9: (1, {'@': 329}), 4: (1, {'@': 329}), 28: (1, {'@': 329}), 16: (1, {'@': 329}), 11: (1, {'@': 329}), 1: (1, {'@': 329}), 2: (1, {'@': 329}), 3: (1, {'@': 329}), 5: (1, {'@': 329}), 6: (1, {'@': 329}), 7: (1, {'@': 329}), 8: (1, {'@': 329}), 10: (1, {'@': 329}), 12: (1, {'@': 329}), 13: (1, {'@': 329}), 14: (1, {'@': 329}), 15: (1, {'@': 329}), 17: (1, {'@': 329}), 30: (1, {'@': 329}), 31: (1, {'@': 329}), 26: (1, {'@': 329}), 18: (1, {'@': 329}), 27: (1, {'@': 329}), 19: (1, {'@': 329}), 29: (1, {'@': 329}), 32: (1, {'@': 329})}, 534: {0: (1, {'@': 330}), 9: (1, {'@': 330}), 4: (1, {'@': 330}), 28: (1, {'@': 330}), 16: (1, {'@': 330}), 11: (1, {'@': 330}), 1: (1, {'@': 330}), 2: (1, {'@': 330}), 3: (1, {'@': 330}), 5: (1, {'@': 330}), 6: (1, {'@': 330}), 7: (1, {'@': 330}), 8: (1, {'@': 330}), 10: (1, {'@': 330}), 12: (1, {'@': 330}), 13: (1, {'@': 330}), 14: (1, {'@': 330}), 15: (1, {'@': 330}), 17: (1, {'@': 330}), 30: (1, {'@': 330}), 31: (1, {'@': 330}), 26: (1, {'@': 330}), 18: (1, {'@': 330}), 27: (1, {'@': 330}), 19: (1, {'@': 330}), 29: (1, {'@': 330}), 32: (1, {'@': 330})}, 535: {29: (0, 74)}, 536: {12: (1, {'@': 331}), 1: (1, {'@': 331}), 2: (1, {'@': 331}), 3: (1, {'@': 331}), 5: (1, {'@': 331}), 6: (1, {'@': 331}), 13: (1, {'@': 331}), 7: (1, {'@': 331}), 8: (1, {'@': 331}), 14: (1, {'@': 331}), 15: (1, {'@': 331}), 10: (1, {'@': 331}), 17: (1, {'@': 331}), 11: (1, {'@': 331})}, 537: {39: (0, 144)}, 538: {0: (1, {'@': 332}), 9: (1, {'@': 332}), 4: (1, {'@': 332}), 28: (1, {'@': 332}), 16: (1, {'@': 332}), 11: (1, {'@': 332}), 1: (1, {'@': 332}), 2: (1, {'@': 332}), 3: (1, {'@': 332}), 5: (1, {'@': 332}), 6: (1, {'@': 332}), 7: (1, {'@': 332}), 8: (1, {'@': 332}), 10: (1, {'@': 332}), 12: (1, {'@': 332}), 13: (1, {'@': 332}), 14: (1, {'@': 332}), 15: (1, {'@': 332}), 17: (1, {'@': 332}), 30: (1, {'@': 332}), 31: (1, {'@': 332}), 26: (1, {'@': 332}), 18: (1, {'@': 332}), 27: (1, {'@': 332}), 19: (1, {'@': 332}), 29: (1, {'@': 332}), 32: (1, {'@': 332})}, 539: {12: (1, {'@': 333}), 1: (1, {'@': 333}), 2: (1, {'@': 333}), 3: (1, {'@': 333}), 5: (1, {'@': 333}), 6: (1, {'@': 333}), 13: (1, {'@': 333}), 7: (1, {'@': 333}), 8: (1, {'@': 333}), 14: (1, {'@': 333}), 15: (1, {'@': 333}), 10: (1, {'@': 333}), 17: (1, {'@': 333}), 11: (1, {'@': 333})}, 540: {0: (1, {'@': 334}), 9: (1, {'@': 334}), 4: (1, {'@': 334}), 28: (1, {'@': 334}), 16: (1, {'@': 334}), 11: (1, {'@': 334}), 1: (1, {'@': 334}), 2: (1, {'@': 334}), 3: (1, {'@': 334}), 5: (1, {'@': 334}), 6: (1, {'@': 334}), 7: (1, {'@': 334}), 8: (1, {'@': 334}), 10: (1, {'@': 334}), 12: (1, {'@': 334}), 13: (1, {'@': 334}), 14: (1, {'@': 334}), 15: (1, {'@': 334}), 17: (1, {'@': 334}), 30: (1, {'@': 334}), 31: (1, {'@': 334}), 26: (1, {'@': 334}), 18: (1, {'@': 334}), 27: (1, {'@': 334}), 19: (1, {'@': 334}), 29: (1, {'@': 334}), 32: (1, {'@': 334})}, 541: {47: (0, 177), 28: (0, 166)}, 542: {0: (0, 164), 16: (0, 38), 11: (0, 82), 42: (0, 43), 4: (0, 97), 9: (0, 50), 12: (1, {'@': 335}), 1: (1, {'@': 335}), 2: (1, {'@': 335}), 3: (1, {'@': 335}), 5: (1, {'@': 335}), 6: (1, {'@': 335}), 13: (1, {'@': 335}), 7: (1, {'@': 335}), 8: (1, {'@': 335}), 14: (1, {'@': 335}), 15: (1, {'@': 335}), 10: (1, {'@': 335}), 17: (1, {'@': 335})}, 543: {0: (1, {'@': 336}), 26: (1, {'@': 336}), 9: (1, {'@': 336}), 4: (1, {'@': 336}), 16: (1, {'@': 336}), 11: (1, {'@': 336}), 27: (1, {'@': 336}), 18: (1, {'@': 336}), 19: (1, {'@': 336}), 28: (1, {'@': 336}), 29: (1, {'@': 336}), 1: (1, {'@': 336}), 5: (1, {'@': 336}), 3: (1, {'@': 336}), 2: (1, {'@': 336}), 6: (1, {'@': 336}), 7: (1, {'@': 336}), 8: (1, {'@': 336}), 10: (1, {'@': 336}), 30: (1, {'@': 336}), 31: (1, {'@': 336}), 12: (1, {'@': 336}), 13: (1, {'@': 336}), 14: (1, {'@': 336}), 32: (1, {'@': 336}), 15: (1, {'@': 336}), 17: (1, {'@': 336})}, 544: {12: (1, {'@': 337}), 1: (1, {'@': 337}), 13: (1, {'@': 337}), 14: (1, {'@': 337}), 17: (1, {'@': 337}), 49: (1, {'@': 337})}, 545: {69: (1, {'@': 338})}, 546: {20: (0, 223), 1: (0, 226), 14: (0, 415)}, 547: {23: (0, 229), 1: (0, 210), 20: (0, 249), 67: (0, 170), 64: (0, 405), 8: (0, 418), 52: (0, 171), 101: (0, 174), 13: (0, 419), 102: (0, 176), 11: (0, 420), 12: (0, 620), 103: (0, 180), 17: (0, 182), 87: (0, 186), 41: (0, 421), 66: (0, 190), 68: (0, 422), 22: (0, 3), 104: (0, 193), 14: (0, 415)}, 548: {0: (1, {'@': 339}), 26: (1, {'@': 339}), 9: (1, {'@': 339}), 4: (1, {'@': 339}), 16: (1, {'@': 339}), 11: (1, {'@': 339}), 27: (1, {'@': 339}), 18: (1, {'@': 339}), 19: (1, {'@': 339}), 28: (1, {'@': 339}), 29: (1, {'@': 339}), 1: (1, {'@': 339}), 5: (1, {'@': 339}), 3: (1, {'@': 339}), 2: (1, {'@': 339}), 6: (1, {'@': 339}), 7: (1, {'@': 339}), 8: (1, {'@': 339}), 10: (1, {'@': 339}), 30: (1, {'@': 339}), 31: (1, {'@': 339}), 12: (1, {'@': 339}), 13: (1, {'@': 339}), 14: (1, {'@': 339}), 32: (1, {'@': 339}), 15: (1, {'@': 339}), 17: (1, {'@': 339})}, 549: {0: (1, {'@': 340}), 1: (1, {'@': 340}), 2: (1, {'@': 340}), 3: (1, {'@': 340}), 4: (1, {'@': 340}), 5: (1, {'@': 340}), 6: (1, {'@': 340}), 7: (1, {'@': 340}), 8: (1, {'@': 340}), 9: (1, {'@': 340}), 10: (1, {'@': 340}), 11: (1, {'@': 340}), 12: (1, {'@': 340}), 13: (1, {'@': 340}), 14: (1, {'@': 340}), 15: (1, {'@': 340}), 16: (1, {'@': 340}), 17: (1, {'@': 340}), 18: (1, {'@': 340}), 19: (1, {'@': 340})}, 550: {69: (1, {'@': 341})}, 551: {10: (0, 41), 33: (0, 44), 34: (0, 49), 0: (1, {'@': 342}), 5: (1, {'@': 342}), 3: (1, {'@': 342}), 6: (1, {'@': 342}), 8: (1, {'@': 342}), 9: (1, {'@': 342}), 30: (1, {'@': 342}), 13: (1, {'@': 342}), 19: (1, {'@': 342}), 32: (1, {'@': 342}), 15: (1, {'@': 342}), 17: (1, {'@': 342}), 1: (1, {'@': 342}), 2: (1, {'@': 342}), 4: (1, {'@': 342}), 7: (1, {'@': 342}), 11: (1, {'@': 342}), 31: (1, {'@': 342}), 12: (1, {'@': 342}), 26: (1, {'@': 342}), 18: (1, {'@': 342}), 27: (1, {'@': 342}), 29: (1, {'@': 342}), 14: (1, {'@': 342}), 28: (1, {'@': 342}), 16: (1, {'@': 342})}, 552: {0: (1, {'@': 343}), 9: (1, {'@': 343}), 4: (1, {'@': 343}), 28: (1, {'@': 343}), 16: (1, {'@': 343}), 11: (1, {'@': 343}), 1: (1, {'@': 343}), 2: (1, {'@': 343}), 3: (1, {'@': 343}), 5: (1, {'@': 343}), 6: (1, {'@': 343}), 7: (1, {'@': 343}), 8: (1, {'@': 343}), 10: (1, {'@': 343}), 12: (1, {'@': 343}), 13: (1, {'@': 343}), 14: (1, {'@': 343}), 15: (1, {'@': 343}), 17: (1, {'@': 343}), 30: (1, {'@': 343}), 31: (1, {'@': 343}), 26: (1, {'@': 343}), 18: (1, {'@': 343}), 27: (1, {'@': 343}), 19: (1, {'@': 343}), 29: (1, {'@': 343}), 32: (1, {'@': 343})}, 553: {0: (1, {'@': 344}), 1: (1, {'@': 344}), 2: (1, {'@': 344}), 3: (1, {'@': 344}), 4: (1, {'@': 344}), 5: (1, {'@': 344}), 6: (1, {'@': 344}), 7: (1, {'@': 344}), 8: (1, {'@': 344}), 9: (1, {'@': 344}), 10: (1, {'@': 344}), 11: (1, {'@': 344}), 12: (1, {'@': 344}), 13: (1, {'@': 344}), 14: (1, {'@': 344}), 15: (1, {'@': 344}), 16: (1, {'@': 344}), 17: (1, {'@': 344}), 18: (1, {'@': 344}), 19: (1, {'@': 344})}, 554: {69: (1, {'@': 345})}, 555: {10: (0, 63), 33: (0, 69), 34: (0, 75), 0: (1, {'@': 346}), 5: (1, {'@': 346}), 3: (1, {'@': 346}), 6: (1, {'@': 346}), 8: (1, {'@': 346}), 9: (1, {'@': 346}), 30: (1, {'@': 346}), 13: (1, {'@': 346}), 19: (1, {'@': 346}), 32: (1, {'@': 346}), 15: (1, {'@': 346}), 17: (1, {'@': 346}), 1: (1, {'@': 346}), 2: (1, {'@': 346}), 4: (1, {'@': 346}), 7: (1, {'@': 346}), 11: (1, {'@': 346}), 31: (1, {'@': 346}), 12: (1, {'@': 346}), 26: (1, {'@': 346}), 18: (1, {'@': 346}), 27: (1, {'@': 346}), 29: (1, {'@': 346}), 14: (1, {'@': 346}), 28: (1, {'@': 346}), 16: (1, {'@': 346})}, 556: {0: (1, {'@': 347}), 1: (1, {'@': 347}), 5: (1, {'@': 347}), 3: (1, {'@': 347}), 2: (1, {'@': 347}), 6: (1, {'@': 347}), 4: (1, {'@': 347}), 7: (1, {'@': 347}), 8: (1, {'@': 347}), 9: (1, {'@': 347}), 10: (1, {'@': 347}), 30: (1, {'@': 347}), 11: (1, {'@': 347}), 31: (1, {'@': 347}), 12: (1, {'@': 347}), 26: (1, {'@': 347}), 18: (1, {'@': 347}), 27: (1, {'@': 347}), 13: (1, {'@': 347}), 19: (1, {'@': 347}), 29: (1, {'@': 347}), 14: (1, {'@': 347}), 32: (1, {'@': 347}), 15: (1, {'@': 347}), 28: (1, {'@': 347}), 16: (1, {'@': 347}), 17: (1, {'@': 347})}, 557: {0: (1, {'@': 348}), 9: (1, {'@': 348}), 4: (1, {'@': 348}), 28: (1, {'@': 348}), 16: (1, {'@': 348}), 11: (1, {'@': 348}), 1: (1, {'@': 348}), 2: (1, {'@': 348}), 3: (1, {'@': 348}), 5: (1, {'@': 348}), 6: (1, {'@': 348}), 7: (1, {'@': 348}), 8: (1, {'@': 348}), 10: (1, {'@': 348}), 12: (1, {'@': 348}), 13: (1, {'@': 348}), 14: (1, {'@': 348}), 15: (1, {'@': 348}), 17: (1, {'@': 348}), 30: (1, {'@': 348}), 31: (1, {'@': 348}), 26: (1, {'@': 348}), 18: (1, {'@': 348}), 27: (1, {'@': 348}), 19: (1, {'@': 348}), 29: (1, {'@': 348}), 32: (1, {'@': 348})}, 558: {10: (0, 41), 33: (0, 44), 34: (0, 49), 9: (0, 245), 1: (1, {'@': 349}), 2: (1, {'@': 349}), 3: (1, {'@': 349}), 5: (1, {'@': 349}), 6: (1, {'@': 349}), 7: (1, {'@': 349}), 8: (1, {'@': 349}), 11: (1, {'@': 349}), 12: (1, {'@': 349}), 13: (1, {'@': 349}), 14: (1, {'@': 349}), 15: (1, {'@': 349}), 17: (1, {'@': 349}), 19: (1, {'@': 349}), 18: (1, {'@': 349}), 0: (1, {'@': 349}), 4: (1, {'@': 349}), 16: (1, {'@': 349})}, 559: {69: (1, {'@': 350})}, 560: {86: (0, 606), 18: (0, 575), 27: (0, 571)}, 561: {0: (1, {'@': 351}), 5: (1, {'@': 351}), 3: (1, {'@': 351}), 6: (1, {'@': 351}), 8: (1, {'@': 351}), 9: (1, {'@': 351}), 10: (1, {'@': 351}), 30: (1, {'@': 351}), 13: (1, {'@': 351}), 19: (1, {'@': 351}), 32: (1, {'@': 351}), 15: (1, {'@': 351}), 17: (1, {'@': 351}), 1: (1, {'@': 351}), 2: (1, {'@': 351}), 4: (1, {'@': 351}), 7: (1, {'@': 351}), 11: (1, {'@': 351}), 31: (1, {'@': 351}), 12: (1, {'@': 351}), 26: (1, {'@': 351}), 18: (1, {'@': 351}), 27: (1, {'@': 351}), 29: (1, {'@': 351}), 14: (1, {'@': 351}), 28: (1, {'@': 351}), 16: (1, {'@': 351})}, 562: {0: (1, {'@': 352}), 9: (1, {'@': 352}), 4: (1, {'@': 352}), 28: (1, {'@': 352}), 16: (1, {'@': 352}), 11: (1, {'@': 352}), 1: (1, {'@': 352}), 2: (1, {'@': 352}), 3: (1, {'@': 352}), 5: (1, {'@': 352}), 6: (1, {'@': 352}), 7: (1, {'@': 352}), 8: (1, {'@': 352}), 10: (1, {'@': 352}), 12: (1, {'@': 352}), 13: (1, {'@': 352}), 14: (1, {'@': 352}), 15: (1, {'@': 352}), 17: (1, {'@': 352}), 30: (1, {'@': 352}), 31: (1, {'@': 352}), 26: (1, {'@': 352}), 18: (1, {'@': 352}), 27: (1, {'@': 352}), 19: (1, {'@': 352}), 29: (1, {'@': 352}), 32: (1, {'@': 352})}, 563: {10: (0, 63), 33: (0, 69), 34: (0, 75), 1: (1, {'@': 353}), 2: (1, {'@': 353}), 3: (1, {'@': 353}), 5: (1, {'@': 353}), 6: (1, {'@': 353}), 7: (1, {'@': 353}), 8: (1, {'@': 353}), 11: (1, {'@': 353}), 12: (1, {'@': 353}), 13: (1, {'@': 353}), 14: (1, {'@': 353}), 15: (1, {'@': 353}), 17: (1, {'@': 353}), 19: (1, {'@': 353}), 18: (1, {'@': 353}), 0: (1, {'@': 353}), 4: (1, {'@': 353}), 9: (1, {'@': 353}), 16: (1, {'@': 353})}, 564: {34: (1, {'@': 354}), 33: (1, {'@': 354}), 10: (1, {'@': 354}), 0: (1, {'@': 354}), 5: (1, {'@': 354}), 3: (1, {'@': 354}), 6: (1, {'@': 354}), 8: (1, {'@': 354}), 9: (1, {'@': 354}), 30: (1, {'@': 354}), 13: (1, {'@': 354}), 19: (1, {'@': 354}), 32: (1, {'@': 354}), 15: (1, {'@': 354}), 17: (1, {'@': 354}), 1: (1, {'@': 354}), 2: (1, {'@': 354}), 4: (1, {'@': 354}), 7: (1, {'@': 354}), 11: (1, {'@': 354}), 31: (1, {'@': 354}), 12: (1, {'@': 354}), 26: (1, {'@': 354}), 18: (1, {'@': 354}), 27: (1, {'@': 354}), 14: (1, {'@': 354}), 29: (1, {'@': 354}), 28: (1, {'@': 354}), 16: (1, {'@': 354}), 69: (1, {'@': 354}), 88: (1, {'@': 354}), 89: (1, {'@': 354})}, 565: {19: (1, {'@': 355}), 18: (1, {'@': 355})}, 566: {10: (0, 618), 34: (0, 105)}, 567: {0: (1, {'@': 356}), 5: (1, {'@': 356}), 3: (1, {'@': 356}), 6: (1, {'@': 356}), 8: (1, {'@': 356}), 9: (1, {'@': 356}), 10: (1, {'@': 356}), 30: (1, {'@': 356}), 13: (1, {'@': 356}), 19: (1, {'@': 356}), 32: (1, {'@': 356}), 15: (1, {'@': 356}), 17: (1, {'@': 356}), 1: (1, {'@': 356}), 2: (1, {'@': 356}), 4: (1, {'@': 356}), 7: (1, {'@': 356}), 11: (1, {'@': 356}), 31: (1, {'@': 356}), 12: (1, {'@': 356}), 26: (1, {'@': 356}), 18: (1, {'@': 356}), 27: (1, {'@': 356}), 29: (1, {'@': 356}), 14: (1, {'@': 356}), 28: (1, {'@': 356}), 16: (1, {'@': 356})}, 568: {0: (1, {'@': 357}), 9: (1, {'@': 357}), 4: (1, {'@': 357}), 28: (1, {'@': 357}), 16: (1, {'@': 357}), 11: (1, {'@': 357}), 1: (1, {'@': 357}), 2: (1, {'@': 357}), 3: (1, {'@': 357}), 5: (1, {'@': 357}), 6: (1, {'@': 357}), 7: (1, {'@': 357}), 8: (1, {'@': 357}), 10: (1, {'@': 357}), 12: (1, {'@': 357}), 13: (1, {'@': 357}), 14: (1, {'@': 357}), 15: (1, {'@': 357}), 17: (1, {'@': 357}), 30: (1, {'@': 357}), 31: (1, {'@': 357}), 26: (1, {'@': 357}), 18: (1, {'@': 357}), 27: (1, {'@': 357}), 19: (1, {'@': 357}), 29: (1, {'@': 357}), 32: (1, {'@': 357})}, 569: {0: (0, 164), 16: (0, 38), 11: (0, 82), 42: (0, 43), 4: (0, 97), 9: (0, 50), 1: (1, {'@': 358}), 2: (1, {'@': 358}), 3: (1, {'@': 358}), 5: (1, {'@': 358}), 6: (1, {'@': 358}), 7: (1, {'@': 358}), 8: (1, {'@': 358}), 10: (1, {'@': 358}), 12: (1, {'@': 358}), 13: (1, {'@': 358}), 14: (1, {'@': 358}), 15: (1, {'@': 358}), 17: (1, {'@': 358}), 19: (1, {'@': 358}), 18: (1, {'@': 358})}, 570: {1: (0, 558), 20: (0, 563), 8: (0, 505), 12: (0, 513), 11: (0, 517), 22: (0, 524), 13: (0, 528), 35: (0, 569), 36: (0, 549), 37: (0, 553), 14: (0, 415), 44: (0, 434)}, 571: {10: (0, 221), 17: (1, {'@': 359}), 1: (1, {'@': 359}), 12: (1, {'@': 359}), 13: (1, {'@': 359}), 8: (1, {'@': 359}), 14: (1, {'@': 359}), 87: (1, {'@': 359}), 52: (1, {'@': 359}), 11: (1, {'@': 359})}, 572: {0: (1, {'@': 360}), 26: (1, {'@': 360}), 9: (1, {'@': 360}), 4: (1, {'@': 360}), 16: (1, {'@': 360}), 11: (1, {'@': 360}), 27: (1, {'@': 360}), 18: (1, {'@': 360}), 19: (1, {'@': 360}), 28: (1, {'@': 360}), 29: (1, {'@': 360}), 1: (1, {'@': 360}), 5: (1, {'@': 360}), 3: (1, {'@': 360}), 2: (1, {'@': 360}), 6: (1, {'@': 360}), 7: (1, {'@': 360}), 8: (1, {'@': 360}), 10: (1, {'@': 360}), 30: (1, {'@': 360}), 31: (1, {'@': 360}), 12: (1, {'@': 360}), 13: (1, {'@': 360}), 14: (1, {'@': 360}), 32: (1, {'@': 360}), 15: (1, {'@': 360}), 17: (1, {'@': 360})}, 573: {1: (1, {'@': 361}), 2: (1, {'@': 361}), 3: (1, {'@': 361}), 5: (1, {'@': 361}), 6: (1, {'@': 361}), 7: (1, {'@': 361}), 8: (1, {'@': 361}), 10: (1, {'@': 361}), 11: (1, {'@': 361}), 12: (1, {'@': 361}), 13: (1, {'@': 361}), 14: (1, {'@': 361}), 15: (1, {'@': 361}), 17: (1, {'@': 361})}, 574: {0: (1, {'@': 362}), 9: (1, {'@': 362}), 4: (1, {'@': 362}), 28: (1, {'@': 362}), 16: (1, {'@': 362}), 11: (1, {'@': 362}), 1: (1, {'@': 362}), 2: (1, {'@': 362}), 3: (1, {'@': 362}), 5: (1, {'@': 362}), 6: (1, {'@': 362}), 7: (1, {'@': 362}), 8: (1, {'@': 362}), 10: (1, {'@': 362}), 12: (1, {'@': 362}), 13: (1, {'@': 362}), 14: (1, {'@': 362}), 15: (1, {'@': 362}), 17: (1, {'@': 362}), 30: (1, {'@': 362}), 31: (1, {'@': 362}), 26: (1, {'@': 362}), 18: (1, {'@': 362}), 27: (1, {'@': 362}), 19: (1, {'@': 362}), 29: (1, {'@': 362}), 32: (1, {'@': 362})}, 575: {10: (0, 231), 17: (1, {'@': 363}), 1: (1, {'@': 363}), 12: (1, {'@': 363}), 13: (1, {'@': 363}), 8: (1, {'@': 363}), 14: (1, {'@': 363}), 87: (1, {'@': 363}), 52: (1, {'@': 363}), 11: (1, {'@': 363})}, 576: {12: (1, {'@': 364}), 1: (1, {'@': 364}), 2: (1, {'@': 364}), 3: (1, {'@': 364}), 5: (1, {'@': 364}), 6: (1, {'@': 364}), 13: (1, {'@': 364}), 7: (1, {'@': 364}), 8: (1, {'@': 364}), 14: (1, {'@': 364}), 15: (1, {'@': 364}), 10: (1, {'@': 364}), 17: (1, {'@': 364}), 11: (1, {'@': 364})}, 577: {0: (1, {'@': 365}), 26: (1, {'@': 365}), 9: (1, {'@': 365}), 4: (1, {'@': 365}), 16: (1, {'@': 365}), 11: (1, {'@': 365}), 27: (1, {'@': 365}), 18: (1, {'@': 365}), 19: (1, {'@': 365}), 28: (1, {'@': 365}), 29: (1, {'@': 365}), 1: (1, {'@': 365}), 5: (1, {'@': 365}), 3: (1, {'@': 365}), 2: (1, {'@': 365}), 6: (1, {'@': 365}), 7: (1, {'@': 365}), 8: (1, {'@': 365}), 10: (1, {'@': 365}), 30: (1, {'@': 365}), 31: (1, {'@': 365}), 12: (1, {'@': 365}), 13: (1, {'@': 365}), 14: (1, {'@': 365}), 32: (1, {'@': 365}), 15: (1, {'@': 365}), 17: (1, {'@': 365})}, 578: {19: (1, {'@': 366}), 18: (1, {'@': 366})}, 579: {0: (1, {'@': 367}), 9: (1, {'@': 367}), 4: (1, {'@': 367}), 28: (1, {'@': 367}), 16: (1, {'@': 367}), 11: (1, {'@': 367}), 1: (1, {'@': 367}), 2: (1, {'@': 367}), 3: (1, {'@': 367}), 5: (1, {'@': 367}), 6: (1, {'@': 367}), 7: (1, {'@': 367}), 8: (1, {'@': 367}), 10: (1, {'@': 367}), 12: (1, {'@': 367}), 13: (1, {'@': 367}), 14: (1, {'@': 367}), 15: (1, {'@': 367}), 17: (1, {'@': 367}), 30: (1, {'@': 367}), 31: (1, {'@': 367}), 26: (1, {'@': 367}), 18: (1, {'@': 367}), 27: (1, {'@': 367}), 19: (1, {'@': 367}), 29: (1, {'@': 367}), 32: (1, {'@': 367})}, 580: {10: (0, 202), 38: (0, 205)}, 581: {1: (0, 558), 20: (0, 563), 8: (0, 505), 12: (0, 513), 44: (0, 65), 11: (0, 517), 22: (0, 524), 13: (0, 528), 35: (0, 569), 36: (0, 549), 37: (0, 553), 14: (0, 415)}, 582: {12: (1, {'@': 368}), 1: (1, {'@': 368}), 2: (1, {'@': 368}), 3: (1, {'@': 368}), 5: (1, {'@': 368}), 13: (1, {'@': 368}), 7: (1, {'@': 368}), 8: (1, {'@': 368}), 14: (1, {'@': 368}), 10: (1, {'@': 368}), 17: (1, {'@': 368}), 11: (1, {'@': 368})}, 583: {0: (1, {'@': 369}), 9: (1, {'@': 369}), 4: (1, {'@': 369}), 28: (1, {'@': 369}), 16: (1, {'@': 369}), 11: (1, {'@': 369}), 1: (1, {'@': 369}), 2: (1, {'@': 369}), 3: (1, {'@': 369}), 5: (1, {'@': 369}), 6: (1, {'@': 369}), 7: (1, {'@': 369}), 8: (1, {'@': 369}), 10: (1, {'@': 369}), 12: (1, {'@': 369}), 13: (1, {'@': 369}), 14: (1, {'@': 369}), 15: (1, {'@': 369}), 17: (1, {'@': 369}), 30: (1, {'@': 369}), 31: (1, {'@': 369}), 26: (1, {'@': 369}), 18: (1, {'@': 369}), 27: (1, {'@': 369}), 19: (1, {'@': 369}), 29: (1, {'@': 369}), 32: (1, {'@': 369})}, 584: {0: (1, {'@': 370}), 9: (1, {'@': 370}), 4: (1, {'@': 370}), 28: (1, {'@': 370}), 16: (1, {'@': 370}), 11: (1, {'@': 370}), 1: (1, {'@': 370}), 2: (1, {'@': 370}), 3: (1, {'@': 370}), 5: (1, {'@': 370}), 6: (1, {'@': 370}), 7: (1, {'@': 370}), 8: (1, {'@': 370}), 10: (1, {'@': 370}), 12: (1, {'@': 370}), 13: (1, {'@': 370}), 14: (1, {'@': 370}), 15: (1, {'@': 370}), 17: (1, {'@': 370}), 30: (1, {'@': 370}), 31: (1, {'@': 370}), 26: (1, {'@': 370}), 18: (1, {'@': 370}), 27: (1, {'@': 370}), 19: (1, {'@': 370}), 29: (1, {'@': 370}), 32: (1, {'@': 370})}, 585: {75: (0, 531), 15: (0, 215), 6: (0, 121), 12: (1, {'@': 371}), 1: (1, {'@': 371}), 2: (1, {'@': 371}), 3: (1, {'@': 371}), 5: (1, {'@': 371}), 13: (1, {'@': 371}), 7: (1, {'@': 371}), 8: (1, {'@': 371}), 14: (1, {'@': 371}), 10: (1, {'@': 371}), 17: (1, {'@': 371}), 11: (1, {'@': 371})}, 586: {15: (0, 18), 12: (1, {'@': 372}), 1: (1, {'@': 372}), 2: (1, {'@': 372}), 3: (1, {'@': 372}), 5: (1, {'@': 372}), 13: (1, {'@': 372}), 7: (1, {'@': 372}), 8: (1, {'@': 372}), 14: (1, {'@': 372}), 10: (1, {'@': 372}), 17: (1, {'@': 372}), 11: (1, {'@': 372})}, 587: {0: (1, {'@': 373}), 9: (1, {'@': 373}), 4: (1, {'@': 373}), 28: (1, {'@': 373}), 16: (1, {'@': 373}), 11: (1, {'@': 373}), 1: (1, {'@': 373}), 2: (1, {'@': 373}), 3: (1, {'@': 373}), 5: (1, {'@': 373}), 6: (1, {'@': 373}), 7: (1, {'@': 373}), 8: (1, {'@': 373}), 10: (1, {'@': 373}), 12: (1, {'@': 373}), 13: (1, {'@': 373}), 14: (1, {'@': 373}), 15: (1, {'@': 373}), 17: (1, {'@': 373}), 30: (1, {'@': 373}), 31: (1, {'@': 373}), 26: (1, {'@': 373}), 18: (1, {'@': 373}), 27: (1, {'@': 373}), 19: (1, {'@': 373}), 29: (1, {'@': 373}), 32: (1, {'@': 373})}, 588: {0: (1, {'@': 374}), 26: (1, {'@': 374}), 9: (1, {'@': 374}), 4: (1, {'@': 374}), 16: (1, {'@': 374}), 11: (1, {'@': 374}), 27: (1, {'@': 374}), 18: (1, {'@': 374}), 19: (1, {'@': 374}), 28: (1, {'@': 374}), 29: (1, {'@': 374}), 1: (1, {'@': 374}), 5: (1, {'@': 374}), 3: (1, {'@': 374}), 2: (1, {'@': 374}), 6: (1, {'@': 374}), 7: (1, {'@': 374}), 8: (1, {'@': 374}), 10: (1, {'@': 374}), 30: (1, {'@': 374}), 31: (1, {'@': 374}), 12: (1, {'@': 374}), 13: (1, {'@': 374}), 14: (1, {'@': 374}), 32: (1, {'@': 374}), 15: (1, {'@': 374}), 17: (1, {'@': 374})}, 589: {0: (1, {'@': 375}), 9: (1, {'@': 375}), 4: (1, {'@': 375}), 28: (1, {'@': 375}), 16: (1, {'@': 375}), 11: (1, {'@': 375}), 1: (1, {'@': 375}), 2: (1, {'@': 375}), 3: (1, {'@': 375}), 5: (1, {'@': 375}), 6: (1, {'@': 375}), 7: (1, {'@': 375}), 8: (1, {'@': 375}), 10: (1, {'@': 375}), 12: (1, {'@': 375}), 13: (1, {'@': 375}), 14: (1, {'@': 375}), 15: (1, {'@': 375}), 17: (1, {'@': 375}), 30: (1, {'@': 375}), 31: (1, {'@': 375}), 26: (1, {'@': 375}), 18: (1, {'@': 375}), 27: (1, {'@': 375}), 19: (1, {'@': 375}), 29: (1, {'@': 375}), 32: (1, {'@': 375})}, 590: {12: (1, {'@': 376}), 1: (1, {'@': 376}), 2: (1, {'@': 376}), 3: (1, {'@': 376}), 5: (1, {'@': 376}), 13: (1, {'@': 376}), 7: (1, {'@': 376}), 8: (1, {'@': 376}), 14: (1, {'@': 376}), 10: (1, {'@': 376}), 17: (1, {'@': 376}), 11: (1, {'@': 376})}, 591: {0: (1, {'@': 377}), 26: (1, {'@': 377}), 9: (1, {'@': 377}), 4: (1, {'@': 377}), 16: (1, {'@': 377}), 11: (1, {'@': 377}), 27: (1, {'@': 377}), 18: (1, {'@': 377}), 19: (1, {'@': 377}), 28: (1, {'@': 377}), 29: (1, {'@': 377}), 1: (1, {'@': 377}), 5: (1, {'@': 377}), 3: (1, {'@': 377}), 2: (1, {'@': 377}), 6: (1, {'@': 377}), 7: (1, {'@': 377}), 8: (1, {'@': 377}), 10: (1, {'@': 377}), 30: (1, {'@': 377}), 31: (1, {'@': 377}), 12: (1, {'@': 377}), 13: (1, {'@': 377}), 14: (1, {'@': 377}), 32: (1, {'@': 377}), 15: (1, {'@': 377}), 17: (1, {'@': 377})}, 592: {0: (1, {'@': 378}), 9: (1, {'@': 378}), 4: (1, {'@': 378}), 28: (1, {'@': 378}), 16: (1, {'@': 378}), 11: (1, {'@': 378}), 1: (1, {'@': 378}), 2: (1, {'@': 378}), 3: (1, {'@': 378}), 5: (1, {'@': 378}), 6: (1, {'@': 378}), 7: (1, {'@': 378}), 8: (1, {'@': 378}), 10: (1, {'@': 378}), 12: (1, {'@': 378}), 13: (1, {'@': 378}), 14: (1, {'@': 378}), 15: (1, {'@': 378}), 17: (1, {'@': 378}), 30: (1, {'@': 378}), 31: (1, {'@': 378}), 26: (1, {'@': 378}), 18: (1, {'@': 378}), 27: (1, {'@': 378}), 19: (1, {'@': 378}), 29: (1, {'@': 378}), 32: (1, {'@': 378})}, 593: {0: (1, {'@': 379}), 9: (1, {'@': 379}), 4: (1, {'@': 379}), 28: (1, {'@': 379}), 16: (1, {'@': 379}), 11: (1, {'@': 379}), 1: (1, {'@': 379}), 2: (1, {'@': 379}), 3: (1, {'@': 379}), 5: (1, {'@': 379}), 6: (1, {'@': 379}), 7: (1, {'@': 379}), 8: (1, {'@': 379}), 10: (1, {'@': 379}), 12: (1, {'@': 379}), 13: (1, {'@': 379}), 14: (1, {'@': 379}), 15: (1, {'@': 379}), 17: (1, {'@': 379}), 30: (1, {'@': 379}), 31: (1, {'@': 379}), 26: (1, {'@': 379}), 18: (1, {'@': 379}), 27: (1, {'@': 379}), 19: (1, {'@': 379}), 29: (1, {'@': 379}), 32: (1, {'@': 379})}, 594: {15: (0, 217), 12: (1, {'@': 380}), 1: (1, {'@': 380}), 2: (1, {'@': 380}), 3: (1, {'@': 380}), 5: (1, {'@': 380}), 13: (1, {'@': 380}), 7: (1, {'@': 380}), 8: (1, {'@': 380}), 14: (1, {'@': 380}), 10: (1, {'@': 380}), 17: (1, {'@': 380}), 11: (1, {'@': 380})}, 595: {15: (0, 23), 12: (1, {'@': 381}), 1: (1, {'@': 381}), 2: (1, {'@': 381}), 3: (1, {'@': 381}), 5: (1, {'@': 381}), 13: (1, {'@': 381}), 7: (1, {'@': 381}), 8: (1, {'@': 381}), 14: (1, {'@': 381}), 10: (1, {'@': 381}), 17: (1, {'@': 381}), 11: (1, {'@': 381})}, 596: {0: (1, {'@': 382}), 4: (1, {'@': 382}), 18: (1, {'@': 382}), 19: (1, {'@': 382}), 9: (1, {'@': 382}), 28: (1, {'@': 382}), 16: (1, {'@': 382}), 11: (1, {'@': 382})}, 597: {0: (1, {'@': 383}), 5: (1, {'@': 383}), 3: (1, {'@': 383}), 6: (1, {'@': 383}), 8: (1, {'@': 383}), 9: (1, {'@': 383}), 10: (1, {'@': 383}), 30: (1, {'@': 383}), 13: (1, {'@': 383}), 19: (1, {'@': 383}), 32: (1, {'@': 383}), 15: (1, {'@': 383}), 17: (1, {'@': 383}), 1: (1, {'@': 383}), 2: (1, {'@': 383}), 4: (1, {'@': 383}), 7: (1, {'@': 383}), 11: (1, {'@': 383}), 31: (1, {'@': 383}), 12: (1, {'@': 383}), 26: (1, {'@': 383}), 18: (1, {'@': 383}), 27: (1, {'@': 383}), 29: (1, {'@': 383}), 14: (1, {'@': 383}), 28: (1, {'@': 383}), 16: (1, {'@': 383})}, 598: {14: (0, 415), 1: (0, 230), 20: (0, 236)}, 599: {89: (0, 222), 10: (0, 227), 88: (0, 232), 33: (0, 237), 11: (0, 242)}, 600: {75: (0, 27), 6: (0, 121), 15: (0, 31), 12: (1, {'@': 384}), 1: (1, {'@': 384}), 2: (1, {'@': 384}), 3: (1, {'@': 384}), 5: (1, {'@': 384}), 13: (1, {'@': 384}), 7: (1, {'@': 384}), 8: (1, {'@': 384}), 14: (1, {'@': 384}), 10: (1, {'@': 384}), 17: (1, {'@': 384}), 11: (1, {'@': 384})}, 601: {14: (0, 415), 20: (0, 523), 1: (0, 526)}, 602: {0: (1, {'@': 385}), 5: (1, {'@': 385}), 3: (1, {'@': 385}), 6: (1, {'@': 385}), 8: (1, {'@': 385}), 9: (1, {'@': 385}), 10: (1, {'@': 385}), 30: (1, {'@': 385}), 13: (1, {'@': 385}), 19: (1, {'@': 385}), 32: (1, {'@': 385}), 15: (1, {'@': 385}), 17: (1, {'@': 385}), 1: (1, {'@': 385}), 2: (1, {'@': 385}), 4: (1, {'@': 385}), 7: (1, {'@': 385}), 11: (1, {'@': 385}), 31: (1, {'@': 385}), 12: (1, {'@': 385}), 26: (1, {'@': 385}), 18: (1, {'@': 385}), 27: (1, {'@': 385}), 29: (1, {'@': 385}), 14: (1, {'@': 385}), 28: (1, {'@': 385}), 16: (1, {'@': 385})}, 603: {69: (1, {'@': 386})}, 604: {0: (1, {'@': 387}), 9: (1, {'@': 387}), 4: (1, {'@': 387}), 28: (1, {'@': 387}), 16: (1, {'@': 387}), 11: (1, {'@': 387}), 1: (1, {'@': 387}), 2: (1, {'@': 387}), 3: (1, {'@': 387}), 5: (1, {'@': 387}), 6: (1, {'@': 387}), 7: (1, {'@': 387}), 8: (1, {'@': 387}), 10: (1, {'@': 387}), 12: (1, {'@': 387}), 13: (1, {'@': 387}), 14: (1, {'@': 387}), 15: (1, {'@': 387}), 17: (1, {'@': 387}), 30: (1, {'@': 387}), 31: (1, {'@': 387}), 26: (1, {'@': 387}), 18: (1, {'@': 387}), 27: (1, {'@': 387}), 19: (1, {'@': 387}), 29: (1, {'@': 387}), 32: (1, {'@': 387})}, 605: {69: (1, {'@': 388}), 88: (1, {'@': 388}), 89: (1, {'@': 388}), 10: (1, {'@': 388}), 11: (1, {'@': 388}), 33: (1, {'@': 388})}, 606: {23: (0, 229), 1: (0, 210), 20: (0, 249), 67: (0, 170), 64: (0, 405), 8: (0, 418), 52: (0, 171), 101: (0, 174), 13: (0, 419), 102: (0, 176), 11: (0, 420), 103: (0, 98), 12: (0, 620), 17: (0, 182), 41: (0, 421), 66: (0, 42), 68: (0, 422), 22: (0, 3), 14: (0, 415)}, 607: {0: (1, {'@': 389}), 9: (1, {'@': 389}), 4: (1, {'@': 389}), 28: (1, {'@': 389}), 16: (1, {'@': 389}), 11: (1, {'@': 389}), 1: (1, {'@': 389}), 2: (1, {'@': 389}), 3: (1, {'@': 389}), 5: (1, {'@': 389}), 6: (1, {'@': 389}), 7: (1, {'@': 389}), 8: (1, {'@': 389}), 10: (1, {'@': 389}), 12: (1, {'@': 389}), 13: (1, {'@': 389}), 14: (1, {'@': 389}), 15: (1, {'@': 389}), 17: (1, {'@': 389}), 30: (1, {'@': 389}), 31: (1, {'@': 389}), 26: (1, {'@': 389}), 18: (1, {'@': 389}), 27: (1, {'@': 389}), 19: (1, {'@': 389}), 29: (1, {'@': 389}), 32: (1, {'@': 389})}, 608: {0: (1, {'@': 390}), 5: (1, {'@': 390}), 3: (1, {'@': 390}), 6: (1, {'@': 390}), 8: (1, {'@': 390}), 9: (1, {'@': 390}), 10: (1, {'@': 390}), 30: (1, {'@': 390}), 13: (1, {'@': 390}), 19: (1, {'@': 390}), 32: (1, {'@': 390}), 15: (1, {'@': 390}), 17: (1, {'@': 390}), 1: (1, {'@': 390}), 2: (1, {'@': 390}), 4: (1, {'@': 390}), 7: (1, {'@': 390}), 11: (1, {'@': 390}), 31: (1, {'@': 390}), 12: (1, {'@': 390}), 26: (1, {'@': 390}), 18: (1, {'@': 390}), 27: (1, {'@': 390}), 29: (1, {'@': 390}), 14: (1, {'@': 390}), 28: (1, {'@': 390}), 16: (1, {'@': 390})}, 609: {0: (1, {'@': 391}), 9: (1, {'@': 391}), 4: (1, {'@': 391}), 28: (1, {'@': 391}), 16: (1, {'@': 391}), 11: (1, {'@': 391}), 1: (1, {'@': 391}), 2: (1, {'@': 391}), 3: (1, {'@': 391}), 5: (1, {'@': 391}), 6: (1, {'@': 391}), 7: (1, {'@': 391}), 8: (1, {'@': 391}), 10: (1, {'@': 391}), 12: (1, {'@': 391}), 13: (1, {'@': 391}), 14: (1, {'@': 391}), 15: (1, {'@': 391}), 17: (1, {'@': 391}), 30: (1, {'@': 391}), 31: (1, {'@': 391}), 26: (1, {'@': 391}), 18: (1, {'@': 391}), 27: (1, {'@': 391}), 19: (1, {'@': 391}), 29: (1, {'@': 391}), 32: (1, {'@': 391})}, 610: {69: (0, 564)}, 611: {47: (0, 34), 17: (0, 39)}, 612: {11: (0, 82), 42: (0, 160), 4: (0, 97), 9: (0, 16), 16: (0, 21), 28: (0, 239), 0: (0, 25)}, 613: {39: (0, 70), 10: (0, 76)}, 614: {10: (1, {'@': 392}), 60: (1, {'@': 392}), 1: (1, {'@': 392}), 2: (1, {'@': 392}), 3: (1, {'@': 392}), 5: (1, {'@': 392}), 6: (1, {'@': 392}), 7: (1, {'@': 392}), 8: (1, {'@': 392}), 11: (1, {'@': 392}), 30: (1, {'@': 392}), 31: (1, {'@': 392}), 12: (1, {'@': 392}), 13: (1, {'@': 392}), 14: (1, {'@': 392}), 15: (1, {'@': 392}), 17: (1, {'@': 392})}, 615: {69: (1, {'@': 393}), 88: (1, {'@': 393}), 89: (1, {'@': 393}), 10: (1, {'@': 393}), 11: (1, {'@': 393}), 33: (1, {'@': 393})}, 616: {10: (0, 248), 105: (0, 55), 1: (1, {'@': 394}), 2: (1, {'@': 394}), 3: (1, {'@': 394}), 5: (1, {'@': 394}), 6: (1, {'@': 394}), 7: (1, {'@': 394}), 8: (1, {'@': 394}), 11: (1, {'@': 394}), 31: (1, {'@': 394}), 12: (1, {'@': 394}), 13: (1, {'@': 394}), 14: (1, {'@': 394}), 15: (1, {'@': 394}), 17: (1, {'@': 394}), 30: (1, {'@': 394})}, 617: {1: (0, 80), 20: (0, 88), 14: (0, 415), 10: (0, 94)}, 618: {34: (0, 463)}, 619: {1: (0, 253), 20: (0, 500), 13: (0, 283), 53: (0, 241), 17: (0, 300), 48: (0, 302), 54: (0, 306), 22: (0, 310), 50: (0, 312), 49: (0, 315), 55: (0, 317), 14: (0, 415), 8: (0, 320), 12: (0, 325), 11: (0, 328)}, 620: {0: (1, {'@': 137}), 26: (1, {'@': 137}), 4: (1, {'@': 137}), 9: (1, {'@': 137}), 16: (1, {'@': 137}), 11: (1, {'@': 137}), 27: (1, {'@': 137}), 18: (1, {'@': 137}), 19: (1, {'@': 137}), 28: (1, {'@': 137}), 29: (1, {'@': 137}), 1: (1, {'@': 137}), 5: (1, {'@': 137}), 3: (1, {'@': 137}), 2: (1, {'@': 137}), 6: (1, {'@': 137}), 7: (1, {'@': 137}), 8: (1, {'@': 137}), 10: (1, {'@': 137}), 30: (1, {'@': 137}), 31: (1, {'@': 137}), 12: (1, {'@': 137}), 13: (1, {'@': 137}), 14: (1, {'@': 137}), 32: (1, {'@': 137}), 15: (1, {'@': 137}), 17: (1, {'@': 137})}, 621: {0: (1, {'@': 395}), 9: (1, {'@': 395}), 4: (1, {'@': 395}), 28: (1, {'@': 395}), 16: (1, {'@': 395}), 11: (1, {'@': 395}), 1: (1, {'@': 395}), 2: (1, {'@': 395}), 3: (1, {'@': 395}), 5: (1, {'@': 395}), 6: (1, {'@': 395}), 7: (1, {'@': 395}), 8: (1, {'@': 395}), 10: (1, {'@': 395}), 12: (1, {'@': 395}), 13: (1, {'@': 395}), 14: (1, {'@': 395}), 15: (1, {'@': 395}), 17: (1, {'@': 395}), 30: (1, {'@': 395}), 31: (1, {'@': 395}), 26: (1, {'@': 395}), 18: (1, {'@': 395}), 27: (1, {'@': 395}), 19: (1, {'@': 395}), 29: (1, {'@': 395}), 32: (1, {'@': 395})}, 622: {28: (0, 251), 11: (0, 82), 42: (0, 160), 4: (0, 97), 9: (0, 16), 16: (0, 21), 0: (0, 25)}, 623: {12: (1, {'@': 396}), 1: (1, {'@': 396}), 2: (1, {'@': 396}), 3: (1, {'@': 396}), 5: (1, {'@': 396}), 6: (1, {'@': 396}), 13: (1, {'@': 396}), 7: (1, {'@': 396}), 8: (1, {'@': 396}), 14: (1, {'@': 396}), 10: (1, {'@': 396}), 15: (1, {'@': 396}), 17: (1, {'@': 396}), 11: (1, {'@': 396}), 31: (1, {'@': 396})}, 624: {0: (1, {'@': 397}), 26: (1, {'@': 397}), 9: (1, {'@': 397}), 4: (1, {'@': 397}), 16: (1, {'@': 397}), 11: (1, {'@': 397}), 27: (1, {'@': 397}), 18: (1, {'@': 397}), 19: (1, {'@': 397}), 28: (1, {'@': 397}), 29: (1, {'@': 397}), 1: (1, {'@': 397}), 5: (1, {'@': 397}), 3: (1, {'@': 397}), 2: (1, {'@': 397}), 6: (1, {'@': 397}), 7: (1, {'@': 397}), 8: (1, {'@': 397}), 10: (1, {'@': 397}), 30: (1, {'@': 397}), 31: (1, {'@': 397}), 12: (1, {'@': 397}), 13: (1, {'@': 397}), 14: (1, {'@': 397}), 32: (1, {'@': 397}), 15: (1, {'@': 397}), 17: (1, {'@': 397})}, 625: {14: (0, 415), 1: (0, 462), 20: (0, 552)}, 626: {39: (0, 520)}, 627: {105: (0, 224), 10: (0, 248), 1: (1, {'@': 398}), 2: (1, {'@': 398}), 3: (1, {'@': 398}), 5: (1, {'@': 398}), 6: (1, {'@': 398}), 7: (1, {'@': 398}), 8: (1, {'@': 398}), 11: (1, {'@': 398}), 31: (1, {'@': 398}), 12: (1, {'@': 398}), 13: (1, {'@': 398}), 14: (1, {'@': 398}), 15: (1, {'@': 398}), 17: (1, {'@': 398}), 30: (1, {'@': 398})}, 628: {0: (1, {'@': 399}), 9: (1, {'@': 399}), 4: (1, {'@': 399}), 28: (1, {'@': 399}), 16: (1, {'@': 399}), 11: (1, {'@': 399}), 1: (1, {'@': 399}), 2: (1, {'@': 399}), 3: (1, {'@': 399}), 5: (1, {'@': 399}), 6: (1, {'@': 399}), 7: (1, {'@': 399}), 8: (1, {'@': 399}), 10: (1, {'@': 399}), 12: (1, {'@': 399}), 13: (1, {'@': 399}), 14: (1, {'@': 399}), 15: (1, {'@': 399}), 17: (1, {'@': 399}), 30: (1, {'@': 399}), 31: (1, {'@': 399}), 26: (1, {'@': 399}), 18: (1, {'@': 399}), 27: (1, {'@': 399}), 19: (1, {'@': 399}), 29: (1, {'@': 399}), 32: (1, {'@': 399})}, 629: {11: (0, 82), 42: (0, 160), 4: (0, 97), 28: (0, 243), 9: (0, 16), 16: (0, 21), 0: (0, 25)}, 630: {12: (1, {'@': 400}), 1: (1, {'@': 400}), 2: (1, {'@': 400}), 3: (1, {'@': 400}), 5: (1, {'@': 400}), 6: (1, {'@': 400}), 13: (1, {'@': 400}), 7: (1, {'@': 400}), 8: (1, {'@': 400}), 14: (1, {'@': 400}), 15: (1, {'@': 400}), 10: (1, {'@': 400}), 17: (1, {'@': 400}), 11: (1, {'@': 400})}, 631: {1: (0, 287), 20: (0, 235), 13: (0, 283), 55: (0, 246), 91: (0, 257), 53: (0, 250), 17: (0, 300), 10: (0, 261), 48: (0, 302), 54: (0, 306), 22: (0, 310), 50: (0, 312), 49: (0, 315), 14: (0, 415), 8: (0, 320), 63: (0, 264), 12: (0, 325), 11: (0, 328)}, 632: {19: (0, 556), 0: (1, {'@': 46}), 4: (1, {'@': 46}), 18: (1, {'@': 46}), 9: (1, {'@': 46}), 16: (1, {'@': 46}), 11: (1, {'@': 46})}, 633: {0: (1, {'@': 401}), 9: (1, {'@': 401}), 4: (1, {'@': 401}), 28: (1, {'@': 401}), 16: (1, {'@': 401}), 11: (1, {'@': 401}), 1: (1, {'@': 401}), 2: (1, {'@': 401}), 3: (1, {'@': 401}), 5: (1, {'@': 401}), 6: (1, {'@': 401}), 7: (1, {'@': 401}), 8: (1, {'@': 401}), 10: (1, {'@': 401}), 12: (1, {'@': 401}), 13: (1, {'@': 401}), 14: (1, {'@': 401}), 15: (1, {'@': 401}), 17: (1, {'@': 401}), 30: (1, {'@': 401}), 31: (1, {'@': 401}), 26: (1, {'@': 401}), 18: (1, {'@': 401}), 27: (1, {'@': 401}), 19: (1, {'@': 401}), 29: (1, {'@': 401}), 32: (1, {'@': 401})}, 634: {0: (1, {'@': 402}), 9: (1, {'@': 402}), 4: (1, {'@': 402}), 28: (1, {'@': 402}), 16: (1, {'@': 402}), 11: (1, {'@': 402}), 1: (1, {'@': 402}), 2: (1, {'@': 402}), 3: (1, {'@': 402}), 5: (1, {'@': 402}), 6: (1, {'@': 402}), 7: (1, {'@': 402}), 8: (1, {'@': 402}), 10: (1, {'@': 402}), 12: (1, {'@': 402}), 13: (1, {'@': 402}), 14: (1, {'@': 402}), 15: (1, {'@': 402}), 17: (1, {'@': 402}), 30: (1, {'@': 402}), 31: (1, {'@': 402}), 26: (1, {'@': 402}), 18: (1, {'@': 402}), 27: (1, {'@': 402}), 19: (1, {'@': 402}), 29: (1, {'@': 402}), 32: (1, {'@': 402})}, 635: {71: (0, 108), 70: (0, 61), 3: (0, 79)}, 636: {14: (0, 415), 39: (0, 605), 20: (0, 615), 58: (0, 363)}, 637: {14: (0, 415), 20: (0, 83), 1: (0, 117)}}, 'start_states': {'table': 189}, 'end_states': {'table': 416}}, 'lexer_conf': {'tokens': [{'@': 0}, {'@': 1}, {'@': 2}, {'@': 3}, {'@': 4}, {'@': 5}, {'@': 6}, {'@': 7}, {'@': 8}, {'@': 9}, {'@': 10}, {'@': 11}, {'@': 12}, {'@': 13}, {'@': 14}, {'@': 15}, {'@': 16}, {'@': 17}, {'@': 18}, {'@': 19}, {'@': 20}, {'@': 21}, {'@': 22}, {'@': 23}, {'@': 24}, {'@': 25}, {'@': 26}, {'@': 27}, {'@': 28}, {'@': 29}, {'@': 30}, {'@': 31}, {'@': 32}, {'@': 33}, {'@': 34}, {'@': 35}, {'@': 36}, {'@': 37}, {'@': 38}, {'@': 39}, {'@': 40}, {'@': 41}, {'@': 42}, {'@': 43}], 'ignore': [], 'g_regex_flags': 0, '__type__': 'LexerConf'}, 'start': ['table'], '__type__': 'LALR_ContextualLexer'}, 'rules': [{'@': 256}, {'@': 56}, {'@': 318}, {'@': 282}, {'@': 151}, {'@': 68}, {'@': 364}, {'@': 335}, {'@': 331}, {'@': 258}, {'@': 320}, {'@': 257}, {'@': 333}, {'@': 247}, {'@': 210}, {'@': 400}, {'@': 246}, {'@': 249}, {'@': 126}, {'@': 212}, {'@': 324}, {'@': 326}, {'@': 61}, {'@': 240}, {'@': 62}, {'@': 241}, {'@': 242}, {'@': 120}, {'@': 59}, {'@': 222}, {'@': 244}, {'@': 121}, {'@': 403}, {'@': 238}, {'@': 149}, {'@': 363}, {'@': 141}, {'@': 359}, {'@': 312}, {'@': 315}, {'@': 361}, {'@': 321}, {'@': 396}, {'@': 114}, {'@': 65}, {'@': 394}, {'@': 143}, {'@': 398}, {'@': 87}, {'@': 92}, {'@': 129}, {'@': 128}, {'@': 311}, {'@': 300}, {'@': 125}, {'@': 294}, {'@': 176}, {'@': 73}, {'@': 175}, {'@': 177}, {'@': 196}, {'@': 140}, {'@': 146}, {'@': 193}, {'@': 253}, {'@': 191}, {'@': 155}, {'@': 190}, {'@': 154}, {'@': 160}, {'@': 392}, {'@': 161}, {'@': 298}, {'@': 162}, {'@': 112}, {'@': 237}, {'@': 269}, {'@': 265}, {'@': 71}, {'@': 49}, {'@': 347}, {'@': 205}, {'@': 183}, {'@': 306}, {'@': 185}, {'@': 123}, {'@': 93}, {'@': 236}, {'@': 209}, {'@': 198}, {'@': 115}, {'@': 199}, {'@': 172}, {'@': 268}, {'@': 89}, {'@': 358}, {'@': 349}, {'@': 353}, {'@': 278}, {'@': 272}, {'@': 274}, {'@': 317}, {'@': 54}, {'@': 344}, {'@': 340}, {'@': 263}, {'@': 47}, {'@': 264}, {'@': 110}, {'@': 262}, {'@': 280}, {'@': 276}, {'@': 270}, {'@': 88}, {'@': 52}, {'@': 44}, {'@': 254}, {'@': 134}, {'@': 147}, {'@': 158}, {'@': 356}, {'@': 342}, {'@': 351}, {'@': 346}, {'@': 137}, {'@': 46}, {'@': 261}, {'@': 260}, {'@': 390}, {'@': 385}, {'@': 383}, {'@': 133}, {'@': 377}, {'@': 309}, {'@': 374}, {'@': 339}, {'@': 360}, {'@': 365}, {'@': 336}, {'@': 303}, {'@': 397}, {'@': 219}, {'@': 107}, {'@': 226}, {'@': 218}, {'@': 111}, {'@': 104}, {'@': 304}, {'@': 105}, {'@': 95}, {'@': 97}, {'@': 106}, {'@': 109}, {'@': 79}, {'@': 86}, {'@': 85}, {'@': 252}, {'@': 313}, {'@': 82}, {'@': 310}, {'@': 102}, {'@': 108}, {'@': 308}, {'@': 99}, {'@': 213}, {'@': 224}, {'@': 159}, {'@': 181}, {'@': 157}, {'@': 152}, {'@': 277}, {'@': 271}, {'@': 275}, {'@': 273}, {'@': 204}, {'@': 197}, {'@': 188}, {'@': 48}, {'@': 192}, {'@': 194}, {'@': 206}, {'@': 207}, {'@': 382}, {'@': 203}, {'@': 215}, {'@': 208}, {'@': 291}, {'@': 211}, {'@': 292}, {'@': 281}, {'@': 279}, {'@': 283}, {'@': 284}, {'@': 63}, {'@': 220}, {'@': 239}, {'@': 288}, {'@': 202}, {'@': 156}, {'@': 200}, {'@': 174}, {'@': 117}, {'@': 116}, {'@': 319}, {'@': 221}, {'@': 316}, {'@': 232}, {'@': 286}, {'@': 299}, {'@': 103}, {'@': 101}, {'@': 330}, {'@': 50}, {'@': 332}, {'@': 322}, {'@': 289}, {'@': 285}, {'@': 80}, {'@': 74}, {'@': 76}, {'@': 90}, {'@': 401}, {'@': 305}, {'@': 153}, {'@': 148}, {'@': 373}, {'@': 379}, {'@': 367}, {'@': 369}, {'@': 179}, {'@': 178}, {'@': 357}, {'@': 362}, {'@': 171}, {'@': 170}, {'@': 399}, {'@': 173}, {'@': 201}, {'@': 119}, {'@': 389}, {'@': 287}, {'@': 186}, {'@': 187}, {'@': 60}, {'@': 182}, {'@': 124}, {'@': 245}, {'@': 169}, {'@': 189}, {'@': 131}, {'@': 130}, {'@': 127}, {'@': 267}, {'@': 168}, {'@': 167}, {'@': 142}, {'@': 145}, {'@': 334}, {'@': 329}, {'@': 343}, {'@': 290}, {'@': 395}, {'@': 144}, {'@': 323}, {'@': 325}, {'@': 378}, {'@': 391}, {'@': 375}, {'@': 370}, {'@': 243}, {'@': 235}, {'@': 352}, {'@': 348}, {'@': 163}, {'@': 165}, {'@': 166}, {'@': 387}, {'@': 113}, {'@': 229}, {'@': 225}, {'@': 402}, {'@': 250}, {'@': 248}, {'@': 251}, {'@': 227}, {'@': 293}, {'@': 67}, {'@': 354}, {'@': 341}, {'@': 295}, {'@': 216}, {'@': 72}, {'@': 338}, {'@': 217}, {'@': 223}, {'@': 386}, {'@': 345}, {'@': 81}, {'@': 230}, {'@': 91}, {'@': 350}, {'@': 228}, {'@': 231}, {'@': 98}, {'@': 393}, {'@': 388}, {'@': 184}, {'@': 83}, {'@': 337}, {'@': 75}, {'@': 94}, {'@': 259}, {'@': 328}, {'@': 327}, {'@': 138}, {'@': 371}, {'@': 139}, {'@': 380}, {'@': 368}, {'@': 77}, {'@': 96}, {'@': 255}, {'@': 58}, {'@': 136}, {'@': 296}, {'@': 55}, {'@': 57}, {'@': 384}, {'@': 53}, {'@': 381}, {'@': 51}, {'@': 372}, {'@': 376}, {'@': 100}, {'@': 150}, {'@': 307}, {'@': 122}, {'@': 84}, {'@': 301}, {'@': 78}, {'@': 64}, {'@': 66}, {'@': 297}, {'@': 302}, {'@': 45}, {'@': 214}, {'@': 266}, {'@': 366}, {'@': 233}, {'@': 69}, {'@': 355}, {'@': 234}, {'@': 135}, {'@': 314}, {'@': 180}, {'@': 132}, {'@': 70}, {'@': 118}, {'@': 195}, {'@': 164}], 'options': {'debug': False, 'keep_all_tokens': False, 'tree_class': None, 'cache': False, 'postlex': None, 'parser': 'lalr', 'lexer': 'contextual', 'transformer': None, 'start': ['table'], 'priority': None, 'ambiguity': 'auto', 'propagate_positions': True, 'lexer_callbacks': {}, 'maybe_placeholders': False, 'edit_terminals': None, 'g_regex_flags': 0}, '__type__': 'Lark'}
)
MEMO = (
{0: {'name': '_HENSEL_OPEN', 'pattern': {'value': '(?:(?:(?:\\ |\t))+)?<(?:(?:(?:\\ |\t))+)?', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 1: {'name': '_HENSEL_CLOSE', 'pattern': {'value': '(?:(?:(?:\\ |\t))+)?>(?:(?:(?:\\ |\t))+)?', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 2: {'name': '_HENSEL_SEP', 'pattern': {'value': '(?:(?:(?:\\ |\t))+)?/(?:(?:(?:\\ |\t))+)?', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 3: {'name': '_PERMUTE', 'pattern': {'value': '(?:(?:(?:\\ |\t))+)?\\~(?:(?:(?:\\ |\t))+)?', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 4: {'name': 'SYMMETRY_NAME', 'pattern': {'value': '(?<![\\w\\.])(?!(?:[NS][EW]?|[EW])(?![\\w\\.]))[\\w\\.]+', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 5: {'name': '_NORMAL_ARROW', 'pattern': {'value': '(?:(?:(?:\\ |\t))+)?\\->(?:(?:(?:\\ |\t))+)?', 'flags': [], '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 6: {'name': '_HOIST_ARROW', 'pattern': {'value': '(?:(?:(?:\\ |\t))+)?=>(?:(?:(?:\\ |\t))+)?', 'flags': [], '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 7: {'name': '_VAR_OPEN', 'pattern': {'value': '[(]', 'flags': [], '_width': [1, 1], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 8: {'name': '_VAR_CLOSE', 'pattern': {'value': '[)]', 'flags': [], '_width': [1, 1], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 9: {'name': 'LEAVE_ALONE', 'pattern': {'value': '_', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 10: {'name': 'EXTEND_LAST', 'pattern': {'value': '...', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 11: {'name': '_MULT', 'pattern': {'value': '(?:(?:(?:\\ |\t))+)?\\*(?:(?:(?:\\ |\t))+)?', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 12: {'name': '_SUBT', 'pattern': {'value': '(?:(?:(?:\\ |\t))+)?\\-(?:(?:(?:\\ |\t))+)?', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 13: {'name': '_RROT', 'pattern': {'value': '(?:(?:(?:\\ |\t))+)?>>(?:(?:(?:\\ |\t))+)?', 'flags': [], '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 14: {'name': '_LROT', 'pattern': {'value': '(?:(?:(?:\\ |\t))+)?<<(?:(?:(?:\\ |\t))+)?', 'flags': [], '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 15: {'name': '_NEGATE_LIVE', 'pattern': {'value': '-', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 16: {'name': '_NEGATE_ALL', 'pattern': {'value': '--', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 17: {'name': 'COMPASS_DIR', 'pattern': {'value': 'NE|SE|SW|NW|N|E|S|W|FG|BG', 'flags': [], '_width': [1, 2], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 18: {'name': 'NAME', 'pattern': {'value': '(?<![A-Za-z])(?!(?:[NS][EW]?|[EW]|[FB]G)(?!\\w))[A-Za-z]\\w*', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 19: {'name': 'STATE', 'pattern': {'value': '\\d+', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 20: {'name': 'INT', 'pattern': {'value': '[0123456789]+', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 21: {'name': '_WS', 'pattern': {'value': '(?:(?:\\ |\t))+', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 22: {'name': '_NL', 'pattern': {'value': '(?:(?:\r)?\n)+', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 23: {'name': 'COLON', 'pattern': {'value': ':', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 24: {'name': '__ANON_0', 'pattern': {'value': '.+', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 25: {'name': 'EQUAL', 'pattern': {'value': '=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 26: {'name': 'BANG', 'pattern': {'value': '!', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 27: {'name': 'DOLLAR', 'pattern': {'value': '$', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 28: {'name': '__ANON_1', 'pattern': {'value': '[^\\s\\/]+', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 29: {'name': '__ANON_2', 'pattern': {'value': '[^,;]+', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 30: {'name': 'LSQB', 'pattern': {'value': '[', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 31: {'name': 'RSQB', 'pattern': {'value': ']', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 32: {'name': '__ANON_3', 'pattern': {'value': '..', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 33: {'name': 'COMMA', 'pattern': {'value': ',', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 34: {'name': 'SEMICOLON', 'pattern': {'value': ';', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 35: {'name': 'LPAR', 'pattern': {'value': '(', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 36: {'name': 'RPAR', 'pattern': {'value': ')', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 37: {'name': 'PLUS', 'pattern': {'value': '+', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 38: {'name': 'LBRACE', 'pattern': {'value': '{', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 39: {'name': 'RBRACE', 'pattern': {'value': '}', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 40: {'name': 'STAR', 'pattern': {'value': '*', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 41: {'name': 'SLASH', 'pattern': {'value': '/', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 42: {'name': '__ANON_4', 'pattern': {'value': '[ \t]+(?:#.*)?$', 'flags': ['m'], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 43: {'name': '__ANON_5', 'pattern': {'value': '#.*', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 44: {'origin': {'name': 'operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_NEGATE_ALL', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_expr', '__type__': 'NonTerminal'}], 'order': 7, 'alias': 'noref_all_except', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 45: {'origin': {'name': '__var_star_4', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 46: {'origin': {'name': '_tr_expr_no_int', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'range', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 47: {'origin': {'name': '_expr_no_rec', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'range', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 48: {'origin': {'name': '_aux_expr_no_int', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'range', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 49: {'origin': {'name': 'tr_var', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_VAR_OPEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_tr_expr', '__type__': 'NonTerminal'}, {'name': '_VAR_CLOSE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'var', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 50: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'math', '__type__': 'NonTerminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 51: {'origin': {'name': '__table_plus_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__table_plus_0', '__type__': 'NonTerminal'}, {'name': 'line', '__type__': 'NonTerminal'}, {'name': 'end_bs', '__type__': 'NonTerminal'}, {'name': '_NL', 'filter_out': True, '__type__': 'Terminal'}], 'order': 18, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 52: {'origin': {'name': 'operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_NEGATE_LIVE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_expr', '__type__': 'NonTerminal'}], 'order': 6, 'alias': 'noref_live_except', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 53: {'origin': {'name': '__table_plus_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__table_plus_0', '__type__': 'NonTerminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'comment', '__type__': 'NonTerminal'}, {'name': '_NL', 'filter_out': True, '__type__': 'Terminal'}], 'order': 16, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 54: {'origin': {'name': '_expr_no_int', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'range', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 55: {'origin': {'name': '__table_plus_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__table_plus_0', '__type__': 'NonTerminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'line', '__type__': 'NonTerminal'}, {'name': 'end_bs', '__type__': 'NonTerminal'}], 'order': 13, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 56: {'origin': {'name': 'line', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_0', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'directive', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 57: {'origin': {'name': '__table_plus_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__table_plus_0', '__type__': 'NonTerminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'line', '__type__': 'NonTerminal'}, {'name': '_NL', 'filter_out': True, '__type__': 'Terminal'}], 'order': 14, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 58: {'origin': {'name': '__table_plus_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'comment', '__type__': 'NonTerminal'}, {'name': '_NL', 'filter_out': True, '__type__': 'Terminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 59: {'origin': {'name': 'tr_state', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_tr_expr', '__type__': 'NonTerminal'}, {'name': '_PERMUTE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_2', 'filter_out': False, '__type__': 'Terminal'}], 'order': 5, 'alias': 'permute_shorthand', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 60: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'math', '__type__': 'NonTerminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'math', '__type__': 'NonTerminal'}], 'order': 36, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 61: {'origin': {'name': 'transition', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_tr_expr', '__type__': 'NonTerminal'}, {'name': '__transition_plus_1', '__type__': 'NonTerminal'}, {'name': '_sep', '__type__': 'NonTerminal'}, {'name': '_tr_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'main', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 62: {'origin': {'name': 'tr_state', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_tr_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [True, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 63: {'origin': {'name': 'aux_operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_NEGATE_LIVE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_aux_expr', '__type__': 'NonTerminal'}], 'order': 8, 'alias': 'live_except', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 64: {'origin': {'name': '___auxlist_star_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': '___auxlist_star_2', '__type__': 'NonTerminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'auxiliary', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 65: {'origin': {'name': '_auxlist', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'auxiliary', '__type__': 'NonTerminal'}, {'name': '___auxlist_star_2', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 66: {'origin': {'name': '___auxlist_star_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': '___auxlist_star_2', '__type__': 'NonTerminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'symmetried_aux', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 67: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 79, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 68: {'origin': {'name': 'line', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_expr', '__type__': 'NonTerminal'}], 'order': 4, 'alias': 'var_decl', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 69: {'origin': {'name': '__tr_var_star_5', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_tr_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 70: {'origin': {'name': '__aux_var_star_7', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_aux_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 71: {'origin': {'name': 'tr_var', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_VAR_OPEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_tr_expr', '__type__': 'NonTerminal'}, {'name': '__tr_var_star_5', '__type__': 'NonTerminal'}, {'name': '_VAR_CLOSE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'var', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 72: {'origin': {'name': 'math_operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_math_expr', '__type__': 'NonTerminal'}, {'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_math_expr', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'math_mul', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 73: {'origin': {'name': '_aux_group', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'auxiliary', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 74: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 11, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 75: {'origin': {'name': '_subt', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_NEGATE_LIVE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 76: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'math', '__type__': 'NonTerminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 77: {'origin': {'name': '__table_plus_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'line', '__type__': 'NonTerminal'}, {'name': 'end_bs', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 78: {'origin': {'name': '___auxlist_star_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'symmetried_aux', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 79: {'origin': {'name': '_ref_expr_no_rec', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 80: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'math', '__type__': 'NonTerminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 81: {'origin': {'name': 'math_operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_math_expr', '__type__': 'NonTerminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_math_expr', '__type__': 'NonTerminal'}], 'order': 9, 'alias': 'math_add', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 82: {'origin': {'name': 'ref_operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_MULT', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_ref_expr_no_rec', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'int_to_var_length', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 83: {'origin': {'name': '_subt', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_SUBT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 84: {'origin': {'name': '__transition_plus_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__transition_plus_1', '__type__': 'NonTerminal'}, {'name': '_sep', '__type__': 'NonTerminal'}, {'name': 'tr_state', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 85: {'origin': {'name': '_ref_expr_no_rec', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ref_var', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 86: {'origin': {'name': '_ref_expr_no_rec', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'range', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 87: {'origin': {'name': 'symmetried_aux', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SYMMETRY_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_aux_group', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 88: {'origin': {'name': 'operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_expr_no_int', '__type__': 'NonTerminal'}, {'name': '_LROT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 5, 'alias': 'noref_rot_left', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 89: {'origin': {'name': 'aux_var', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_VAR_OPEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'range', '__type__': 'NonTerminal'}, {'name': '_VAR_CLOSE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': 'var', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 90: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 13, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 91: {'origin': {'name': 'math_operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_math_expr', '__type__': 'NonTerminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_math_expr', '__type__': 'NonTerminal'}], 'order': 11, 'alias': 'math_add', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 92: {'origin': {'name': 'symmetried_aux', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SYMMETRY_NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'BANG', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_aux_group', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'stationary_symmetried_aux', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 93: {'origin': {'name': 'ref_var', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_VAR_OPEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_ref_expr', '__type__': 'NonTerminal'}, {'name': '_VAR_CLOSE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': 'var', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, True, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 94: {'origin': {'name': 'end_bs', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_4', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 95: {'origin': {'name': '_ref_expr_no_int', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 96: {'origin': {'name': '__table_plus_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'line', '__type__': 'NonTerminal'}, {'name': '_NL', 'filter_out': True, '__type__': 'Terminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 97: {'origin': {'name': '_ref_expr_no_int', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'range', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 98: {'origin': {'name': 'math_operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_math_expr', '__type__': 'NonTerminal'}, {'name': '_NEGATE_LIVE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_math_expr', '__type__': 'NonTerminal'}], 'order': 15, 'alias': 'math_sub', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 99: {'origin': {'name': 'ref_operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_ref_expr_no_int', '__type__': 'NonTerminal'}, {'name': '_LROT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 7, 'alias': 'rot_left', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 100: {'origin': {'name': '__table_plus_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__table_plus_0', '__type__': 'NonTerminal'}, {'name': 'line', '__type__': 'NonTerminal'}], 'order': 21, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 101: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'math', '__type__': 'NonTerminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 102: {'origin': {'name': 'ref_operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_ref_expr_no_int', '__type__': 'NonTerminal'}, {'name': '_MULT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 4, 'alias': 'repeat_var', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 103: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'math', '__type__': 'NonTerminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'math', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 104: {'origin': {'name': '_ref_expr_norec_int', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 105: {'origin': {'name': '_ref_expr_norec_int', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'math', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 106: {'origin': {'name': '_ref_expr_no_int', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ref_operation', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 107: {'origin': {'name': '_ref_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 108: {'origin': {'name': 'ref_operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_ref_expr_no_int', '__type__': 'NonTerminal'}, {'name': '_subt', '__type__': 'NonTerminal'}, {'name': '_ref_expr_norec_int', '__type__': 'NonTerminal'}], 'order': 5, 'alias': 'subt', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 109: {'origin': {'name': '_ref_expr_no_int', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ref_var', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 110: {'origin': {'name': 'operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_MULT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'noref_repeat_int', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 111: {'origin': {'name': '_ref_expr_norec_int', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_ref_expr_no_rec', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 112: {'origin': {'name': 'cdir_delay', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMPASS_DIR', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 113: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'math', '__type__': 'NonTerminal'}], 'order': 70, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 114: {'origin': {'name': 'hoist_aux', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_HOIST_ARROW', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_auxlist', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 115: {'origin': {'name': 'aux_var', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_VAR_OPEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_aux_expr', '__type__': 'NonTerminal'}, {'name': '__aux_var_star_7', '__type__': 'NonTerminal'}, {'name': '_VAR_CLOSE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'var', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, False, True, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 116: {'origin': {'name': 'reference', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'binding', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 117: {'origin': {'name': 'reference', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COMPASS_DIR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'binding', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 118: {'origin': {'name': '__aux_var_star_7', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_aux_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 119: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'math', '__type__': 'NonTerminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 31, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 120: {'origin': {'name': 'tr_state', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'inline_binding', '__type__': 'NonTerminal'}], 'order': 4, 'alias': 'permute_shorthand', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 121: {'origin': {'name': 'prefix', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMPASS_DIR', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'cdir', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 122: {'origin': {'name': '__transition_plus_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_sep', '__type__': 'NonTerminal'}, {'name': 'tr_state', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 123: {'origin': {'name': 'ref_var', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_VAR_OPEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_ref_expr', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'EXTEND_LAST', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_VAR_CLOSE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'var', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 124: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'math', '__type__': 'NonTerminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'math', '__type__': 'NonTerminal'}], 'order': 38, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 125: {'origin': {'name': '_aux_group', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'auxiliary', '__type__': 'NonTerminal'}, {'name': '___aux_group_star_3', '__type__': 'NonTerminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 126: {'origin': {'name': 'rulestring_napkin', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_HENSEL_OPEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_1', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_HENSEL_SEP', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_rs_expr', '__type__': 'NonTerminal'}, {'name': '_HENSEL_SEP', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_rs_expr', '__type__': 'NonTerminal'}, {'name': '_HENSEL_CLOSE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'rulestring_napkin', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 127: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'math', '__type__': 'NonTerminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'math', '__type__': 'NonTerminal'}], 'order': 44, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 128: {'origin': {'name': '_aux_group', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'auxiliary', '__type__': 'NonTerminal'}, {'name': '___aux_group_star_3', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 129: {'origin': {'name': '_aux_group', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'auxiliary', '__type__': 'NonTerminal'}, {'name': '___aux_group_star_3', '__type__': 'NonTerminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 130: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'math', '__type__': 'NonTerminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 43, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 131: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'math', '__type__': 'NonTerminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'math', '__type__': 'NonTerminal'}], 'order': 42, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 132: {'origin': {'name': '__ref_var_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ref_var_star_6', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_ref_expr', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 133: {'origin': {'name': 'tr_operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_MULT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'repeat_int', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 134: {'origin': {'name': '_tr_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 135: {'origin': {'name': '__ref_var_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_ref_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 136: {'origin': {'name': '__table_plus_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'comment', '__type__': 'NonTerminal'}], 'order': 11, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 137: {'origin': {'name': '_tr_expr_no_int', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 138: {'origin': {'name': '__table_plus_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'line', '__type__': 'NonTerminal'}, {'name': '_NL', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 139: {'origin': {'name': '__table_plus_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'comment', '__type__': 'NonTerminal'}, {'name': '_NL', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 140: {'origin': {'name': 'auxiliary', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'cdir_delay', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COMPASS_DIR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'aux_bind_self', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 141: {'origin': {'name': '_sep', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 142: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'math', '__type__': 'NonTerminal'}], 'order': 48, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 143: {'origin': {'name': '_auxlist', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'symmetried_aux', '__type__': 'NonTerminal'}, {'name': '___auxlist_star_2', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 144: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 55, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 145: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 49, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 146: {'origin': {'name': 'auxiliary', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'cdir_delay', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'aux_bind_self', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 147: {'origin': {'name': '_tr_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'reference', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 148: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'math', '__type__': 'NonTerminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 17, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 149: {'origin': {'name': '_sep', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 150: {'origin': {'name': '__table_plus_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__table_plus_0', '__type__': 'NonTerminal'}, {'name': 'comment', '__type__': 'NonTerminal'}, {'name': '_NL', 'filter_out': True, '__type__': 'Terminal'}], 'order': 22, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 151: {'origin': {'name': 'line', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_expr', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'var_decl', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 152: {'origin': {'name': '_aux_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'math', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 153: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'math', '__type__': 'NonTerminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'math', '__type__': 'NonTerminal'}], 'order': 16, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 154: {'origin': {'name': 'auxiliary', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'cdir_delay', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_aux_expr_no_int', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 10, 'alias': 'aux_map_other', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 155: {'origin': {'name': 'auxiliary', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'cdir_delay', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COMPASS_DIR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_aux_expr_no_int', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 8, 'alias': 'aux_map_other', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 156: {'origin': {'name': 'aux_reference', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COMPASS_DIR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_aux_expr_no_int', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'mapping', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 157: {'origin': {'name': '_aux_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'aux_reference', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 158: {'origin': {'name': '_tr_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'math', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 159: {'origin': {'name': '_aux_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_aux_expr_no_int', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 160: {'origin': {'name': 'auxiliary', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'cdir_delay', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COMPASS_DIR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_aux_expr_no_int', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 11, 'alias': 'aux_map_other', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 161: {'origin': {'name': 'auxiliary', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'cdir_delay', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_aux_expr_no_int', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 13, 'alias': 'aux_map_other', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 162: {'origin': {'name': 'cdir_delay', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMPASS_DIR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 163: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'math', '__type__': 'NonTerminal'}], 'order': 66, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 164: {'origin': {'name': '__aux_var_star_7', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__aux_var_star_7', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_aux_expr', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 165: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 67, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 166: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'math', '__type__': 'NonTerminal'}], 'order': 68, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 167: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'math', '__type__': 'NonTerminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 47, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 168: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'math', '__type__': 'NonTerminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'math', '__type__': 'NonTerminal'}], 'order': 46, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 169: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'math', '__type__': 'NonTerminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'math', '__type__': 'NonTerminal'}], 'order': 40, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 170: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'math', '__type__': 'NonTerminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 27, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 171: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'math', '__type__': 'NonTerminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'math', '__type__': 'NonTerminal'}], 'order': 26, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 172: {'origin': {'name': 'aux_var', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_VAR_OPEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_aux_expr', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'EXTEND_LAST', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_VAR_CLOSE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'var', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 173: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'math', '__type__': 'NonTerminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 29, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 174: {'origin': {'name': 'aux_reference', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_aux_expr_no_int', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': 'mapping', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 175: {'origin': {'name': 'auxiliary', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'cdir_delay', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'aux_bare', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 176: {'origin': {'name': '_aux_group', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'auxiliary', '__type__': 'NonTerminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 177: {'origin': {'name': 'auxiliary', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'cdir_delay', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COMPASS_DIR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'aux_bind_self', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 178: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'math', '__type__': 'NonTerminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 23, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 179: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'math', '__type__': 'NonTerminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'math', '__type__': 'NonTerminal'}], 'order': 22, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 180: {'origin': {'name': '__ref_var_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ref_var_star_6', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_ref_expr', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 181: {'origin': {'name': '_aux_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 182: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'math', '__type__': 'NonTerminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 37, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 183: {'origin': {'name': 'ref_var', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_VAR_OPEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_ref_expr', '__type__': 'NonTerminal'}, {'name': '__ref_var_star_6', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'EXTEND_LAST', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_VAR_CLOSE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'var', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 184: {'origin': {'name': 'leave_alone_mult', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LEAVE_ALONE', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_MULT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 185: {'origin': {'name': 'ref_var', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_VAR_OPEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_ref_expr', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'EXTEND_LAST', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_VAR_CLOSE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'var', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 186: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'math', '__type__': 'NonTerminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'math', '__type__': 'NonTerminal'}], 'order': 34, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 187: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'math', '__type__': 'NonTerminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 35, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 188: {'origin': {'name': '_aux_expr_no_int', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'leave_alone_mult', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 189: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'math', '__type__': 'NonTerminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 41, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 190: {'origin': {'name': 'auxiliary', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'cdir_delay', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_aux_expr_no_int', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 9, 'alias': 'aux_map_other', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 191: {'origin': {'name': 'auxiliary', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'cdir_delay', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COMPASS_DIR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_aux_expr_no_int', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': 'aux_map_other', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 192: {'origin': {'name': '_aux_expr_no_int', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'aux_operation', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 193: {'origin': {'name': 'auxiliary', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'cdir_delay', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_aux_expr_no_int', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': 'aux_map_self', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 194: {'origin': {'name': '_aux_expr_no_int', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'aux_var', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 195: {'origin': {'name': '__aux_var_star_7', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__aux_var_star_7', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_aux_expr', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 196: {'origin': {'name': 'auxiliary', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'cdir_delay', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'aux_bind_self', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 197: {'origin': {'name': '_aux_expr_no_int', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LEAVE_ALONE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 198: {'origin': {'name': 'aux_var', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_VAR_OPEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_aux_expr', '__type__': 'NonTerminal'}, {'name': '__aux_var_star_7', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'EXTEND_LAST', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_VAR_CLOSE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'var', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 199: {'origin': {'name': 'aux_var', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_VAR_OPEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_aux_expr', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'EXTEND_LAST', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_VAR_CLOSE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'var', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 200: {'origin': {'name': 'aux_reference', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_aux_expr_no_int', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'mapping', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 201: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'math', '__type__': 'NonTerminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'math', '__type__': 'NonTerminal'}], 'order': 30, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 202: {'origin': {'name': 'aux_reference', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COMPASS_DIR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_aux_expr_no_int', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'mapping', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 203: {'origin': {'name': '_aux_expr_no_rec', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'range', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 204: {'origin': {'name': '_aux_expr_no_int', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 205: {'origin': {'name': 'ref_var', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_VAR_OPEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_ref_expr', '__type__': 'NonTerminal'}, {'name': '__ref_var_star_6', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'EXTEND_LAST', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_VAR_CLOSE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'var', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 206: {'origin': {'name': '_aux_expr_no_rec', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 207: {'origin': {'name': '_aux_expr_no_rec', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LEAVE_ALONE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 208: {'origin': {'name': 'aux_operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_MULT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'repeat_int', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 209: {'origin': {'name': 'aux_var', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_VAR_OPEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_aux_expr', '__type__': 'NonTerminal'}, {'name': '__aux_var_star_7', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'EXTEND_LAST', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_VAR_CLOSE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'var', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 210: {'origin': {'name': 'line', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DOLLAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'math', '__type__': 'NonTerminal'}], 'order': 13, 'alias': 'const_decl', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 211: {'origin': {'name': 'aux_operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_MULT', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_aux_expr_no_rec', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'int_to_var_length', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 212: {'origin': {'name': 'rulestring_napkin', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_HENSEL_OPEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_1', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_1', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_HENSEL_SEP', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_rs_expr', '__type__': 'NonTerminal'}, {'name': '_HENSEL_SEP', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_rs_expr', '__type__': 'NonTerminal'}, {'name': '_HENSEL_CLOSE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'modified_rulestring_napkin', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 213: {'origin': {'name': 'ref_operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_NEGATE_LIVE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_ref_expr', '__type__': 'NonTerminal'}], 'order': 8, 'alias': 'live_except', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 214: {'origin': {'name': '__var_star_4', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 215: {'origin': {'name': '_aux_expr_no_rec', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'aux_var', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 216: {'origin': {'name': 'math_operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_math_expr', '__type__': 'NonTerminal'}, {'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_math_expr', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'math_mul', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 217: {'origin': {'name': 'math_operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_math_expr', '__type__': 'NonTerminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_math_expr', '__type__': 'NonTerminal'}], 'order': 5, 'alias': 'math_div', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 218: {'origin': {'name': '_ref_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'math', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 219: {'origin': {'name': '_ref_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_ref_expr_no_int', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 220: {'origin': {'name': 'aux_operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_NEGATE_ALL', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_aux_expr', '__type__': 'NonTerminal'}], 'order': 9, 'alias': 'all_except', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 221: {'origin': {'name': 'reference', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COMPASS_DIR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_ref_expr_no_int', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'mapping', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 222: {'origin': {'name': 'tr_state', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'inline_binding', '__type__': 'NonTerminal'}, {'name': '_PERMUTE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_2', 'filter_out': False, '__type__': 'Terminal'}], 'order': 6, 'alias': 'permute_shorthand', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 223: {'origin': {'name': 'math_operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_math_expr', '__type__': 'NonTerminal'}, {'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_math_expr', '__type__': 'NonTerminal'}], 'order': 6, 'alias': 'math_div', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 224: {'origin': {'name': 'ref_operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_NEGATE_ALL', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_ref_expr', '__type__': 'NonTerminal'}], 'order': 9, 'alias': 'all_except', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 225: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'math', '__type__': 'NonTerminal'}], 'order': 72, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 226: {'origin': {'name': '_ref_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'reference', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 227: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 77, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 228: {'origin': {'name': 'math_operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_math_expr', '__type__': 'NonTerminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_NEGATE_LIVE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_math_expr', '__type__': 'NonTerminal'}], 'order': 13, 'alias': 'math_sub', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 229: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 71, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 230: {'origin': {'name': 'math_operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_math_expr', '__type__': 'NonTerminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_math_expr', '__type__': 'NonTerminal'}], 'order': 10, 'alias': 'math_add', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 231: {'origin': {'name': 'math_operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_math_expr', '__type__': 'NonTerminal'}, {'name': '_NEGATE_LIVE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_math_expr', '__type__': 'NonTerminal'}], 'order': 14, 'alias': 'math_sub', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 232: {'origin': {'name': 'reference', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_ref_expr_no_int', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': 'mapping', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 233: {'origin': {'name': '__tr_var_star_5', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_tr_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 234: {'origin': {'name': '__tr_var_star_5', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__tr_var_star_5', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_tr_expr', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 235: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 63, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 236: {'origin': {'name': 'ref_var', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_VAR_OPEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'range', '__type__': 'NonTerminal'}, {'name': '_VAR_CLOSE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': 'var', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 237: {'origin': {'name': 'var', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_VAR_OPEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_expr', '__type__': 'NonTerminal'}, {'name': '__var_star_4', '__type__': 'NonTerminal'}, {'name': '_VAR_CLOSE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'noref_var', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 238: {'origin': {'name': 'crange', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMPASS_DIR', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COMPASS_DIR', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 239: {'origin': {'name': 'aux_reference', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COMPASS_DIR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'binding', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 240: {'origin': {'name': 'tr_state', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'prefix', '__type__': 'NonTerminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_tr_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 241: {'origin': {'name': 'tr_state', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'crange', '__type__': 'NonTerminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_tr_expr', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 242: {'origin': {'name': 'tr_state', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'crange', '__type__': 'NonTerminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'inline_binding', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 243: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'math', '__type__': 'NonTerminal'}], 'order': 62, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 244: {'origin': {'name': 'inline_binding', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_tr_expr_no_int', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 245: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'math', '__type__': 'NonTerminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 39, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 246: {'origin': {'name': 'rulestring_tr', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_tr_expr', '__type__': 'NonTerminal'}, {'name': '_sep', '__type__': 'NonTerminal'}, {'name': 'rulestring_napkin', '__type__': 'NonTerminal'}, {'name': '_sep', '__type__': 'NonTerminal'}, {'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 247: {'origin': {'name': 'line', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DOLLAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'math', '__type__': 'NonTerminal'}], 'order': 12, 'alias': 'const_decl', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 248: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 75, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 249: {'origin': {'name': 'rulestring_tr', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_tr_expr', '__type__': 'NonTerminal'}, {'name': '_sep', '__type__': 'NonTerminal'}, {'name': 'rulestring_napkin', '__type__': 'NonTerminal'}, {'name': '_sep', '__type__': 'NonTerminal'}, {'name': 'reference', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 250: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'math', '__type__': 'NonTerminal'}], 'order': 74, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 251: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'math', '__type__': 'NonTerminal'}], 'order': 76, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 252: {'origin': {'name': 'ref_operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_MULT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'repeat_int', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 253: {'origin': {'name': 'auxiliary', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'cdir_delay', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_aux_expr_no_int', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': 'aux_map_self', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 254: {'origin': {'name': '_tr_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_tr_expr_no_int', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 255: {'origin': {'name': '__table_plus_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'line', '__type__': 'NonTerminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 256: {'origin': {'name': 'table', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__table_plus_0', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 257: {'origin': {'name': 'line', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'rulestring_tr', '__type__': 'NonTerminal'}], 'order': 10, 'alias': 'rulestring_transition', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 258: {'origin': {'name': 'line', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'transition', '__type__': 'NonTerminal'}], 'order': 8, 'alias': 'transition', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 259: {'origin': {'name': 'comment', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_5', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 260: {'origin': {'name': '_tr_expr_no_int', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'tr_var', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 261: {'origin': {'name': '_tr_expr_no_int', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'tr_operation', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 262: {'origin': {'name': 'operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_MULT', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_expr_no_rec', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'noref_int_to_var_length', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 263: {'origin': {'name': '_expr_no_rec', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 264: {'origin': {'name': '_expr_no_rec', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 265: {'origin': {'name': 'var', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_VAR_OPEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'range', '__type__': 'NonTerminal'}, {'name': '_VAR_CLOSE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'noref_var', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 266: {'origin': {'name': '__var_star_4', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__var_star_4', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_expr', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 267: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'math', '__type__': 'NonTerminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 45, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 268: {'origin': {'name': 'aux_var', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_VAR_OPEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_aux_expr', '__type__': 'NonTerminal'}, {'name': '_VAR_CLOSE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': 'var', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, True, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 269: {'origin': {'name': 'var', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_VAR_OPEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_expr', '__type__': 'NonTerminal'}, {'name': '_VAR_CLOSE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'noref_var', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 270: {'origin': {'name': 'operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_expr_no_int', '__type__': 'NonTerminal'}, {'name': '_RROT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 4, 'alias': 'noref_rot_right', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 271: {'origin': {'name': '_aux_expr_norec_int', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 272: {'origin': {'name': '_expr_norec_int', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 273: {'origin': {'name': '_aux_expr_norec_int', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'math', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 274: {'origin': {'name': '_expr_norec_int', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'math', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 275: {'origin': {'name': '_aux_expr_norec_int', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'aux_reference', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 276: {'origin': {'name': 'operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_expr_no_int', '__type__': 'NonTerminal'}, {'name': '_subt', '__type__': 'NonTerminal'}, {'name': '_expr_norec_int', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'noref_subt', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 277: {'origin': {'name': '_aux_expr_norec_int', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_aux_expr_no_rec', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 278: {'origin': {'name': '_expr_norec_int', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_expr_no_rec', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 279: {'origin': {'name': 'aux_operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_aux_expr_no_int', '__type__': 'NonTerminal'}, {'name': '_subt', '__type__': 'NonTerminal'}, {'name': '_aux_expr_norec_int', '__type__': 'NonTerminal'}], 'order': 5, 'alias': 'subt', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 280: {'origin': {'name': 'operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_expr_no_int', '__type__': 'NonTerminal'}, {'name': '_MULT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': 'noref_repeat_var', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 281: {'origin': {'name': 'aux_operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_aux_expr_no_int', '__type__': 'NonTerminal'}, {'name': '_MULT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 4, 'alias': 'repeat_var', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 282: {'origin': {'name': 'line', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_expr', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'var_decl', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 283: {'origin': {'name': 'aux_operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_aux_expr_no_int', '__type__': 'NonTerminal'}, {'name': '_RROT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 6, 'alias': 'rot_right', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 284: {'origin': {'name': 'aux_operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_aux_expr_no_int', '__type__': 'NonTerminal'}, {'name': '_LROT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 7, 'alias': 'rot_left', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 285: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 286: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'math', '__type__': 'NonTerminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'math', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 287: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'math', '__type__': 'NonTerminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 33, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 288: {'origin': {'name': 'aux_reference', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'binding', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 289: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'math', '__type__': 'NonTerminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 290: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 53, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 291: {'origin': {'name': 'aux_operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'aux_reference', '__type__': 'NonTerminal'}, {'name': '_MULT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': 'repeat_int', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 292: {'origin': {'name': 'aux_operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'aux_reference', '__type__': 'NonTerminal'}, {'name': '_MULT', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_aux_expr_no_rec', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'int_to_var_length', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 293: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'math', '__type__': 'NonTerminal'}], 'order': 78, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 294: {'origin': {'name': '_aux_group', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'auxiliary', '__type__': 'NonTerminal'}, {'name': '___aux_group_star_3', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 295: {'origin': {'name': 'math_operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_math_expr', '__type__': 'NonTerminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_math_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'math_mul', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 296: {'origin': {'name': '__table_plus_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__table_plus_0', '__type__': 'NonTerminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'line', '__type__': 'NonTerminal'}, {'name': 'end_bs', '__type__': 'NonTerminal'}, {'name': '_NL', 'filter_out': True, '__type__': 'Terminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 297: {'origin': {'name': '___aux_group_star_3', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'auxiliary', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 298: {'origin': {'name': 'auxiliary', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'cdir_delay', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_aux_expr_no_int', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 14, 'alias': 'aux_map_other', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 299: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'math', '__type__': 'NonTerminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 300: {'origin': {'name': '_aux_group', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'auxiliary', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 301: {'origin': {'name': '___auxlist_star_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'auxiliary', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 302: {'origin': {'name': '___aux_group_star_3', '__type__': 'NonTerminal'}, 'expansion': [{'name': '___aux_group_star_3', '__type__': 'NonTerminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'auxiliary', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 303: {'origin': {'name': 'tr_operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_NEGATE_LIVE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_tr_expr', '__type__': 'NonTerminal'}], 'order': 8, 'alias': 'live_except', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 304: {'origin': {'name': '_ref_expr_norec_int', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'reference', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 305: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 15, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 306: {'origin': {'name': 'ref_var', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_VAR_OPEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_ref_expr', '__type__': 'NonTerminal'}, {'name': '__ref_var_star_6', '__type__': 'NonTerminal'}, {'name': '_VAR_CLOSE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'var', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, False, True, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 307: {'origin': {'name': '__table_plus_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__table_plus_0', '__type__': 'NonTerminal'}, {'name': 'comment', '__type__': 'NonTerminal'}], 'order': 23, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 308: {'origin': {'name': 'ref_operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_ref_expr_no_int', '__type__': 'NonTerminal'}, {'name': '_RROT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 6, 'alias': 'rot_right', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 309: {'origin': {'name': 'tr_operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_MULT', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_tr_expr_no_rec', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'int_to_var_length', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 310: {'origin': {'name': 'ref_operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'reference', '__type__': 'NonTerminal'}, {'name': '_MULT', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_ref_expr_no_rec', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'int_to_var_length', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 311: {'origin': {'name': '_aux_group', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'auxiliary', '__type__': 'NonTerminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 312: {'origin': {'name': '_aux', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'normal_aux', '__type__': 'NonTerminal'}, {'name': 'hoist_aux', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 313: {'origin': {'name': 'ref_operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'reference', '__type__': 'NonTerminal'}, {'name': '_MULT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': 'repeat_int', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 314: {'origin': {'name': '__ref_var_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_ref_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 315: {'origin': {'name': '_aux', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'normal_aux', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 316: {'origin': {'name': 'reference', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_ref_expr_no_int', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'mapping', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 317: {'origin': {'name': '_expr_no_int', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 318: {'origin': {'name': 'line', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_0', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': 'directive', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 319: {'origin': {'name': 'reference', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COMPASS_DIR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_ref_expr_no_int', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'mapping', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 320: {'origin': {'name': 'line', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'rulestring_tr', '__type__': 'NonTerminal'}, {'name': '_aux', '__type__': 'NonTerminal'}], 'order': 9, 'alias': 'rulestring_transition', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 321: {'origin': {'name': '_aux', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'hoist_aux', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 322: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'math', '__type__': 'NonTerminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 323: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'math', '__type__': 'NonTerminal'}], 'order': 56, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 324: {'origin': {'name': '_rs_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_tr_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 325: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 57, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 326: {'origin': {'name': '_rs_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'inline_binding', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 327: {'origin': {'name': '__table_plus_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'line', '__type__': 'NonTerminal'}, {'name': 'end_bs', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 328: {'origin': {'name': '__table_plus_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'line', '__type__': 'NonTerminal'}, {'name': 'end_bs', '__type__': 'NonTerminal'}, {'name': '_NL', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 329: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 51, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 330: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'math', '__type__': 'NonTerminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'math', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 331: {'origin': {'name': 'line', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'transition', '__type__': 'NonTerminal'}, {'name': '_aux', '__type__': 'NonTerminal'}], 'order': 7, 'alias': 'transition', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 332: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'math', '__type__': 'NonTerminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'math', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 333: {'origin': {'name': 'line', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DOLLAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'math', '__type__': 'NonTerminal'}], 'order': 11, 'alias': 'const_decl', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 334: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'math', '__type__': 'NonTerminal'}], 'order': 50, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 335: {'origin': {'name': 'line', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'BANG', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_expr_no_int', '__type__': 'NonTerminal'}], 'order': 6, 'alias': 'print_val', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 336: {'origin': {'name': 'tr_operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_tr_expr_no_int', '__type__': 'NonTerminal'}, {'name': '_LROT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 7, 'alias': 'rot_left', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 337: {'origin': {'name': '_subt', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_NEGATE_LIVE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 338: {'origin': {'name': 'math_operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_math_expr', '__type__': 'NonTerminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_math_expr', '__type__': 'NonTerminal'}], 'order': 4, 'alias': 'math_div', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 339: {'origin': {'name': 'tr_operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_tr_expr_no_int', '__type__': 'NonTerminal'}, {'name': '_MULT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 4, 'alias': 'repeat_var', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 340: {'origin': {'name': '_expr_no_int', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 341: {'origin': {'name': 'math_operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_math_expr', '__type__': 'NonTerminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_math_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'math_mul', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 342: {'origin': {'name': '_tr_expr_norec_int', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 343: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'math', '__type__': 'NonTerminal'}], 'order': 52, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 344: {'origin': {'name': '_expr_no_int', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'operation', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 345: {'origin': {'name': 'math_operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_math_expr', '__type__': 'NonTerminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_math_expr', '__type__': 'NonTerminal'}], 'order': 8, 'alias': 'math_add', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 346: {'origin': {'name': '_tr_expr_norec_int', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'math', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 347: {'origin': {'name': 'tr_var', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_VAR_OPEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'range', '__type__': 'NonTerminal'}, {'name': '_VAR_CLOSE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'var', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 348: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 65, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 349: {'origin': {'name': '_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 350: {'origin': {'name': 'math_operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_math_expr', '__type__': 'NonTerminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_NEGATE_LIVE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_math_expr', '__type__': 'NonTerminal'}], 'order': 12, 'alias': 'math_sub', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 351: {'origin': {'name': '_tr_expr_norec_int', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'reference', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 352: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'math', '__type__': 'NonTerminal'}], 'order': 64, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 353: {'origin': {'name': '_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'math', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 354: {'origin': {'name': 'math', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'math_operation', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 355: {'origin': {'name': '__tr_var_star_5', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__tr_var_star_5', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_tr_expr', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 356: {'origin': {'name': '_tr_expr_norec_int', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_tr_expr_no_rec', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 357: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'math', '__type__': 'NonTerminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'math', '__type__': 'NonTerminal'}], 'order': 24, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 358: {'origin': {'name': '_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_expr_no_int', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 359: {'origin': {'name': '_sep', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 360: {'origin': {'name': 'tr_operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_tr_expr_no_int', '__type__': 'NonTerminal'}, {'name': '_subt', '__type__': 'NonTerminal'}, {'name': '_tr_expr_norec_int', '__type__': 'NonTerminal'}], 'order': 5, 'alias': 'subt', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 361: {'origin': {'name': '_aux', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'hoist_aux', '__type__': 'NonTerminal'}, {'name': 'normal_aux', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 362: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'math', '__type__': 'NonTerminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 25, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 363: {'origin': {'name': '_sep', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 364: {'origin': {'name': 'line', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_expr', '__type__': 'NonTerminal'}], 'order': 5, 'alias': 'var_decl', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 365: {'origin': {'name': 'tr_operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_tr_expr_no_int', '__type__': 'NonTerminal'}, {'name': '_RROT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 6, 'alias': 'rot_right', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 366: {'origin': {'name': '__var_star_4', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__var_star_4', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_expr', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 367: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'math', '__type__': 'NonTerminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'math', '__type__': 'NonTerminal'}], 'order': 20, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 368: {'origin': {'name': '__table_plus_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'line', '__type__': 'NonTerminal'}, {'name': 'end_bs', '__type__': 'NonTerminal'}, {'name': '_NL', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 369: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'math', '__type__': 'NonTerminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 21, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 370: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 61, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 371: {'origin': {'name': '__table_plus_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'line', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 372: {'origin': {'name': '__table_plus_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__table_plus_0', '__type__': 'NonTerminal'}, {'name': 'line', '__type__': 'NonTerminal'}, {'name': 'end_bs', '__type__': 'NonTerminal'}], 'order': 19, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 373: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'math', '__type__': 'NonTerminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'math', '__type__': 'NonTerminal'}], 'order': 18, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 374: {'origin': {'name': 'tr_operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'reference', '__type__': 'NonTerminal'}, {'name': '_MULT', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_tr_expr_no_rec', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'int_to_var_length', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 375: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'math', '__type__': 'NonTerminal'}], 'order': 60, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 376: {'origin': {'name': '__table_plus_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__table_plus_0', '__type__': 'NonTerminal'}, {'name': 'line', '__type__': 'NonTerminal'}, {'name': '_NL', 'filter_out': True, '__type__': 'Terminal'}], 'order': 20, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 377: {'origin': {'name': 'tr_operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'reference', '__type__': 'NonTerminal'}, {'name': '_MULT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': 'repeat_int', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 378: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'math', '__type__': 'NonTerminal'}], 'order': 58, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 379: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'math', '__type__': 'NonTerminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 19, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 380: {'origin': {'name': '__table_plus_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'comment', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 381: {'origin': {'name': '__table_plus_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__table_plus_0', '__type__': 'NonTerminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'comment', '__type__': 'NonTerminal'}], 'order': 17, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 382: {'origin': {'name': '_aux_expr_no_rec', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'leave_alone_mult', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 383: {'origin': {'name': '_tr_expr_no_rec', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'tr_var', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 384: {'origin': {'name': '__table_plus_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__table_plus_0', '__type__': 'NonTerminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'line', '__type__': 'NonTerminal'}], 'order': 15, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 385: {'origin': {'name': '_tr_expr_no_rec', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'range', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 386: {'origin': {'name': 'math_operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_math_expr', '__type__': 'NonTerminal'}, {'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_math_expr', '__type__': 'NonTerminal'}], 'order': 7, 'alias': 'math_div', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 387: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 69, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 388: {'origin': {'name': '_math_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 389: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'math', '__type__': 'NonTerminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'math', '__type__': 'NonTerminal'}], 'order': 32, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 390: {'origin': {'name': '_tr_expr_no_rec', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 391: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 59, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 392: {'origin': {'name': 'auxiliary', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'cdir_delay', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COMPASS_DIR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_aux_expr_no_int', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 12, 'alias': 'aux_map_other', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 393: {'origin': {'name': '_math_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'math', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 394: {'origin': {'name': '_auxlist', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'auxiliary', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 395: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'math', '__type__': 'NonTerminal'}], 'order': 54, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 396: {'origin': {'name': 'normal_aux', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_NORMAL_ARROW', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_auxlist', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 397: {'origin': {'name': 'tr_operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_NEGATE_ALL', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_tr_expr', '__type__': 'NonTerminal'}], 'order': 9, 'alias': 'all_except', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 398: {'origin': {'name': '_auxlist', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'symmetried_aux', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 399: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'math', '__type__': 'NonTerminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'math', '__type__': 'NonTerminal'}], 'order': 28, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 400: {'origin': {'name': 'line', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DOLLAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'math', '__type__': 'NonTerminal'}], 'order': 14, 'alias': 'const_decl', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 401: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'math', '__type__': 'NonTerminal'}], 'order': 14, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 402: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_WS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STATE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 73, 'alias': 'range_step', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 403: {'origin': {'name': 'prefix', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'crange', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}}
)
Shift = 0
Reduce = 1
def Lark_StandAlone(transformer=None, postlex=None, *, tbl):
  return Lark._load_from_dict(DATA, MEMO, transformer=transformer, postlex=postlex, tbl=tbl)
